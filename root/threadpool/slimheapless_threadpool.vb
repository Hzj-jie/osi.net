
Option Explicit On
Option Infer Off
Option Strict On

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with slimheapless_threadpool.vbp ----------
'so change slimheapless_threadpool.vbp instead of this file


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with slimqless2_threadpool.vbp ----------
'so change slimqless2_threadpool.vbp instead of this file



Imports System.Runtime.CompilerServices
Imports osi.root.connector
Imports osi.root.constants
Imports osi.root.formation

Public NotInheritable Class slimheapless_threadpool
    Private ReadOnly q As New waitable_slimheapless(Of Action)()
    Private ReadOnly rs(CInt(thread_pool.default_thread_count - uint32_1)) As slimheapless_runner

    Public Sub New()
        For i As Int32 = 0 To array_size_i(rs) - 1
            rs(i) = New slimheapless_runner(q)
        Next
    End Sub

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shared Function in_managed_thread() As Boolean
        Return slimheapless_runner.current_thread_is_managed()
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function running_in_current_thread() As Boolean
        For i As Int32 = 0 To rs.array_size_i() - 1
            If rs(i).running_in_current_thread() Then
                Return True
            End If
        Next
        Return False
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function thread_count() As UInt32
        Return thread_pool.default_thread_count
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function stopping() As Boolean
        For i As Int32 = 0 To rs.array_size_i() - 1
            If rs(i).stopping() Then
                Return True
            End If
        Next
        Return False
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function [stop]() As Boolean
        Dim r As Boolean = True
        For i As Int32 = 0 To array_size_i(rs) - 1
            If Not rs(i).stop() Then
                r = False
            End If
        Next
        q.Dispose()
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function idle() As Boolean
        Return q.empty()
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function wait(ByVal ms As Int64) As Boolean
        Return q.wait(ms)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub wait()
        q.wait()
    End Sub

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function execute() As Boolean
        Return rs(0).execute()
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function push(ByVal v As Action) As Boolean
        Return rs(0).push(v)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function join(ByVal ms As Int64) As Boolean
        For i As Int32 = 0 To rs.array_size_i() - 1
            If Not rs(i).join(ms) Then
                Return False
            End If
        Next
        Return True
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub join()
        For i As Int32 = 0 To array_size_i(rs) - 1
            rs(i).join()
        Next
    End Sub

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shared Operator +(ByVal this As slimheapless_threadpool, ByVal that As Action) As slimheapless_threadpool
        assert(Not this Is Nothing)
        this.push(that)
        Return this
    End Operator
End Class
'finish slimqless2_threadpool.vbp --------
'finish slimheapless_threadpool.vbp --------
