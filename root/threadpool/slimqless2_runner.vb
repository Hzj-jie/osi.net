
'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with slimqless2_runner.vbp ----------
'so change slimqless2_runner.vbp instead of this file


Imports System.Threading
Imports osi.root.constants
Imports osi.root.connector
Imports osi.root.formation
Imports osi.root.lock

Public NotInheritable Class slimqless2_runner
    <ThreadStatic()> Private Shared current As slimqless2_runner
    Private ReadOnly q As waitable_slimqless2(Of Action)
    Private ReadOnly t As Thread
    Private s As singleentry

    Public Sub New()
        Me.New(New waitable_slimqless2(Of Action)())
    End Sub

    Public Sub New(ByVal q As waitable_slimqless2(Of Action))
        assert(Not q Is Nothing)
        Me.q = q
        Me.t = New Thread(Sub()
                              current = Me
                              Try
                                  While Not stopping()
                                      If Not execute() Then
                                          wait()
                                      End If
                                  End While
                              Finally
                                  current = Nothing
                              End Try
                          End Sub)
        Me.t.Name() = "slimqless2_runner_thread"
        t.Start()
        assert(Not stopping())
    End Sub

    Public Shared Function current_thread_is_managed() As Boolean
        Return Not current Is Nothing
    End Function

    Public Function running_in_current_thread() As Boolean
        Return object_compare(current, Me) = 0
    End Function

    Public Function stopping() As Boolean
        Return s.in_use() AndAlso Not stopped()
    End Function

    Public Function stopped() As Boolean
        Return (t.ThreadState() = ThreadState.Aborted OrElse
                t.ThreadState() = ThreadState.Stopped) AndAlso
               assert(s.in_use())
    End Function

    Public Function [stop]() As Boolean
        If s.mark_in_use() Then
            t.Abort()
            GC.SuppressFinalize(Me)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function join(ByVal timeout_ms As Int64) As Boolean
        assert(Not running_in_current_thread())
        If timeout_ms > max_int32 Then
            Return t.Join(max_int32)
        ElseIf timeout_ms < 0 Then
            Return t.Join(Timeout.Infinite)
        Else
            Return t.Join(CInt(timeout_ms))
        End If
    End Function

    Public Sub join()
        t.Join()
    End Sub

    ' Execute one pending job in current thread.
    Public Function execute() As Boolean
        Dim c As Action = Nothing
        If q.pop(c) Then
            void_(c)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function wait(ByVal ms As Int64) As Boolean
        Return q.wait(ms)
    End Function

    Public Sub wait()
        q.wait()
    End Sub

    Public Function idle() As Boolean
        Return q.empty()
    End Function

    Public Function push(ByVal job As Action) As Boolean
        If job Is Nothing Then
            Return False
        Else
            q.emplace(job)
            Return True
        End If
    End Function

    Public Shared Operator +(ByVal this As slimqless2_runner, ByVal that As Action) As slimqless2_runner
        If this Is Nothing Then
            Return Nothing
        Else
            this.push(that)
            Return this
        End If
    End Operator

    Protected Overrides Sub Finalize()
        [stop]()
        MyBase.Finalize()
    End Sub
End Class
'finish slimqless2_runner.vbp --------
