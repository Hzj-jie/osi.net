
##DEFAULT TYPE slimqless2

Imports osi.root.constants
Imports osi.root.connector
Imports osi.root.formation
Imports osi.root.utils

Public NotInheritable Class ##TYPE##_threadpool2
    Implements IDisposable

    Private ReadOnly q As waitable_##TYPE##(Of Action)
    Private ReadOnly rs() As ##TYPE##_runner

    Public Sub New()
        q = New waitable_##TYPE##(Of Action)()
        ReDim rs(threadpool.default_thread_count - uint32_1)
        For i As UInt32 = 0 To array_size(rs) - uint32_1
            rs(i) = New ##TYPE##_runner(q)
        Next
    End Sub

    Public Shared Function current_thread_is_managed() As Boolean
        Return ##TYPE##_runner.current_thread_is_managed()
    End Function

    Public Shared Function in_managed_thread() As Boolean
        Return ##TYPE##_runner.current_thread_is_managed()
    End Function

    Public Function running_in_current_thread() As Boolean
        For i As UInt32 = 0 To array_size(rs) - uint32_1
            If rs(i).running_in_current_thread() Then
                Return True
            End If
        Next
        Return False
    End Function

    Public Function thread_count() As UInt32
        Return threadpool.default_thread_count
    End Function

    Public Function stopping() As Boolean
        For i As UInt32 = 0 To array_size(rs) - uint32_1
            If rs(i).stopping() Then
                Return True
            End If
        Next
        Return False
    End Function

    Public Function [stop]() As Boolean
        If object_compare(Me, newable_global_instance(Of ##TYPE##_threadpool2).ref()) <> 0 Then
            Dim r As Boolean = False
            r = True
            For i As UInt32 = 0 To array_size(rs) - uint32_1
                If Not rs(i).stop() Then
                    r = False
                End If
            Next
            Return r
        Else
            Return False
        End If
    End Function

    Public Function idle() As Boolean
        Return q.empty()
    End Function

    Public Function wait(ByVal ms As Int64) As Boolean
        Return q.wait(ms)
    End Function

    Public Function wait_job(ByVal ms As Int64) As Boolean
        Return wait(ms)
    End Function

    Public Sub wait()
        q.wait()
    End Sub

    Public Sub wait_job()
        wait()
    End Sub

    Public Function execute() As Boolean
        Return rs(0).execute()
    End Function

    Public Function execute_job() As Boolean
        Return execute()
    End Function

    Public Function push(ByVal v As Action) As Boolean
        Return rs(0).push(v)
    End Function

    Public Function queue_job(ByVal v As Action) As Boolean
        Return push(v)
    End Function

    Public Function join(ByVal ms As Int64) As Boolean
        For i As UInt32 = 0 To array_size(rs) - uint32_1
            If Not rs(i).join(ms) Then
                Return False
            End If
        Next
        Return True
    End Function

    Public Sub join()
        For i As UInt32 = 0 To array_size(rs) - uint32_1
            rs(i).join()
        Next
    End Sub

    Public Sub Dispose() Implements IDisposable.Dispose
        [stop]()
    End Sub

    Public Shared Operator +(ByVal this As ##TYPE##_threadpool2, ByVal that As Action) As ##TYPE##_threadpool2
        assert(Not this Is Nothing)
        this.push(that)
        Return this
    End Operator
End Class
