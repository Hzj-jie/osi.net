
##DEFAULT TYPE npos_uint
##DEFAULT ACCEPT_ZERO True
##DEFAULT ACCEPT_MAX True
##DEFAULT HAS_NPOS True
##DEFAULT HAS_INF True

Public NotInheritable Class ##TYPE##_bytes_test
    Inherits [case]

    Public Overrides Function run() As Boolean
        For i As Int32 = 0 To 1024 * 32 - 1
            Dim x As ##TYPE## = Nothing
            If rnd_bool() Then
                x = rnd_int64()
            Else
                x = rnd_uint64()
            End If
            Dim b() As Byte = Nothing
            b = bytes_serializer.to_bytes(x)
            Dim y As ##TYPE## = Nothing
            Dim p As UInt32 = uint32_0
            assertion.is_true(bytes_serializer.consume_from(b, p, y))
            assertion.equal(p, array_size(b))
            assertion.equal(x, y)
            assertion.is_true(bytes_serializer.from_bytes(b, y))
            assertion.equal(x, y)
            Dim o() As Byte = Nothing
            ReDim o(-1)
            assertion.is_false(bytes_serializer.append_to(y, o, uint32_0))
#If ##ACCEPT_ZERO## AndAlso ##ACCEPT_MAX## AndAlso (##HAS_NPOS## OrElse ##HAS_INF##) Then
#If ##HAS_NPOS## Then
            If x.npos() Then
#ElseIf ##HAS_INF## Then
            If x.infinite() Then
#Else
            FAILURE
#End If
                ReDim o(CInt(sizeof_int8 - uint32_1))
            Else
                ReDim o(CInt(##TYPE##.sizeof_value + sizeof_int8 - uint32_1))
            End If
            assertion.is_true(bytes_serializer.append_to(y, o, uint32_0))
            assertion.equal(memcmp(b, o), 0)
#End If
            ReDim o(CInt(##TYPE##.sizeof_value + sizeof_int8))
            Dim offset As UInt32 = uint32_0
            assertion.is_true(bytes_serializer.append_to(y, o, offset))
            assertion.equal(memcmp(b, o, offset), 0)
        Next
        Return True
    End Function
End Class

##UNDEF ACCEPT_ZERO
##UNDEF ACCEPT_MAX
##UNDEF HAS_NPOS
##UNDEF HAS_INF
