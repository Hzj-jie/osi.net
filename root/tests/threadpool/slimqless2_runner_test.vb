
Option Explicit On
Option Infer Off
Option Strict On

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with slimqless2_runner_test.vbp ----------
'so change slimqless2_runner_test.vbp instead of this file


Imports System.Threading
Imports osi.root.connector
Imports osi.root.formation
Imports osi.root.threadpool
Imports osi.root.lock
Imports osi.root.utt

Public Class slimqless2_runner_test
    Inherits [case]

    Private Shared Function single_thread_case() As Boolean
        Const size As Int32 = 1024 * 1024
        Dim b As bit_array_thread_safe = Nothing
        b = New bit_array_thread_safe(size)
        Dim c As atomic_int32 = Nothing
        c = New atomic_int32()
        Dim r As slimqless2_runner = Nothing
        r = New slimqless2_runner()
        assert_false(r.running_in_current_thread())
        assert_false(slimqless2_runner.current_thread_is_managed())
        For i As Int32 = 0 To size - 1
            Dim j As UInt32 = 0
            j = CUInt(i)
            r.push(Sub()
                       assert_true(r.running_in_current_thread())
                       assert_true(slimqless2_runner.current_thread_is_managed())
                       assert_false(b(j))
                       b(j) = True
                       If c.increment() = size Then
                           r.stop()
                       End If
                   End Sub)
        Next
        assert_true(r.join(seconds_to_milliseconds(size * 240 \ 32 \ 1024 \ 1024)))
        assert_equal(+c, size)
        assert_false(r.stopping())
        assert_true(r.stopped())
        assert_false(r.stop())
        r.join()
        assert_false(r.stopping())
        assert_true(r.stopped())
        Return True
    End Function

    Private Shared Function execute_case() As Boolean
        Const size As Int32 = 128 * 1024
        Dim b As bit_array_thread_safe = Nothing
        b = New bit_array_thread_safe(size)
        Dim c As atomic_int32 = Nothing
        c = New atomic_int32()
        Dim executed As atomic_int32 = Nothing
        executed = New atomic_int32()
        Dim mre As ManualResetEvent = Nothing
        mre = New ManualResetEvent(False)
        Dim r As slimqless2_runner = Nothing
        r = New slimqless2_runner()
        assert_false(r.running_in_current_thread())
        assert_false(slimqless2_runner.current_thread_is_managed())
        For i As Int32 = 0 To size - 1
            Dim j As UInt32 = 0
            j = CUInt(i)
            r.push(Sub()
                       assert(mre.wait())
                       If Not r.running_in_current_thread() Then
                           assert_false(slimqless2_runner.current_thread_is_managed())
                           executed.increment()
                       Else
                           assert_true(slimqless2_runner.current_thread_is_managed())
                       End If
                       assert_false(b(j))
                       b(j) = True
                       c.increment()
                       fake_processor_ticks_work(1)
                   End Sub)
        Next
        assert(mre.force_set())
        While r.execute()
        End While
        assert_true(timeslice_sleep_wait_until(Function() +c = size, seconds_to_milliseconds(1)))
        assert_false(r.stopping())
        assert_more(+executed, 0)
        assert_true(r.stop())
        assert_false(r.stop())
        r.join()
        assert_false(r.stopping())
        assert_true(r.stopped())
        Return True
    End Function

    Public Overrides Function run() As Boolean
        Return single_thread_case() AndAlso
               execute_case()
    End Function
End Class
'finish slimqless2_runner_test.vbp --------
