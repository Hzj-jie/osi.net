
##DEFAULT TYPE slimqless2_runner
Imports osi.root.connector
Imports osi.root.threadpool
Imports osi.root.utt

Public Class ##TYPE##_synchronize_invoke_test
    Inherits [case]

    Private Shared Function invoke_asynchronously_case() As Boolean
        Dim t As ##TYPE## = Nothing
        t = New ##TYPE##()
        Dim s As ##TYPE##_synchronize_invoke = Nothing
        s = New ##TYPE##_synchronize_invoke(t)
        For i As Int32 = 0 To 100
            Dim result As Object = Nothing
            Dim args() As Object = Nothing
            result = New Object()
            ReDim args(2)
            For j As Int32 = 0 To array_size(args) - 1
                args(j) = New Object()
            Next
            Dim exec As Func(Of Object, Object, Object, Object) = Nothing
            exec = Function(ByVal a As Object, ByVal b As Object, ByVal c As Object) As Object
                       assert_reference_equal(a, args(0))
                       assert_reference_equal(b, args(1))
                       assert_reference_equal(c, args(2))
                       Return result
                   End Function
            assert_reference_equal(s.Invoke(exec, args), result)
            Dim ar As IAsyncResult = Nothing
            ar = s.BeginInvoke(exec, args)
            If assert_not_nothing(ar) Then
                assert_false(ar.CompletedSynchronously())
                assert_reference_equal(s.EndInvoke(ar), result)
            End If
        Next
        assert(t.stop())
        Return True
    End Function

    Private Shared Function invoke_synchronously_case() As Boolean
        Dim t As ##TYPE## = Nothing
        t = New ##TYPE##()
        Dim s As ##TYPE##_synchronize_invoke = Nothing
        s = New ##TYPE##_synchronize_invoke(t)
        assert(t.push(Sub()
                          For i As Int32 = 0 To 100
                              Dim result As Object = Nothing
                              Dim args() As Object = Nothing
                              result = New Object()
                              ReDim args(2)
                              For j As Int32 = 0 To array_size(args) - 1
                                  args(j) = New Object()
                              Next
                              Dim exec As Func(Of Object, Object, Object, Object) = Nothing
                              exec = Function(ByVal a As Object, ByVal b As Object, ByVal c As Object) As Object
                                         assert_reference_equal(a, args(0))
                                         assert_reference_equal(b, args(1))
                                         assert_reference_equal(c, args(2))
                                         Return result
                                     End Function
                              assert_reference_equal(s.Invoke(exec, args), result)
                              Dim ar As IAsyncResult = Nothing
                              ar = s.BeginInvoke(exec, args)
                              If assert_not_nothing(ar) Then
                                  assert_true(ar.CompletedSynchronously())
                                  assert_reference_equal(s.EndInvoke(ar), result)
                              End If
                          Next
                          assert_true(t.idle())
                          t.stop()
                      End Sub))
        t.join()
        Return True
    End Function

    Public Overrides Function run() As Boolean
        Return invoke_asynchronously_case() AndAlso
               invoke_synchronously_case()
    End Function
End Class
