
Option Explicit On
Option Infer Off
Option Strict On

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with thread_static_resolver.vbp ----------
'so change thread_static_resolver.vbp instead of this file


Imports osi.root.connector


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with resolver_wrapper.vbp ----------
'so change resolver_wrapper.vbp instead of this file



Imports osi.root.formation

Public NotInheritable Class thread_static_resolver
    Public Shared Function resolve(Of T As Class)(ByRef o As T) As Boolean
        Return thread_static_resolver(Of T).resolve(o)
    End Function

    Public Shared Function resolve_or_default(Of T As Class)(ByVal [default] As T) As T
        Return thread_static_resolver(Of T).resolve_or_default([default])
    End Function

    ' thread_static_resolver.register(Of T)(ByVal i As Func(Of T))
    ' cannot work as expected, the compiler automatically infers to
    ' thread_static_resolver.register(Of T As Func(Of ?))(ByVal i As T).

    Private Sub New()
    End Sub
End Class

Public NotInheritable Class thread_static_resolver(Of T As Class)

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with thread_static_resolver_impl.vbp ----------
'so change thread_static_resolver_impl.vbp instead of this file


    <ThreadStatic()> Private Shared resolver As resolver(Of T)

    Private Shared Function create_resolver() As resolver(Of T)
        Dim r As resolver(Of T) = Nothing
        r = resolver
        If r Is Nothing Then
            r = New resolver(Of T)()
            resolver = r
        End If
        assert(Not r Is Nothing)
        Return r
    End Function

'finish thread_static_resolver_impl.vbp --------
    Public Shared Sub register(ByVal i As T)
        create_resolver().register(i)
    End Sub

    Public Shared Sub register(ByVal i As Func(Of T))
        create_resolver().register(i)
    End Sub

    Public Shared Sub unregister()
        create_resolver().unregister()
    End Sub

    Public Shared Function resolve(ByRef o As T) As Boolean
        Return create_resolver().resolve(o)
    End Function

    Public Shared Function resolve() As T
        Return create_resolver().resolve()
    End Function

    Public Shared Function resolve_or_null() As T
        Return create_resolver().resolve_or_null()
    End Function

    Public Shared Function resolve_or_default(Optional ByVal [default] As T = Nothing) As T
        Return create_resolver().resolve_or_default([default])
    End Function

    Public Shared Function scoped_register(ByVal i As T) As disposer
        Return scoped_action(Sub()
                                 register(i)
                             End Sub,
                             Sub()
                                 unregister()
                             End Sub)
    End Function

    Public Shared Function scoped_register(ByVal i As Func(Of T)) As disposer
        Return scoped_action(Sub()
                                 register(i)
                             End Sub,
                             Sub()
                                 unregister()
                             End Sub)
    End Function

    Private Sub New()
    End Sub
End Class

'finish resolver_wrapper.vbp --------
'finish thread_static_resolver.vbp --------
