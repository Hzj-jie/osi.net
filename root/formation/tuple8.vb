
Option Explicit On
Option Infer Off
Option Strict On

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple8.vbp ----------
'so change tuple8.vbp instead of this file



'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple.vbp ----------
'so change tuple.vbp instead of this file


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_impl.vbp ----------
'so change tuple_impl.vbp instead of this file



#Const IS_CLASS = ("tuple" = "tuple")
#If IS_CLASS Then
Imports System.Runtime.CompilerServices
Imports System.Text
Imports osi.root.connector
Imports osi.root.constants
#End If

' To reduce complexity, tuple is always const, use pointer if the fields are required to be muttable.
#If IS_CLASS Then
Public NotInheritable Class tuple(Of T1, T2, T3, T4, T5, T6, T7, T8)
#Else
Public Structure tuple(Of T1, T2, T3, T4, T5, T6, T7, T8)
#End If
    Implements ICloneable, ICloneable(Of tuple(Of T1, T2, T3, T4, T5, T6, T7, T8)),
               IComparable, IComparable(Of tuple(Of T1, T2, T3, T4, T5, T6, T7, T8))

    Private __1 As T1

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _1() As T1
        Return __1
    End Function

    Private __2 As T2

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _2() As T2
        Return __2
    End Function

    Private __3 As T3

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _3() As T3
        Return __3
    End Function

#If 8 > 3 Then
    Private __4 As T4

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _4() As T4
        Return __4
    End Function
#End If

#If 8 > 4 Then
    Private __5 As T5

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _5() As T5
        Return __5
    End Function
#End If

#If 8 > 5 Then
    Private __6 As T6

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _6() As T6
        Return __6
    End Function
#End If

#If 8 > 6 Then
    Private __7 As T7

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _7() As T7
        Return __7
    End Function
#End If

#If 8 > 7 Then
    Private __8 As T8

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _8() As T8
        Return __8
    End Function
#End If

#If 8 = 3 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3)
#ElseIf 8 = 4 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3,
                   ByVal _4 As T4)
#ElseIf 8 = 5 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3,
                   ByVal _4 As T4,
                   ByVal _5 As T5)
#ElseIf 8 = 6 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3,
                   ByVal _4 As T4,
                   ByVal _5 As T5,
                   ByVal _6 As T6)
#ElseIf 8 = 7 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3,
                   ByVal _4 As T4,
                   ByVal _5 As T5,
                   ByVal _6 As T6,
                   ByVal _7 As T7)
#ElseIf 8 = 8 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3,
                   ByVal _4 As T4,
                   ByVal _5 As T5,
                   ByVal _6 As T6,
                   ByVal _7 As T7,
                   ByVal _8 As T8)
#Else
    Unexpected SIZE (8)
#End If
        Me.__1 = _1
        Me.__2 = _2
        Me.__3 = _3
#If 8 > 3 Then
        Me.__4 = _4
#End If
#If 8 > 4 Then
        Me.__5 = _5
#End If
#If 8 > 5 Then
        Me.__6 = _6
#End If
#If 8 > 6 Then
        Me.__7 = _7
#End If
#If 8 > 7 Then
        Me.__8 = _8
#End If
    End Sub

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function Clone() As Object Implements ICloneable.Clone
        Return CloneT()
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function CloneT() As tuple(Of T1, T2, T3, T4, T5, T6, T7, T8) _
                                Implements ICloneable(Of tuple(Of T1, T2, T3, T4, T5, T6, T7, T8)).Clone
#If 8 = 3 Then
        Return tuple.of_tuple(__1, __2, __3)
#ElseIf 8 = 4 Then
        Return tuple.of_tuple(__1, __2, __3, __4)
#ElseIf 8 = 5 Then
        Return tuple.of_tuple(__1, __2, __3, __4, __5)
#ElseIf 8 = 6 Then
        Return tuple.of_tuple(__1, __2, __3, __4, __5, __6)
#ElseIf 8 = 7 Then
        Return tuple.of_tuple(__1, __2, __3, __4, __5, __6, __7)
#ElseIf 8 = 8 Then
        Return tuple.of_tuple(__1, __2, __3, __4, __5, __6, __7, __8)
#Else
        Unexpected SIZE (8)
#End If
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function CompareTo(ByVal other As tuple(Of T1, T2, T3, T4, T5, T6, T7, T8)) As Int32 _
                             Implements IComparable(Of tuple(Of T1, T2, T3, T4, T5, T6, T7, T8)).CompareTo
#If IS_CLASS Then
        If other Is Nothing Then
            Return 1
        End If
#End If
        Dim r As Int32 = 0

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_compare.vbp ----------
'so change tuple_compare.vbp instead of this file


    r = compare(__1, other.__1)
    If r <> 0 Then
        Return r
    End If
'finish tuple_compare.vbp --------

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_compare.vbp ----------
'so change tuple_compare.vbp instead of this file


    r = compare(__2, other.__2)
    If r <> 0 Then
        Return r
    End If
'finish tuple_compare.vbp --------

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_compare.vbp ----------
'so change tuple_compare.vbp instead of this file


    r = compare(__3, other.__3)
    If r <> 0 Then
        Return r
    End If
'finish tuple_compare.vbp --------
#If 8 > 3 Then

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_compare.vbp ----------
'so change tuple_compare.vbp instead of this file


    r = compare(__4, other.__4)
    If r <> 0 Then
        Return r
    End If
'finish tuple_compare.vbp --------
#End If
#If 8 > 4 Then

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_compare.vbp ----------
'so change tuple_compare.vbp instead of this file


    r = compare(__5, other.__5)
    If r <> 0 Then
        Return r
    End If
'finish tuple_compare.vbp --------
#End If
#If 8 > 5 Then

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_compare.vbp ----------
'so change tuple_compare.vbp instead of this file


    r = compare(__6, other.__6)
    If r <> 0 Then
        Return r
    End If
'finish tuple_compare.vbp --------
#End If
#If 8 > 6 Then

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_compare.vbp ----------
'so change tuple_compare.vbp instead of this file


    r = compare(__7, other.__7)
    If r <> 0 Then
        Return r
    End If
'finish tuple_compare.vbp --------
#End If
#If 8 > 7 Then

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_compare.vbp ----------
'so change tuple_compare.vbp instead of this file


    r = compare(__8, other.__8)
    If r <> 0 Then
        Return r
    End If
'finish tuple_compare.vbp --------
#End If
        Return 0
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
        Return CompareTo(cast(Of tuple(Of T1, T2, T3, T4, T5, T6, T7, T8))(obj, False))
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shared Operator =(ByVal this As tuple(Of T1, T2, T3, T4, T5, T6, T7, T8),
                             ByVal that As tuple(Of T1, T2, T3, T4, T5, T6, T7, T8)) As Boolean
        Return compare(this, that) = 0
    End Operator

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shared Operator =(ByVal this As tuple(Of T1, T2, T3, T4, T5, T6, T7, T8),
                             ByVal that As Object) As Boolean
        Return compare(this, that) = 0
    End Operator

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shared Operator <>(ByVal this As tuple(Of T1, T2, T3, T4, T5, T6, T7, T8),
                              ByVal that As tuple(Of T1, T2, T3, T4, T5, T6, T7, T8)) As Boolean
        Return compare(this, that) <> 0
    End Operator

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shared Operator <>(ByVal this As tuple(Of T1, T2, T3, T4, T5, T6, T7, T8),
                              ByVal that As Object) As Boolean
        Return compare(this, that) <> 0
    End Operator

    Public Overrides Function ToString() As String
        Dim r As StringBuilder = Nothing
        r = New StringBuilder()
        r.Append(Convert.ToString(__1))
        r.Append(", ")
        r.Append(Convert.ToString(__2))
        r.Append(", ")
        r.Append(Convert.ToString(__3))
#If 8 > 3 Then
        r.Append(", ")
        r.Append(Convert.ToString(__4))
#End If
#If 8 > 4 Then
        r.Append(", ")
        r.Append(Convert.ToString(__5))
#End If
#If 8 > 5 Then
        r.Append(", ")
        r.Append(Convert.ToString(__6))
#End If
#If 8 > 6 Then
        r.Append(", ")
        r.Append(Convert.ToString(__7))
#End If
#If 8 > 7 Then
        r.Append(", ")
        r.Append(Convert.ToString(__8))
#End If
        Return Convert.ToString(r)
    End Function

    Public Overrides Function GetHashCode() As Int32
        Dim r As Int32 = 0
        r = r Xor If(__1 Is Nothing, 0, __1.GetHashCode())
        r = r Xor If(__2 Is Nothing, 0, __2.GetHashCode())
        r = r Xor If(__3 Is Nothing, 0, __3.GetHashCode())
#If 8 > 3 Then
        r = r Xor If(__4 Is Nothing, 0, __4.GetHashCode())
#End If
#If 8 > 4 Then
        r = r Xor If(__5 Is Nothing, 0, __5.GetHashCode())
#End If
#If 8 > 5 Then
        r = r Xor If(__6 Is Nothing, 0, __6.GetHashCode())
#End If
#If 8 > 6 Then
        r = r Xor If(__7 Is Nothing, 0, __7.GetHashCode())
#End If
#If 8 > 7 Then
        r = r Xor If(__8 Is Nothing, 0, __8.GetHashCode())
#End If
        Return r
    End Function

    Public Overrides Function Equals(ByVal obj As Object) As Boolean
        Return compare(Me, obj) = 0
    End Function
#If IS_CLASS Then
End Class
#Else
End Structure
#End If

'finish tuple_impl.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_impl.vbp ----------
'so change tuple_impl.vbp instead of this file



#Const IS_CLASS = ("fast_tuple" = "tuple")
#If IS_CLASS Then
Imports System.Runtime.CompilerServices
Imports System.Text
Imports osi.root.connector
Imports osi.root.constants
#End If

' To reduce complexity, tuple is always const, use pointer if the fields are required to be muttable.
#If IS_CLASS Then
Public NotInheritable Class fast_tuple(Of T1, T2, T3, T4, T5, T6, T7, T8)
#Else
Public Structure fast_tuple(Of T1, T2, T3, T4, T5, T6, T7, T8)
#End If
    Implements ICloneable, ICloneable(Of fast_tuple(Of T1, T2, T3, T4, T5, T6, T7, T8)),
               IComparable, IComparable(Of fast_tuple(Of T1, T2, T3, T4, T5, T6, T7, T8))

    Private __1 As T1

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _1() As T1
        Return __1
    End Function

    Private __2 As T2

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _2() As T2
        Return __2
    End Function

    Private __3 As T3

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _3() As T3
        Return __3
    End Function

#If 8 > 3 Then
    Private __4 As T4

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _4() As T4
        Return __4
    End Function
#End If

#If 8 > 4 Then
    Private __5 As T5

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _5() As T5
        Return __5
    End Function
#End If

#If 8 > 5 Then
    Private __6 As T6

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _6() As T6
        Return __6
    End Function
#End If

#If 8 > 6 Then
    Private __7 As T7

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _7() As T7
        Return __7
    End Function
#End If

#If 8 > 7 Then
    Private __8 As T8

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _8() As T8
        Return __8
    End Function
#End If

#If 8 = 3 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3)
#ElseIf 8 = 4 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3,
                   ByVal _4 As T4)
#ElseIf 8 = 5 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3,
                   ByVal _4 As T4,
                   ByVal _5 As T5)
#ElseIf 8 = 6 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3,
                   ByVal _4 As T4,
                   ByVal _5 As T5,
                   ByVal _6 As T6)
#ElseIf 8 = 7 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3,
                   ByVal _4 As T4,
                   ByVal _5 As T5,
                   ByVal _6 As T6,
                   ByVal _7 As T7)
#ElseIf 8 = 8 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3,
                   ByVal _4 As T4,
                   ByVal _5 As T5,
                   ByVal _6 As T6,
                   ByVal _7 As T7,
                   ByVal _8 As T8)
#Else
    Unexpected SIZE (8)
#End If
        Me.__1 = _1
        Me.__2 = _2
        Me.__3 = _3
#If 8 > 3 Then
        Me.__4 = _4
#End If
#If 8 > 4 Then
        Me.__5 = _5
#End If
#If 8 > 5 Then
        Me.__6 = _6
#End If
#If 8 > 6 Then
        Me.__7 = _7
#End If
#If 8 > 7 Then
        Me.__8 = _8
#End If
    End Sub

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function Clone() As Object Implements ICloneable.Clone
        Return CloneT()
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function CloneT() As fast_tuple(Of T1, T2, T3, T4, T5, T6, T7, T8) _
                                Implements ICloneable(Of fast_tuple(Of T1, T2, T3, T4, T5, T6, T7, T8)).Clone
#If 8 = 3 Then
        Return tuple.of_fast_tuple(__1, __2, __3)
#ElseIf 8 = 4 Then
        Return tuple.of_fast_tuple(__1, __2, __3, __4)
#ElseIf 8 = 5 Then
        Return tuple.of_fast_tuple(__1, __2, __3, __4, __5)
#ElseIf 8 = 6 Then
        Return tuple.of_fast_tuple(__1, __2, __3, __4, __5, __6)
#ElseIf 8 = 7 Then
        Return tuple.of_fast_tuple(__1, __2, __3, __4, __5, __6, __7)
#ElseIf 8 = 8 Then
        Return tuple.of_fast_tuple(__1, __2, __3, __4, __5, __6, __7, __8)
#Else
        Unexpected SIZE (8)
#End If
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function CompareTo(ByVal other As fast_tuple(Of T1, T2, T3, T4, T5, T6, T7, T8)) As Int32 _
                             Implements IComparable(Of fast_tuple(Of T1, T2, T3, T4, T5, T6, T7, T8)).CompareTo
#If IS_CLASS Then
        If other Is Nothing Then
            Return 1
        End If
#End If
        Dim r As Int32 = 0

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_compare.vbp ----------
'so change tuple_compare.vbp instead of this file


    r = compare(__1, other.__1)
    If r <> 0 Then
        Return r
    End If
'finish tuple_compare.vbp --------

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_compare.vbp ----------
'so change tuple_compare.vbp instead of this file


    r = compare(__2, other.__2)
    If r <> 0 Then
        Return r
    End If
'finish tuple_compare.vbp --------

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_compare.vbp ----------
'so change tuple_compare.vbp instead of this file


    r = compare(__3, other.__3)
    If r <> 0 Then
        Return r
    End If
'finish tuple_compare.vbp --------
#If 8 > 3 Then

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_compare.vbp ----------
'so change tuple_compare.vbp instead of this file


    r = compare(__4, other.__4)
    If r <> 0 Then
        Return r
    End If
'finish tuple_compare.vbp --------
#End If
#If 8 > 4 Then

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_compare.vbp ----------
'so change tuple_compare.vbp instead of this file


    r = compare(__5, other.__5)
    If r <> 0 Then
        Return r
    End If
'finish tuple_compare.vbp --------
#End If
#If 8 > 5 Then

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_compare.vbp ----------
'so change tuple_compare.vbp instead of this file


    r = compare(__6, other.__6)
    If r <> 0 Then
        Return r
    End If
'finish tuple_compare.vbp --------
#End If
#If 8 > 6 Then

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_compare.vbp ----------
'so change tuple_compare.vbp instead of this file


    r = compare(__7, other.__7)
    If r <> 0 Then
        Return r
    End If
'finish tuple_compare.vbp --------
#End If
#If 8 > 7 Then

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with tuple_compare.vbp ----------
'so change tuple_compare.vbp instead of this file


    r = compare(__8, other.__8)
    If r <> 0 Then
        Return r
    End If
'finish tuple_compare.vbp --------
#End If
        Return 0
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
        Return CompareTo(cast(Of fast_tuple(Of T1, T2, T3, T4, T5, T6, T7, T8))(obj, False))
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shared Operator =(ByVal this As fast_tuple(Of T1, T2, T3, T4, T5, T6, T7, T8),
                             ByVal that As fast_tuple(Of T1, T2, T3, T4, T5, T6, T7, T8)) As Boolean
        Return compare(this, that) = 0
    End Operator

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shared Operator =(ByVal this As fast_tuple(Of T1, T2, T3, T4, T5, T6, T7, T8),
                             ByVal that As Object) As Boolean
        Return compare(this, that) = 0
    End Operator

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shared Operator <>(ByVal this As fast_tuple(Of T1, T2, T3, T4, T5, T6, T7, T8),
                              ByVal that As fast_tuple(Of T1, T2, T3, T4, T5, T6, T7, T8)) As Boolean
        Return compare(this, that) <> 0
    End Operator

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shared Operator <>(ByVal this As fast_tuple(Of T1, T2, T3, T4, T5, T6, T7, T8),
                              ByVal that As Object) As Boolean
        Return compare(this, that) <> 0
    End Operator

    Public Overrides Function ToString() As String
        Dim r As StringBuilder = Nothing
        r = New StringBuilder()
        r.Append(Convert.ToString(__1))
        r.Append(", ")
        r.Append(Convert.ToString(__2))
        r.Append(", ")
        r.Append(Convert.ToString(__3))
#If 8 > 3 Then
        r.Append(", ")
        r.Append(Convert.ToString(__4))
#End If
#If 8 > 4 Then
        r.Append(", ")
        r.Append(Convert.ToString(__5))
#End If
#If 8 > 5 Then
        r.Append(", ")
        r.Append(Convert.ToString(__6))
#End If
#If 8 > 6 Then
        r.Append(", ")
        r.Append(Convert.ToString(__7))
#End If
#If 8 > 7 Then
        r.Append(", ")
        r.Append(Convert.ToString(__8))
#End If
        Return Convert.ToString(r)
    End Function

    Public Overrides Function GetHashCode() As Int32
        Dim r As Int32 = 0
        r = r Xor If(__1 Is Nothing, 0, __1.GetHashCode())
        r = r Xor If(__2 Is Nothing, 0, __2.GetHashCode())
        r = r Xor If(__3 Is Nothing, 0, __3.GetHashCode())
#If 8 > 3 Then
        r = r Xor If(__4 Is Nothing, 0, __4.GetHashCode())
#End If
#If 8 > 4 Then
        r = r Xor If(__5 Is Nothing, 0, __5.GetHashCode())
#End If
#If 8 > 5 Then
        r = r Xor If(__6 Is Nothing, 0, __6.GetHashCode())
#End If
#If 8 > 6 Then
        r = r Xor If(__7 Is Nothing, 0, __7.GetHashCode())
#End If
#If 8 > 7 Then
        r = r Xor If(__8 Is Nothing, 0, __8.GetHashCode())
#End If
        Return r
    End Function

    Public Overrides Function Equals(ByVal obj As Object) As Boolean
        Return compare(Me, obj) = 0
    End Function
#If IS_CLASS Then
End Class
#Else
End Structure
#End If

'finish tuple_impl.vbp --------
'finish tuple.vbp --------
'finish tuple8.vbp --------
