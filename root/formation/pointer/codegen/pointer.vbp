
##DEFAULT TYPE pointer
##DEFAULT INNER_TYPE T

Imports System.Diagnostics.CodeAnalysis
Imports System.IO
Imports System.Runtime.CompilerServices
Imports osi.root.lock
Imports osi.root.lock.slimlock
Imports osi.root.connector

' TODO: Remove
Public Module _##TYPE##
    Public Function make_##TYPE##(Of T)(ByVal i As ##INNER_TYPE##) As ##TYPE##(Of T)
        Return ##TYPE##.of(i)
    End Function

    Public Function make_##TYPE##s(Of T)(ByVal ParamArray i As ##INNER_TYPE##()) As ##TYPE##(Of T)()
        Return ##TYPE##.of(i)
    End Function

    <Extension()> Public Function renew(Of T)(ByRef i As ##TYPE##(Of T)) As ##TYPE##(Of T)
        If i Is Nothing Then
            i = New ##TYPE##(Of T)()
        Else
            i.clear()
        End If
        Return i
    End Function
End Module

Public NotInheritable Class ##TYPE##
    Public Shared Function [of](Of T)(ByVal i As ##INNER_TYPE##) As ##TYPE##(Of T)
        Return New ##TYPE##(Of T)(i)
    End Function

    Public Shared Function [of](Of T)(ByVal ParamArray i As ##INNER_TYPE##()) As ##TYPE##(Of T)()
        Dim r() As ##TYPE##(Of T) = Nothing
        ReDim r(array_size_i(i) - 1)
        For j As Int32 = 0 To array_size_i(i) - 1
            r(j) = make_##TYPE##(i(j))
        Next
        Return r
    End Function

    Private Sub New()
    End Sub
End Class

<SuppressMessage("Microsoft.Design", "BC42333")>
Public Class ##TYPE##(Of T)
    Implements IComparable, IComparable(Of ##TYPE##(Of T)), IComparable(Of ##INNER_TYPE##),
               ICloneable, ICloneable(Of ##TYPE##(Of T))

    Shared Sub New()
        Dim tp As Type = Nothing
        tp = GetType(T)
        If tp.IsValueType() Then
            assert(Not tp.implement(Of ilock)())
            assert(Not tp.implement(Of islimlock)())
            assert(Not tp Is GetType(singleentry))
            assert(Not tp Is GetType(forks))
        End If
        bytes_serializer(Of ##TYPE##(Of T)).forward_registration.from(Of ##INNER_TYPE##)()
    End Sub

    Public Shared Function move(ByVal that As ##TYPE##(Of T)) As ##TYPE##(Of T)
        If that Is Nothing Then
            Return Nothing
        Else
            Dim r As ##TYPE##(Of T) = Nothing
            r = New ##TYPE##(Of T)(that)
            that.clear()
            Return r
        End If
    End Function

    Public Sub New()
        clear()
    End Sub

    Public Sub New(ByVal i As ##INNER_TYPE##)
        [set](i)
    End Sub

    Public Sub New(ByVal i As ##TYPE##(Of T))
        If i Is Nothing Then
            clear()
        Else
            [set](+i)
        End If
    End Sub

    ##INCLUDE ##TYPE##.override.vbp

    Public Function release() As ##INNER_TYPE##
        Dim r As ##INNER_TYPE## = Nothing
        r = [get]()
        clear()
        Return r
    End Function

    Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
        Return CompareTo(cast(Of ##TYPE##(Of T))(obj, False))
    End Function

    Public Function CompareTo(ByVal that As ##TYPE##(Of T)) As Int32 _
                             Implements IComparable(Of ##TYPE##(Of T)).CompareTo
        Return CompareTo(+that)
    End Function

    Public Function CompareTo(ByVal that As ##INNER_TYPE##) As Int32 _
                             Implements IComparable(Of ##INNER_TYPE##).CompareTo
        Return compare([get](), that)
    End Function

#If Not (PocketPC OrElse Smartphone) Then
    Public Shared Operator ^(ByVal p As ##TYPE##(Of T), ByVal ji As Decimal) As Object
        On Error GoTo finish
        Dim p2 As Object = Nothing
        p2 = p
        Dim jumps As Int64 = 0
        jumps = CLng(Math.Truncate(ji))
        While jumps > 0
            p2 = +(cast(Of ##TYPE##(Of T))(p2, False))
            jumps -= 1
        End While
finish:
        Return p2
    End Operator
#End If

    Public Function Clone() As Object Implements ICloneable.Clone
        Return CloneT()
    End Function

    Public Function CloneT() As ##TYPE##(Of T) Implements ICloneable(Of ##TYPE##(Of T)).Clone
        Return New ##TYPE##(Of T)(Me)
    End Function

    Public Shared Operator +(ByVal p As ##TYPE##(Of T)) As ##INNER_TYPE##
        Return If(p Is Nothing, Nothing, p.get())
    End Operator

    'special treatment for pointer, it compares reference equaling, instead of internal object
    Public Shared Operator <>(ByVal this As ##TYPE##(Of T), ByVal that As ##TYPE##(Of T)) As Boolean
        Return Not this = that
    End Operator

    Public Shared Operator =(ByVal this As ##TYPE##(Of T), ByVal that As ##TYPE##(Of T)) As Boolean
        If that Is Nothing OrElse that.get() Is Nothing Then
            Return this Is Nothing OrElse this.get() Is Nothing
        Else
            Return this = that.get()
        End If
    End Operator

    Public Shared Operator <>(ByVal this As ##TYPE##(Of T), ByVal that As T) As Boolean
        Return Not this = that
    End Operator

    Public Shared Operator =(ByVal this As ##TYPE##(Of T), ByVal that As T) As Boolean
        If this Is Nothing Then
            Return that Is Nothing
        Else
            Return object_compare(this.get(), that) = 0
        End If
    End Operator

    Public Shared Operator <>(ByVal this As T, ByVal that As ##TYPE##(Of T)) As Boolean
        Return Not this = that
    End Operator

    Public Shared Operator =(ByVal this As T, ByVal that As ##TYPE##(Of T)) As Boolean
        Return that = this
    End Operator

    Public Shared Operator =(ByVal this As ##TYPE##(Of T), ByVal obj As Object) As Boolean
        Dim that As ##TYPE##(Of T) = Nothing
        If cast(Of ##TYPE##(Of T))(obj, that) Then
            Return this = that
        Else
            Return this = cast(Of T)(obj, False)
        End If
    End Operator

    Public Shared Operator <>(ByVal this As ##TYPE##(Of T), ByVal obj As Object) As Boolean
        Return Not this = obj
    End Operator

    Public Shared Operator =(ByVal this As Object, ByVal that As ##TYPE##(Of T)) As Boolean
        Return that = this
    End Operator

    Public Shared Operator <>(ByVal this As Object, ByVal that As ##TYPE##(Of T)) As Boolean
        Return Not this = that
    End Operator

    Public Shared Operator <(ByVal this As ##TYPE##(Of T), ByVal that As ##INNER_TYPE##) As Boolean
        If this Is Nothing Then
            Return False
        Else
            this.set(that)
            Return True
        End If
    End Operator

    Public Shared Operator >(ByVal this As ##TYPE##(Of T), ByVal that As ##INNER_TYPE##) As Boolean
        Return assert(False)
    End Operator

    Public Shared Operator <(ByVal this As ##INNER_TYPE##, ByVal that As ##TYPE##(Of T)) As Boolean
        Return that > this
    End Operator

    Public Shared Operator >(ByVal this As ##INNER_TYPE##, ByVal that As ##TYPE##(Of T)) As Boolean
        Return that < this
    End Operator

    Public Shared Widening Operator CType(ByVal this As ##TYPE##(Of T)) As Boolean
        Return Not this Is Nothing AndAlso Not this.empty()
    End Operator

    Public Shared Narrowing Operator CType(ByVal i As ##INNER_TYPE##) As ##TYPE##(Of T)
        Return New ##TYPE##(Of T)(i)
    End Operator

    Public Shared Narrowing Operator CType(ByVal i As ##TYPE##(Of T)) As ##INNER_TYPE##
        Return +i
    End Operator

    Public Shared Operator Not(ByVal this As ##TYPE##(Of T)) As Boolean
        Return this Is Nothing OrElse this.empty()
    End Operator

    Public NotOverridable Overrides Function Equals(ByVal that As Object) As Boolean
        Return Me = that
    End Function

    'open for array_pointer
    Public NotOverridable Overrides Function GetHashCode() As Int32
        Dim i As ##INNER_TYPE## = Nothing
        i = [get]()
        Return If(i Is Nothing, 0, hash(i))
    End Function

    Public NotOverridable Overrides Function ToString() As String
        Return Convert.ToString([get]())
    End Function
End Class
