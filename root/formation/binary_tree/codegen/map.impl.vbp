
Imports System.Runtime.CompilerServices
Imports osi.root.connector
Imports osi.root.constants

Public NotInheritable Class ##FILENAME##(Of KEY_T, VALUE_T)
    Inherits ##BASE_TYPE##(Of first_const_pair(Of KEY_T, VALUE_T))
    Implements ICloneable, ICloneable(Of ##FILENAME##(Of KEY_T, VALUE_T)), IEquatable(Of ##FILENAME##(Of KEY_T, VALUE_T))

##INCLUDE map.container_operator.vbp
##INCLUDE map.compare.vbp

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New()
        MyBase.New(AddressOf first_const_pair.first_compare(Of KEY_T, VALUE_T))
    End Sub

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shared Shadows Function move(ByVal v As ##FILENAME##(Of KEY_T, VALUE_T)) As ##FILENAME##(Of KEY_T, VALUE_T)
        If v Is Nothing Then
            Return Nothing
        End If
        Dim r As ##FILENAME##(Of KEY_T, VALUE_T) = Nothing
        r = New ##FILENAME##(Of KEY_T, VALUE_T)()
        move_to(v, r)
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shadows Function clone() As ##FILENAME##(Of KEY_T, VALUE_T)
        Dim r As ##FILENAME##(Of KEY_T, VALUE_T) = Nothing
        r = New ##FILENAME##(Of KEY_T, VALUE_T)()
        clone_to(Me, r)
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function CloneT() As ##FILENAME##(Of KEY_T, VALUE_T) Implements ICloneable(Of ##FILENAME##(Of KEY_T, VALUE_T)).Clone
        Return clone()
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function ICloneable_Clone() As Object Implements ICloneable.Clone
        Return clone()
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Overloads Function emplace(ByVal key As KEY_T,
                                      ByVal value As VALUE_T) As tuple(Of iterator, Boolean)
        Return MyBase.emplace(first_const_pair.emplace_of(key, value))
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Overloads Function insert(ByVal key As KEY_T,
                                     ByVal value As VALUE_T) As tuple(Of iterator, Boolean)
        Return emplace(copy_no_error(key), copy_no_error(value))
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shadows Function [erase](ByVal it As iterator) As iterator
        Return MyBase.erase(it)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shadows Function [erase](ByVal key As KEY_T) As Boolean
        Dim it As iterator = find(key)
        If it = [end]() Then
            Return False
        End If
        [erase](it)
        Return True
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shadows Function find(ByVal key As KEY_T) As iterator
        Return MyBase.find(first_const_pair(Of KEY_T, VALUE_T).emplace_of(key))
    End Function

    Default Public Property at(ByVal key As KEY_T) As VALUE_T
        <MethodImpl(method_impl_options.aggressive_inlining)>
        Get
            Dim r As iterator = Nothing
            r = find(key)
            If r = [end]() Then
                r = emplace(copy_no_error(key), alloc(Of VALUE_T)()).first
            End If
            Return (+r).second
        End Get
        <MethodImpl(method_impl_options.aggressive_inlining)>
        Set(ByVal value As VALUE_T)
            Dim r As tuple(Of iterator, Boolean) = Nothing
            r = insert(key, value)
            If Not r.second Then
                copy(r.first.value().second, value)
            End If
        End Set
    End Property
End Class
