
    ' Returns a new ##FILENAME## containing all pairs in Me but not in that,
    ' including unequal values.
    Public Function exclude(ByVal that As ##FILENAME##(Of KEY_T, VALUE_T)) As ##FILENAME##(Of KEY_T, VALUE_T)
        If that Is Nothing OrElse that.empty() Then
            Return CloneT()
        End If
  
        Dim r As ##FILENAME##(Of KEY_T, VALUE_T) = Nothing
        r = New ##FILENAME##(Of KEY_T, VALUE_T)()
        Dim it As ##FILENAME##(Of KEY_T, VALUE_T).iterator = Nothing
        it = begin()
        While it <> [end]()
            Dim tit As ##FILENAME##(Of KEY_T, VALUE_T).iterator = Nothing
            tit = that.find((+it).first)
            If tit = that.end() OrElse Not equal((+it).second, (+tit).second) Then
                assert(r.insert((+it).first, (+it).second).second)
            End If
            it += 1
        End While
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Overloads Function Equals(ByVal that As ##FILENAME##(Of KEY_T, VALUE_T)) As Boolean _
            Implements IEquatable(Of ##FILENAME##(Of KEY_T, VALUE_T)).Equals
        If that Is Nothing OrElse that.empty() Then
            Return empty()
        End If
        Return exclude(that).empty() AndAlso that.exclude(Me).empty()
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Overrides Function Equals(ByVal that As Object) As Boolean
        Return Equals(cast(Of ##FILENAME##(Of KEY_T, VALUE_T))(that, False))
    End Function
