
    Private Function emplace_merge_copied_pair(ByVal v As first_const_pair(Of KEY_T, VALUE_T),
                                               ByVal merger as Func(Of VALUE_T, VALUE_T, VALUE_T)) As VALUE_T
        assert(v IsNot Nothing)
        assert(merger IsNot Nothing)
        Dim it As iterator = find(v.first)
        If it = [end]() Then
            assert(emplace(v).second)
            Return v.second
        End If
        Dim n As VALUE_T = merger((+it).second, v.second)
        assert([erase](v.first))
        assert(emplace(v.first, n).second)
        Return n
    End Function

    Public Function emplace_merge(ByVal k As KEY_T,
                                  ByVal v As VALUE_T,
                                  ByVal merger As Func(Of VALUE_T, VALUE_T, VALUE_T)) As VALUE_T
        Return emplace_merge_copied_pair(first_const_pair.emplace_of(k, v), merger)
    End Function

    Public Function emplace_merge(ByVal v As first_const_pair(Of KEY_T, VALUE_T),
                                  ByVal merger As Func(Of VALUE_T, VALUE_T, VALUE_T)) As VALUE_T
        Return emplace_merge_copied_pair(v, merger)
    End Function

    Public Function merge(ByVal k As KEY_T,
                          ByVal v As VALUE_T,
                          ByVal merger As Func(Of VALUE_T, VALUE_T, VALUE_T)) As VALUE_T
        Return emplace_merge_copied_pair(first_const_pair.of(k, v), merger)
    End Function

    Public Function merge(ByVal v As first_const_pair(Of KEY_T, VALUE_T),
                          ByVal merger As Func(Of VALUE_T, VALUE_T, VALUE_T)) As VALUE_T
        Return emplace_merge_copied_pair(copy_no_error(v), merger)
    End Function

    Public Shared Operator +(ByVal this As ##FILENAME##(Of KEY_T, VALUE_T),
                             ByVal v As first_const_pair(Of KEY_T, VALUE_T)) as ##FILENAME##(Of KEY_T, VALUE_T)

        assert(this IsNot Nothing)
        assert(this.insert(v).second)
        Return this
    End Operator
