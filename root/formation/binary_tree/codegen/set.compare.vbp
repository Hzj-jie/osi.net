
    ' Returns a new [##FILENAME##] containing all elements in Me but not in that.
    Public Function exclude(ByVal that As [##FILENAME##](Of T)) As [##FILENAME##](Of T)
        If that Is Nothing OrElse that.empty() Then
            Return CloneT()
        End If
  
        Dim r As [##FILENAME##](Of T) = Nothing
        r = New [##FILENAME##](Of T)()
        Dim it As [##FILENAME##](Of T).iterator = Nothing
        it = begin()
        While it <> [end]()
            If that.find(+it) = that.end() Then
                assert(r.insert(+it).second)
            End If
            it += 1
        End While
        Return r
    End Function

    Public Overloads Function Equals(ByVal that As [##FILENAME##](Of T)) As Boolean _
            Implements IEquatable(Of [##FILENAME##](Of T)).Equals
        If that Is Nothing OrElse that.empty() Then
            Return empty()
        End If
        Return exclude(that).empty() AndAlso that.exclude(Me).empty()
    End Function

    Public Overrides Function Equals(ByVal that As Object) As Boolean
        Return Equals(cast(Of [##FILENAME##](Of T))(that, False))
    End Function

