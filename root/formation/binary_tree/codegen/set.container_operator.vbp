

    Shared Sub New()
        container_operator(Of [##FILENAME##](Of T), T).size(
                Function(ByVal i As [##FILENAME##](Of T)) As UInt32
                    assert(Not i Is Nothing)
                    Return i.size()
                End Function)
        container_operator(Of [##FILENAME##](Of T), T).emplace(
                Function(ByVal i As [##FILENAME##](Of T), ByVal j As T) As Boolean
                    assert(Not i Is Nothing)
                    Return i.emplace(j).second
                End Function)
        container_operator(Of [##FILENAME##](Of T), T).enumerate(
                Function(ByVal i As [##FILENAME##](Of T)) _
                        As container_operator(Of [##FILENAME##](Of T), T).enumerator
                    Return New enumerator(i)
                End Function)
        container_operator(Of [##FILENAME##](Of T), T).clear(
                Sub(ByVal i As [##FILENAME##](Of T))
                    assert(Not i Is Nothing)
                    i.clear()
                End Sub)
        bytes_serializer(Of [##FILENAME##](Of T)).container(Of T).register()
    End Sub

    Private NotInheritable Class enumerator
        Implements container_operator(Of [##FILENAME##](Of T), T).enumerator

        Private it As iterator

        <MethodImpl(method_impl_options.aggressive_inlining)>
        Public Sub New(ByVal s As [##FILENAME##](Of T))
            assert(Not s Is Nothing)
            it = s.begin()
        End Sub

        <MethodImpl(method_impl_options.aggressive_inlining)>
        Public Sub [next]() Implements container_operator(Of [##FILENAME##](Of T), T).enumerator.next
            it += 1
        End Sub

        <MethodImpl(method_impl_options.aggressive_inlining)>
        Public Function current() As T Implements container_operator(Of [##FILENAME##](Of T), T).enumerator.current
            Return +it
        End Function

        <MethodImpl(method_impl_options.aggressive_inlining)>
        Public Function [end]() As Boolean Implements container_operator(Of [##FILENAME##](Of T), T).enumerator.end
            Return it.is_end()
        End Function
    End Class

