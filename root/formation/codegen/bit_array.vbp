##DEFAULT THREAD_SAFE False

#If ##THREAD_SAFE## Then
Imports System.Threading
#End If
Imports osi.root.constants
Imports osi.root.connector

#If ##THREAD_SAFE## Then
Public Class bit_array_thread_safe
#Else
Public Class bit_array
#End If
    Private Shared ReadOnly bit_count_in_uint32 As Byte = CByte(bit_count_in_byte * sizeof_uint32)
#If ##THREAD_SAFE## Then
    Private b() As Int32
#Else
    Private b() As UInt32
#End If

    Shared Sub New()
        assert(sizeof_uint32 = sizeof_int32)
    End Sub

    Public Sub New()
    End Sub

    Public Sub New(ByVal size As UInt32)
        resize(size)
    End Sub

    Public Sub resize(ByVal size As UInt32)
        If size Mod bit_count_in_uint32 = 0 Then
            ReDim b(CInt(size \ bit_count_in_uint32) - 1)
        Else
            ReDim b(CInt(size \ bit_count_in_uint32))
        End If
    End Sub

    Public Function size() As UInt32
        Return array_size(b) * bit_count_in_uint32
    End Function

    Public Sub clear()
        memclr(b)
    End Sub

    Private Sub devide(ByVal i As UInt32, ByRef p As Byte, ByRef index As Int32)
        p = CByte(i Mod bit_count_in_uint32)
        index = CInt(i \ bit_count_in_uint32)
        assert(index < size())
    End Sub

    Default Public Property data(ByVal i As UInt32) As Boolean
        Get
            Dim index As Int32 = 0
            Dim p As Byte = uint8_0
            devide(i, p, index)
            Return getbit(b(index), p)
        End Get
        Set(ByVal value As Boolean)
            Dim index As Int32 = 0
            Dim p As Byte = uint8_0
            devide(i, p, index)
#If ##THREAD_SAFE## Then
            While True
                Dim d As Int32 = 0
                d = b(index)
                Dim n As Int32 = 0
                n = d
                setbit(n, p, value)
                If Interlocked.CompareExchange(b(index), n, d) = d Then
                    Exit While
                End If
            End While
#Else
            setbit(b(index), p, value)
#End If
        End Set
    End Property
End Class
