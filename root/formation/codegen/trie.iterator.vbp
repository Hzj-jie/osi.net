
##INCLUDE iterator.imports.vbp
Imports osi.root.template

Public Module _trie_iterator
##DEFINE PARENT_CLASS trie(Of KEY_T, VALUE_T, _CHILD_COUNT, _KEY_TO_INDEX)
##DEFINE TEMPLATE_TYPE (Of KEY_T, VALUE_T, _CHILD_COUNT As _int64, _KEY_TO_INDEX As _to_uint32(Of KEY_T))
##INCLUDE iterator.ext.vbp
End Module

Partial Public Class trie(Of KEY_T, VALUE_T, _CHILD_COUNT As _int64, _KEY_TO_INDEX As _to_uint32(Of KEY_T))
    Public Structure iterator
##DEFINE TYPE node
##DEFINE TYPE_IS_STRUCT True
##INCLUDE random_access_iterator.single_step.vbp

        Private Function move_next() As iterator
            Dim p As node = Nothing
            p = Me.p
            Dim this_index As UInt32 = uint32_0
            While Not p Is Nothing
                For i As Int32 = CInt(this_index) To p.child.Length() - 1
                    If Not p.child(i) Is Nothing Then
                        p = p.child(i)
                        Exit While
                    End If
                Next

                If find_father_index(p, this_index) Then
                    this_index += uint32_1
                    p = p.father
                Else
                    Return _end
                End If
            End While

            Return New iterator(p)
        End Function

        Private Function move_prev() As iterator
            Dim p As node = Nothing
            p = Me.p
            Dim this_index As UInt32 = uint32_0
            If find_father_index(p, this_index) Then
                If this_index > 0 Then
                    Dim i As Int32
                    Dim this_node As node = Nothing
                    this_node = p
                    For i = CInt(this_index - uint32_1) To 0 Step -1
                        p = this_node.father.child(i)
                        If max(p) Then
                            Exit For
                        End If
                    Next
                    If i < 0 Then
                        p = this_node.father
                    End If
                Else
                    p = p.father
                End If
            Else
                Return _end
            End If

            Return New iterator(p)
        End Function

        Friend Function [get]() As node
            Return p
        End Function
    End Structure
End Class
