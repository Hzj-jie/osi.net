
##INCLUDE iterator.imports.vbp

Public Module _list_iterator
##DEFINE PARENT_CLASS list(Of T)
##DEFINE TEMPLATE_TYPE (Of T)
##INCLUDE iterator.ext.vbp
End Module

Partial Public Class list(Of T)
    Public Class iterator
##DEFINE TYPE node
##DEFINE DEFINE_OPERATOR_PLUS False
##INCLUDE random_access_iterator.vbp

        Private Function move_prev(ByVal s As UInt32) As iterator
            assert(s > uint32_0)
            Dim n As node = Nothing
            n = p
            While s > 0
                n = n.last()
                If n Is Nothing Then
                    Return [end]
                End If
                s -= uint32_1
            End While
            Return New iterator(n)
        End Function

        Private Function move_next(ByVal s As UInt32) As iterator
            assert(s > uint32_0)
            Dim n As node = Nothing
            n = p
            While s > 0
                n = n.next()
                If n Is Nothing Then
                    Return [end]
                End If
                s -= uint32_1
            End While
            Return New iterator(n)
        End Function

        Public Shared Operator +(ByVal this As iterator) As T
            Return If(this = [end], Nothing, +(this.p))
        End Operator

        Friend Function node() As node
            Return p
        End Function
    End Class
End Class
