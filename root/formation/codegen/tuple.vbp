
##DEFAULT TEMPLATE_LIST T1, T2, T3, T4, T5, T6, T7, T8
##DEFAULT SIZE 8
##DEFAULT TYPE_NAME tuple

Imports System.Runtime.CompilerServices
Imports System.Text
Imports osi.root.connector
Imports osi.root.constants

' To reduce complexity, tuple is always const, use ref if the fields are required to be muttable.
Partial Public Structure ##TYPE_NAME##(Of ##TEMPLATE_LIST##)
    Implements ICloneable,
               ICloneable(Of ##TYPE_NAME##(Of ##TEMPLATE_LIST##)),
               IComparable,
               IComparable(Of ##TYPE_NAME##(Of ##TEMPLATE_LIST##)),
               IEquatable(Of ##TYPE_NAME##(Of ##TEMPLATE_LIST##))

    Private ReadOnly __1 As T1

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _1() As T1
        Return __1
    End Function

    Private ReadOnly __2 As T2

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _2() As T2
        Return __2
    End Function

#If ##SIZE## > 2 Then
    Private ReadOnly __3 As T3

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _3() As T3
        Return __3
    End Function
#End If

#If ##SIZE## > 3 Then
    Private ReadOnly __4 As T4

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _4() As T4
        Return __4
    End Function
#End If

#If ##SIZE## > 4 Then
    Private ReadOnly __5 As T5

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _5() As T5
        Return __5
    End Function
#End If

#If ##SIZE## > 5 Then
    Private ReadOnly __6 As T6

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _6() As T6
        Return __6
    End Function
#End If

#If ##SIZE## > 6 Then
    Private ReadOnly __7 As T7

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _7() As T7
        Return __7
    End Function
#End If

#If ##SIZE## > 7 Then
    Private ReadOnly __8 As T8

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function _8() As T8
        Return __8
    End Function
#End If

#If ##SIZE## = 2 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2)
#ElseIf ##SIZE## = 3 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3)
#ElseIf ##SIZE## = 4 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3,
                   ByVal _4 As T4)
#ElseIf ##SIZE## = 5 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3,
                   ByVal _4 As T4,
                   ByVal _5 As T5)
#ElseIf ##SIZE## = 6 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3,
                   ByVal _4 As T4,
                   ByVal _5 As T5,
                   ByVal _6 As T6)
#ElseIf ##SIZE## = 7 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3,
                   ByVal _4 As T4,
                   ByVal _5 As T5,
                   ByVal _6 As T6,
                   ByVal _7 As T7)
#ElseIf ##SIZE## = 8 Then
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Sub New(ByVal _1 As T1,
                   ByVal _2 As T2,
                   ByVal _3 As T3,
                   ByVal _4 As T4,
                   ByVal _5 As T5,
                   ByVal _6 As T6,
                   ByVal _7 As T7,
                   ByVal _8 As T8)
#Else
    Unexpected SIZE (##SIZE##)
#End If
        Me.__1 = _1
        Me.__2 = _2
#If ##SIZE## > 2 Then
        Me.__3 = _3
#End If
#If ##SIZE## > 3 Then
        Me.__4 = _4
#End If
#If ##SIZE## > 4 Then
        Me.__5 = _5
#End If
#If ##SIZE## > 5 Then
        Me.__6 = _6
#End If
#If ##SIZE## > 6 Then
        Me.__7 = _7
#End If
#If ##SIZE## > 7 Then
        Me.__8 = _8
#End If
    End Sub

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function Clone() As Object Implements ICloneable.Clone
        Return CloneT()
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function CloneT() As ##TYPE_NAME##(Of ##TEMPLATE_LIST##) _
                                Implements ICloneable(Of ##TYPE_NAME##(Of ##TEMPLATE_LIST##)).Clone
#If ##SIZE## = 2 Then
        Return tuple.of(__1, __2)
#ElseIf ##SIZE## = 3 Then
        Return tuple.of(__1, __2, __3)
#ElseIf ##SIZE## = 4 Then
        Return tuple.of(__1, __2, __3, __4)
#ElseIf ##SIZE## = 5 Then
        Return tuple.of(__1, __2, __3, __4, __5)
#ElseIf ##SIZE## = 6 Then
        Return tuple.of(__1, __2, __3, __4, __5, __6)
#ElseIf ##SIZE## = 7 Then
        Return tuple.of(__1, __2, __3, __4, __5, __6, __7)
#ElseIf ##SIZE## = 8 Then
        Return tuple.of(__1, __2, __3, __4, __5, __6, __7, __8)
#Else
        Unexpected SIZE (##SIZE##)
#End If
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function CompareTo(ByVal other As ##TYPE_NAME##(Of ##TEMPLATE_LIST##)) As Int32 _
                             Implements IComparable(Of ##TYPE_NAME##(Of ##TEMPLATE_LIST##)).CompareTo
        Dim r As Int32 = 0
##DEFINE VALUE __1
##INCLUDE tuple_compare.vbp
##DEFINE VALUE __2
##INCLUDE tuple_compare.vbp
#If ##SIZE## > 2 Then
##DEFINE VALUE __3
##INCLUDE tuple_compare.vbp
#End If
#If ##SIZE## > 3 Then
##DEFINE VALUE __4
##INCLUDE tuple_compare.vbp
#End If
#If ##SIZE## > 4 Then
##DEFINE VALUE __5
##INCLUDE tuple_compare.vbp
#End If
#If ##SIZE## > 5 Then
##DEFINE VALUE __6
##INCLUDE tuple_compare.vbp
#End If
#If ##SIZE## > 6 Then
##DEFINE VALUE __7
##INCLUDE tuple_compare.vbp
#End If
#If ##SIZE## > 7 Then
##DEFINE VALUE __8
##INCLUDE tuple_compare.vbp
#End If
        Return 0
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
        Return CompareTo(cast(Of ##TYPE_NAME##(Of ##TEMPLATE_LIST##))(obj, False))
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shared Operator =(ByVal this As ##TYPE_NAME##(Of ##TEMPLATE_LIST##),
                             ByVal that As ##TYPE_NAME##(Of ##TEMPLATE_LIST##)) As Boolean
        Return this.CompareTo(that) = 0
    End Operator

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shared Operator =(ByVal this As ##TYPE_NAME##(Of ##TEMPLATE_LIST##),
                             ByVal that As Object) As Boolean
        Return this.CompareTo(that) = 0
    End Operator

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shared Operator <>(ByVal this As ##TYPE_NAME##(Of ##TEMPLATE_LIST##),
                              ByVal that As ##TYPE_NAME##(Of ##TEMPLATE_LIST##)) As Boolean
        Return this.CompareTo(that) <> 0
    End Operator

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shared Operator <>(ByVal this As ##TYPE_NAME##(Of ##TEMPLATE_LIST##),
                              ByVal that As Object) As Boolean
        Return this.CompareTo(that) <> 0
    End Operator

    Public Overrides Function ToString() As String
        Dim r As New StringBuilder("{")
        r.Append(If(__1 Is Nothing, "", __1.ToString()))
        r.Append(", ")
        r.Append(If(__2 Is Nothing, "", __2.ToString()))
#If ##SIZE## > 2 Then
        r.Append(", ")
        r.Append(If(__3 Is Nothing, "", __3.ToString()))
#End If
#If ##SIZE## > 3 Then
        r.Append(", ")
        r.Append(If(__4 Is Nothing, "", __4.ToString()))
#End If
#If ##SIZE## > 4 Then
        r.Append(", ")
        r.Append(If(__5 Is Nothing, "", __5.ToString()))
#End If
#If ##SIZE## > 5 Then
        r.Append(", ")
        r.Append(If(__6 Is Nothing, "", __6.ToString()))
#End If
#If ##SIZE## > 6 Then
        r.Append(", ")
        r.Append(If(__7 Is Nothing, "", __7.ToString()))
#End If
#If ##SIZE## > 7 Then
        r.Append(", ")
        r.Append(If(__8 Is Nothing, "", __8.ToString()))
#End If
        r.Append("}"c)
        Return Convert.ToString(r)
    End Function

    Public Overrides Function GetHashCode() As Int32
        Dim r As Int32 = 0
        r = r Xor If(__1 Is Nothing, 0, __1.GetHashCode())
        r = r Xor If(__2 Is Nothing, 0, __2.GetHashCode())
#If ##SIZE## > 2 Then
        r = r Xor If(__3 Is Nothing, 0, __3.GetHashCode())
#End If
#If ##SIZE## > 3 Then
        r = r Xor If(__4 Is Nothing, 0, __4.GetHashCode())
#End If
#If ##SIZE## > 4 Then
        r = r Xor If(__5 Is Nothing, 0, __5.GetHashCode())
#End If
#If ##SIZE## > 5 Then
        r = r Xor If(__6 Is Nothing, 0, __6.GetHashCode())
#End If
#If ##SIZE## > 6 Then
        r = r Xor If(__7 Is Nothing, 0, __7.GetHashCode())
#End If
#If ##SIZE## > 7 Then
        r = r Xor If(__8 Is Nothing, 0, __8.GetHashCode())
#End If
        Return r
    End Function

    Public Overrides Function Equals(ByVal obj As Object) As Boolean
        Return CompareTo(obj) = 0
    End Function

    Public Function EqualsT(ByVal that As ##TYPE_NAME##(Of ##TEMPLATE_LIST##)) As Boolean _
                           Implements IEquatable(Of ##TYPE_NAME##(Of ##TEMPLATE_LIST##)).Equals
        Return CompareTo(that) = 0
    End Function
End Structure
