
##DEFAULT HASHTABLE hasharray
##DEFAULT PAIR first_const_pair
#Const PAIR_IS_CLASS = ("##PAIR##" = "first_const_pair")
Imports System.Runtime.CompilerServices
Imports osi.root.connector
Imports osi.root.constants
Imports osi.root.template

Partial Public Class ##FILENAME##( _
                         Of KEY_T,
                            VALUE_T,
                            _HASHER As _to_uint32(Of KEY_T),
                            _EQUALER As _equaler(Of KEY_T))
    Inherits ##HASHTABLE##( _
                 Of ##PAIR##(Of KEY_T, VALUE_T),
                    _true,
                    ##PAIR##_hasher,
                    ##PAIR##_equaler)
    Implements ICloneable, ICloneable(Of ##FILENAME##(Of KEY_T, VALUE_T, _HASHER, _EQUALER))

##DEFINE VALUE_TYPE ##PAIR##(Of KEY_T, VALUE_T)
##INCLUDE ##HASHTABLE##.copy_constructor.vbp

    Public Sub New()
        MyBase.New()
    End Sub

    Protected Shadows Function clone(Of R As ##FILENAME##(Of KEY_T, VALUE_T, _HASHER, _EQUALER))() As R
        Return MyBase.clone(Of R)()
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shadows Function Clone() As Object Implements ICloneable.Clone
        Return CloneT()
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shadows Function CloneT() As ##FILENAME##(Of KEY_T, VALUE_T, _HASHER, _EQUALER) _
            Implements ICloneable(Of ##FILENAME##(Of KEY_T, VALUE_T, _HASHER, _EQUALER)).Clone
        Return clone(Of ##FILENAME##(Of KEY_T, VALUE_T, _HASHER, _EQUALER))()
    End Function

    Public Shared Shadows Function move(ByVal v As ##FILENAME##(Of KEY_T, VALUE_T, _HASHER, _EQUALER)) _
                                       As ##FILENAME##(Of KEY_T, VALUE_T, _HASHER, _EQUALER)
        Return ##HASHTABLE##(Of ##PAIR##(Of KEY_T, VALUE_T),
                            _true,
                            ##PAIR##_hasher,
                            ##PAIR##_equaler) _
                   .move(Of ##FILENAME##(Of KEY_T, VALUE_T, _HASHER, _EQUALER))(v)
    End Function

    Public Shared Shadows Function swap(ByVal this As ##FILENAME##(Of KEY_T, VALUE_T, _HASHER, _EQUALER),
                                        ByVal that As ##FILENAME##(Of KEY_T, VALUE_T, _HASHER, _EQUALER)) As Boolean
        Return ##HASHTABLE##(Of ##PAIR##(Of KEY_T, VALUE_T),
                            _true,
                            ##PAIR##_hasher,
                            ##PAIR##_equaler) _
                   .swap(this, that)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Overloads Function emplace(ByVal key As KEY_T, ByVal value As VALUE_T) As fast_pair(Of iterator, Boolean)
        Return MyBase.emplace(##PAIR##.emplace_of(key, value))
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Overloads Function insert(ByVal key As KEY_T, ByVal value As VALUE_T) As fast_pair(Of iterator, Boolean)
        Return emplace(copy_no_error(key), copy_no_error(value))
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shadows Function [erase](ByVal it As iterator) As Boolean
        Return MyBase.erase(it)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shadows Function [erase](ByVal key As KEY_T) As Boolean
        Return MyBase.erase(find(key))
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shadows Function find(ByVal key As KEY_T) As iterator
        Return MyBase.find(##PAIR##(Of KEY_T, VALUE_T).emplace_of(key))
    End Function

    Default Public Property at(ByVal key As KEY_T) As VALUE_T
        <MethodImpl(method_impl_options.aggressive_inlining)>
        Get
            Dim r As iterator = Nothing
            r = find(key)
            If r = [end]() Then
                r = emplace(copy_no_error(key), alloc(Of VALUE_T)()).first
            End If
            Return (+r).second
        End Get
        <MethodImpl(method_impl_options.aggressive_inlining)>
        Set(ByVal value As VALUE_T)
            Dim r As fast_pair(Of iterator, Boolean) = Nothing
            r = insert(key, value)
            If Not r.second Then
                copy(r.first.value().second, value)
            End If
        End Set
    End Property

    Public NotInheritable Class ##PAIR##_hasher
        Inherits _to_uint32(Of ##PAIR##(Of KEY_T, VALUE_T))

        Private Shared ReadOnly hasher As _HASHER

        Shared Sub New()
            hasher = alloc(Of _HASHER)()
        End Sub

        Public Overrides Function at(ByRef k As ##PAIR##(Of KEY_T, VALUE_T)) As UInt32
#If PAIR_IS_CLASS Then
            assert(Not k Is Nothing)
#End If
            Return hasher(k.first)
        End Function

        Public Overrides Function reverse(ByVal i As UInt32) As ##PAIR##(Of KEY_T, VALUE_T)
            assert(False)
            Return Nothing
        End Function
    End Class

    Public NotInheritable Class ##PAIR##_equaler
        Inherits _equaler(Of ##PAIR##(Of KEY_T, VALUE_T))

        Private Shared ReadOnly equaler As _EQUALER

        Shared Sub New()
            equaler = alloc(Of _EQUALER)()
        End Sub

        Public Overrides Function at(ByRef i As ##PAIR##(Of KEY_T, VALUE_T),
                                     ByRef j As ##PAIR##(Of KEY_T, VALUE_T)) As Boolean
#If PAIR_IS_CLASS Then
            Dim c As Int32 = 0
            c = object_compare(i, j)
            If c <> object_compare_undetermined Then
                Return c = 0
            End If
            assert(Not i Is Nothing)
            assert(Not j Is Nothing)
#End If
            Return equaler.at(i.first, j.first)
        End Function
    End Class
End Class

Public Class ##FILENAME##(Of KEY_T, VALUE_T)
    Inherits ##FILENAME##(Of KEY_T, VALUE_T, fast_to_uint32(Of KEY_T), default_non_null_equaler(Of KEY_T))
    Implements ICloneable, ICloneable(Of ##FILENAME##(Of KEY_T, VALUE_T)), IEquatable(Of ##FILENAME##(Of KEY_T, VALUE_T))

##INCLUDE ##HASHTABLE##.copy_constructor.vbp

##INCLUDE ..\binary_tree\codegen\map.container_operator.vbp
##INCLUDE ..\binary_tree\codegen\map.compare.vbp

    Public Sub New()
        MyBase.New()
    End Sub

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Protected Shadows Function clone(Of R As ##FILENAME##(Of KEY_T, VALUE_T))() As R
        Return MyBase.clone(Of R)()
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shadows Function Clone() As Object Implements ICloneable.Clone
        Return CloneT()
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Shadows Function CloneT() As ##FILENAME##(Of KEY_T, VALUE_T) _
            Implements ICloneable(Of ##FILENAME##(Of KEY_T, VALUE_T)).Clone
        Return MyBase.clone(Of ##FILENAME##(Of KEY_T, VALUE_T))()
    End Function

    Public Shared Shadows Function move(ByVal v As ##FILENAME##(Of KEY_T, VALUE_T)) _
                                       As ##FILENAME##(Of KEY_T, VALUE_T)
        Return ##HASHTABLE##(Of ##PAIR##(Of KEY_T, VALUE_T),
                                _true,
                                ##PAIR##_hasher,
                                ##PAIR##_equaler) _
                   .move(Of ##FILENAME##(Of KEY_T, VALUE_T))(v)
    End Function

    Public Shared Shadows Function swap(ByVal this As ##FILENAME##(Of KEY_T, VALUE_T),
                                        ByVal that As ##FILENAME##(Of KEY_T, VALUE_T)) As Boolean
        Return ##HASHTABLE##(Of ##PAIR##(Of KEY_T, VALUE_T),
                                _true,
                                ##PAIR##_hasher,
                                ##PAIR##_equaler) _
                   .swap(this, that)
    End Function
End Class
