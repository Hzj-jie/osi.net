
Option Explicit On
Option Infer Off
Option Strict On

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with hashmap.vbp ----------
'so change hashmap.vbp instead of this file


Imports System.Runtime.CompilerServices
Imports osi.root.connector
Imports osi.root.constants

Public NotInheritable Class hashmap(Of KEY_T As IComparable(Of KEY_T), VALUE_T)
    Inherits hashmap(Of KEY_T, VALUE_T, default_to_uint32(Of KEY_T))
    Implements ICloneable(Of hashmap(Of KEY_T, VALUE_T)), ICloneable, IEquatable(Of hashmap(Of KEY_T, VALUE_T))


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with ..\binary_tree\codegen\map.compare.vbp ----------
'so change ..\binary_tree\codegen\map.compare.vbp instead of this file


    ' Returns a new hashmap containing all pairs in Me but not in that,
    ' including unequal values.
    Public Function exclude(ByVal that As hashmap(Of KEY_T, VALUE_T)) As hashmap(Of KEY_T, VALUE_T)
        If that Is Nothing OrElse that.empty() Then
            Return CloneT()
        End If
  
        Dim r As hashmap(Of KEY_T, VALUE_T) = Nothing
        r = New hashmap(Of KEY_T, VALUE_T)()
        Dim it As hashmap(Of KEY_T, VALUE_T).iterator = Nothing
        it = begin()
        While it <> [end]()
            Dim tit As hashmap(Of KEY_T, VALUE_T).iterator = Nothing
            tit = that.find((+it).first)
            If tit = that.end() OrElse Not equal((+it).second, (+tit).second) Then
                assert(r.insert((+it).first, (+it).second).second)
            End If
            it += 1
        End While
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Overloads Function Equals(ByVal that As hashmap(Of KEY_T, VALUE_T)) As Boolean _
            Implements IEquatable(Of hashmap(Of KEY_T, VALUE_T)).Equals
        If that Is Nothing OrElse that.empty() Then
            Return empty()
        End If
        Return exclude(that).empty() AndAlso that.exclude(Me).empty()
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Overrides Function Equals(ByVal that As Object) As Boolean
        Return Equals(cast(Of hashmap(Of KEY_T, VALUE_T))(that, False))
    End Function
'finish ..\binary_tree\codegen\map.compare.vbp --------

    Public Sub New(ByVal hash_size As UInt32)
        MyBase.New(hash_size)
    End Sub

    Public Sub New()
        MyBase.New()
    End Sub

    <copy_constructor>
    Protected Sub New(ByVal hash_size As UInt32, ByVal data() As map(Of KEY_T, VALUE_T))
        MyBase.New(hash_size, data)
    End Sub

    Public Shadows Function CloneT() As hashmap(Of KEY_T, VALUE_T) _
                                     Implements ICloneable(Of hashmap(Of KEY_T, VALUE_T)).Clone
        Return MyBase.clone(Of hashmap(Of KEY_T, VALUE_T))()
    End Function

    Public Shadows Function Clone() As Object Implements ICloneable.Clone
        Return CloneT()
    End Function
End Class

'finish hashmap.vbp --------
