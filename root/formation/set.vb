
Option Explicit On
Option Infer Off
Option Strict On

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with set.vbp ----------
'so change set.vbp instead of this file



'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bset.vbp ----------
'so change bset.vbp instead of this file



Imports osi.root.connector

Public Class [set](Of T)
    Inherits bbst(Of T)
    Implements ICloneable, ICloneable(Of [set](Of T))

    Shared Sub New()
        container_operator(Of [set](Of T), T).size(Function(ByVal i As [set](Of T)) As UInt32
                                                          assert(Not i Is Nothing)
                                                          Return i.size()
                                                      End Function)
        container_operator(Of [set](Of T), T).emplace(Function(ByVal i As [set](Of T), ByVal j As T) As Boolean
                                                             assert(Not i Is Nothing)
                                                             Return i.emplace(j).second
                                                         End Function)
        container_operator(Of [set](Of T), T).enumerate(Function(ByVal i As [set](Of T)) _
                                                                   As container_operator(Of [set](Of T), T).enumerator
                                                               Return New enumerator(i)
                                                           End Function)
        container_operator(Of [set](Of T), T).clear(Sub(ByVal i As [set](Of T))
                                                           assert(Not i Is Nothing)
                                                           i.clear()
                                                       End Sub)
        bytes_serializer(Of [set](Of T)).container(Of T).register()
    End Sub

    Private NotInheritable Class enumerator
        Implements container_operator(Of [set](Of T), T).enumerator

        Private it As iterator

        Public Sub New(ByVal s As [set](Of T))
            assert(Not s Is Nothing)
            it = s.begin()
        End Sub

        Public Sub [next]() Implements container_operator(Of [set](Of T), T).enumerator.next
            it += 1
        End Sub

        Public Function current() As T Implements container_operator(Of [set](Of T), T).enumerator.current
            Return +it
        End Function

        Public Function [end]() As Boolean Implements container_operator(Of [set](Of T), T).enumerator.end
            Return it.is_end()
        End Function
    End Class

    Public Shared Shadows Function move(ByVal v As [set](Of T)) As [set](Of T)
        If v Is Nothing Then
            Return Nothing
        Else
            Dim r As [set](Of T) = Nothing
            r = New [set](Of T)()
            move_to(v, r)
            Return r
        End If
    End Function

    Public Shadows Function clone() As [set](Of T)
        Dim r As [set](Of T) = Nothing
        r = New [set](Of T)()
        clone_to(Me, r)
        Return r
    End Function

    Public Function CloneT() As [set](Of T) Implements ICloneable(Of [set](Of T)).Clone
        Return clone()
    End Function

    Public Function ICloneable_Clone() As Object Implements ICloneable.Clone
        Return clone()
    End Function
End Class

'finish bset.vbp --------
'finish set.vbp --------
