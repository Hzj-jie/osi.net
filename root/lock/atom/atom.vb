
Option Explicit On
Option Infer Off
Option Strict On

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with atom.vbp ----------
'so change atom.vbp instead of this file



'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with atom_body.vbp ----------
'so change atom_body.vbp instead of this file


#Const GENERIC_TYPE = ("T" = "T")

Imports System.Threading
Imports osi.root.connector
#If GENERIC_TYPE Then
Imports osi.root.constants
#End If
Imports osi.root.delegates
Imports osi.root.lock.slimlock
Imports spinlock = osi.root.lock.slimlock.spinlock

Partial Public Class atom(Of T, LOCK_T As {islimlock, Structure})
    Private p As T
    Private l As LOCK_T

#If GENERIC_TYPE Then
    Shared Sub New()
        raise_error(error_type.performance,
                    "atom(Of T, LOCK_T) cannot use interlocked operations. Its performance is low.")
    End Sub
#End If

    Public Sub New()
    End Sub

    Public Sub New(ByVal i As T)
        [set](i)
    End Sub

    Public Function [get]() As T
#If GENERIC_TYPE Then
        Return l.locked(Function() p)
#Else
        Return atomic.read(p)
#End If
    End Function

    Public Sub [set](ByVal i As T)
#If GENERIC_TYPE Then
        l.locked(Sub() p = i)
#Else
        atomic.eva(p, i)
#End If
    End Sub

    Public Sub modify(ByVal d As void(Of T))
        assert(Not d Is Nothing)
        If Not d Is Nothing Then
            l.locked(Sub() d(p))
        End If
    End Sub

    Public Function exchange(ByVal value As T) As T
#If GENERIC_TYPE Then
        Return l.locked(Function() As T
                            Dim r As T = Nothing
                            r = p
                            p = value
                            Return r
                        End Function)
#Else
        Dim r As T = Nothing
        r = Interlocked.Exchange(p, value)
        Thread.MemoryBarrier()
        Return r
#End If
    End Function

    Public Function compare_exchange(ByVal value As T, ByVal comparand As T) As T
#If GENERIC_TYPE Then
        Return l.locked(Function() As T
                            Dim r As T = Nothing
                            r = p
                            If equal(p, comparand) Then
                                p = value
                            End If
                            Return r
                        End Function)
#Else
        Dim r As T = Nothing
        r = Interlocked.CompareExchange(p, value, comparand)
        Thread.MemoryBarrier()
        Return r
#End If
    End Function

    Public Shared Operator +(ByVal this As atom(Of T, LOCK_T)) As T
        Return If(this Is Nothing, Nothing, this.get())
    End Operator
End Class


Public Class atom(Of T)
    Inherits atom(Of T, spinlock)

    Public Sub New()
        MyBase.New()
    End Sub

    Public Sub New(ByVal i As T)
        MyBase.New(i)
    End Sub
End Class

'finish atom_body.vbp --------
'finish atom.vbp --------
