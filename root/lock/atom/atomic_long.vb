
'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with atomic_long.vbp ----------
'so change atomic_long.vbp instead of this file



'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with atomic_int.vbp ----------
'so change atomic_int.vbp instead of this file



'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with atom_body.vbp ----------
'so change atom_body.vbp instead of this file


Imports System.Threading
Imports osi.root.lock.slimlock
Imports osi.root.delegates
Imports spinlock = osi.root.lock.slimlock.spinlock

Partial Public Class atomic_long(Of LOCK_T As {islimlock, Structure})
    Private p As Int64
    Private l As LOCK_T

    Public Sub New()
    End Sub

    Public Sub New(ByVal i As Int64)
        [set](i)
    End Sub

    Public Function [get]() As Int64
        Return atomic.read(p)
    End Function

    Public Sub [set](ByVal i As Int64)
        atomic.eva(p, i)
    End Sub

    Public Sub modify(ByVal d As void(Of Int64))
        If Not d Is Nothing Then
            l.locked(Sub() d(p))
        End If
    End Sub

	Public Function exchange(ByVal value As Int64) As Int64
        Dim r As Int64 = Nothing
        r = Interlocked.Exchange(p, value)
        Thread.MemoryBarrier()
        Return r
	End Function

    Public Function compare_exchange(ByVal value As Int64, ByVal comparand As Int64) As Int64
        Dim r As Int64 = Nothing
        r = Interlocked.CompareExchange(p, value, comparand)
        Thread.MemoryBarrier()
        Return r
    End Function

    Public Shared Operator +(ByVal this As atomic_long(Of LOCK_T)) As Int64
        Return If(this Is Nothing, Nothing, this.get())
    End Operator
End Class


Public Class atomic_long
    Inherits atomic_long(Of spinlock)

    Public Sub New()
        MyBase.New()
    End Sub

    Public Sub New(ByVal i As Int64)
        MyBase.New(i)
    End Sub
End Class

'finish atom_body.vbp --------

Partial Public Class atomic_long(Of LOCK_T As {islimlock, Structure})
    Public Function increment() As Int64
        Dim r As Int64 = 0
        r = Interlocked.Increment(p)
        Thread.MemoryBarrier()
        Return r
    End Function

    Public Function decrement() As Int64
        Dim r As Int64 = 0
        r = Interlocked.Decrement(p)
        Thread.MemoryBarrier()
        Return r
    End Function

    Public Function add(ByVal i As Int64) As Int64
        Dim r As Int64 = 0
        r = Interlocked.Add(p, i)
        Thread.MemoryBarrier()
        Return r
    End Function
End Class
'finish atomic_int.vbp --------
'finish atomic_long.vbp --------
