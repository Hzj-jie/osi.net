
Imports System.Threading
Imports osi.root.lock.slimlock
Imports osi.root.delegates
Imports spinlock = osi.root.lock.slimlock.spinlock

##DEFINE DEFAULT_LOCK LOCK_T As {islimlock, Structure}
Partial Public Class ##BASE_TYPE##
    Private p As ##TYPE##
##DEFINE DEFAULT_LOCK LOCK_T
    Private l As ##DEFAULT_LOCK##

    Public Sub New()
    End Sub

    Public Sub New(ByVal i As ##TYPE##)
        [set](i)
    End Sub

    Public Function [get]() As ##TYPE##
        Return atomic.read(p)
    End Function

    Public Sub [set](ByVal i As ##TYPE##)
        atomic.eva(p, i)
    End Sub

    Public Sub modify(ByVal d As void(Of ##TYPE##))
        If Not d Is Nothing Then
            l.locked(Sub() d(p))
        End If
    End Sub

	Public Function exchange(ByVal value As ##TYPE##) As ##TYPE##
        Dim r As ##TYPE## = Nothing
        r = Interlocked.Exchange(p, value)
        Thread.MemoryBarrier()
        Return r
	End Function

    Public Function compare_exchange(ByVal value As ##TYPE##, ByVal comparand As ##TYPE##) As ##TYPE##
        Dim r As ##TYPE## = Nothing
        r = Interlocked.CompareExchange(p, value, comparand)
        Thread.MemoryBarrier()
        Return r
    End Function

    Public Shared Operator +(ByVal this As ##BASE_TYPE##) As ##TYPE##
        Return If(this Is Nothing, Nothing, this.get())
    End Operator
End Class

##DEFINE DEFAULT_LOCK spinlock

Public Class ##NO_LOCK_CLASS_TYPE##
    Inherits ##BASE_TYPE##

    Public Sub New()
        MyBase.New()
    End Sub

    Public Sub New(ByVal i As ##TYPE##)
        MyBase.New(i)
    End Sub
End Class

##DEFINE DEFAULT_LOCK LOCK_T As {islimlock, Structure}
