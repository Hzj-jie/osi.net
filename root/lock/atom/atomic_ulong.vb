
Option Explicit On
Option Infer Off
Option Strict On

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with atomic_ulong.vbp ----------
'so change atomic_ulong.vbp instead of this file




'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with atomic_uint.vbp ----------
'so change atomic_uint.vbp instead of this file



Imports System.Threading
Imports osi.root.constants
Imports osi.root.connector

Public Class atomic_ulong
    Private i As Int64

    Public Sub New()
    End Sub

    Public Sub New(ByVal i As Int64)
        Me.i = i
    End Sub

    Public Sub New(ByVal i As UInt64)
        Me.i = uint64_int64(i)
    End Sub

    Public Function [get]() As UInt64
        Return int64_uint64(i)
    End Function

    Public Function add(ByVal i As UInt64) As UInt64
        Dim r As UInt64 = 0
        r = int64_uint64(Interlocked.Add(Me.i, uint64_int64(i)))
        Thread.MemoryBarrier()
        Return r
    End Function

    Public Function add(ByVal i As Int64) As UInt64
        Dim r As UInt64 = 0
        r = int64_uint64(Interlocked.Add(Me.i, i))
        Thread.MemoryBarrier()
        Return r
    End Function

    Public Function increment() As UInt64
        Dim r As UInt64 = 0
        r = int64_uint64(Interlocked.Increment(i))
        Thread.MemoryBarrier()
        Return r
    End Function

    Public Function decrement() As UInt64
        Dim r As UInt64 = 0
        r = int64_uint64(Interlocked.Decrement(i))
        Thread.MemoryBarrier()
        Return r
    End Function

    Public Function exchange(ByVal x As UInt64) As UInt64
        Dim r As UInt64 = 0
        r = int64_uint64(Interlocked.Exchange(i, uint64_int64(x)))
        Thread.MemoryBarrier()
        Return r
    End Function

    Public Function compare_exchange(ByVal value As UInt64,
                                     ByVal comparand As UInt64) As UInt64
        Dim r As UInt64 = 0
        r = int64_uint64(Interlocked.CompareExchange(i, uint64_int64(value), uint64_int64(comparand)))
        Thread.MemoryBarrier()
        Return r
    End Function

    Public Shared Operator +(ByVal i As atomic_ulong) As UInt64
        Return i.get()
    End Operator

    Public Shared Widening Operator CType(ByVal this As Int64) As atomic_ulong
        Return New atomic_ulong(this)
    End Operator

    Public Shared Widening Operator CType(ByVal this As UInt64) As atomic_ulong
        Return New atomic_ulong(this)
    End Operator

    Public Shared Widening Operator CType(ByVal this As atomic_ulong) As UInt64
        Return +this
    End Operator
End Class

'finish atomic_uint.vbp --------
'finish atomic_ulong.vbp --------
