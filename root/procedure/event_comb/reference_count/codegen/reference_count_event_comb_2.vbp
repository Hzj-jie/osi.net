
Imports osi.root.constants
Imports osi.root.connector
Imports osi.root.envs
Imports osi.root.utils
Imports osi.root.delegates
Imports osi.root.formation
Imports osi.root.lock

Public Class reference_count_event_comb_2
    Public Shared Function start_after_trigger() As Boolean
        Return False
    End Function

    Private ReadOnly r As wrapper(Of singleentry)
    Private ReadOnly b As atomic_int
    Private ReadOnly i As Func(Of event_comb)
    Private ReadOnly w As Func(Of event_comb)
    Private ReadOnly f As Func(Of event_comb)

    Protected Sub New(ByVal init As Func(Of event_comb),
                      ByVal work As Func(Of event_comb),
                      ByVal final As Func(Of event_comb))
        Me.i = init
        Me.w = work
        Me.f = final

        Me.r = New wrapper(Of singleentry)()
        Me.b = New atomic_int()
        start(make_weak_pointer(Me))
    End Sub

    Protected Sub New()
        Me.New(Nothing, Nothing, Nothing)
    End Sub

    Public Function bind() As Boolean
        'assert(b >= 0)
        binding_count()
        Return (b.increment() = 1)
    End Function

    Public Function release() As Boolean
        assert(binding())
        Return (b.decrement() = 0)
    End Function

    Public Function expired() As Boolean
        Return r.not_in_use()
    End Function

    Public Function running() As Boolean
        Return r.in_use()
    End Function

    Public Function binding_count() As Int32
        Dim c As Int32 = 0
        c = (+b)
        assert(c >= 0)
        Return c
    End Function

    Public Function binding() As Boolean
        Return binding_count() > 0
    End Function

    Private Shared Sub start(ByVal wp As weak_pointer(Of reference_count_event_comb_2))
        assert(Not wp Is Nothing)
        assert_begin(New event_comb(Function() As Boolean
                                        Return waitfor(Function() As Boolean
                                                           Dim rcec As reference_count_event_comb_2 = Nothing
                                                           Return Not wp.get(rcec) OrElse
                                                                  rcec.binding()
                                                       End Function) AndAlso
                                               goto_next()
                                    End Function,
                                    Function() As Boolean
                                        Dim rcec As reference_count_event_comb_2 = Nothing
                                        If wp.get(rcec) Then
                                            Return waitfor(rcec.start()) AndAlso
                                                   goto_prev()
                                        Else
                                            Return goto_end()
                                        End If
                                    End Function))
    End Sub

    Private Function run() As event_comb
        Dim ec As event_comb = Nothing
        Return New event_comb(Function() As Boolean
                                  If ec.end_result_or_null() Then
                                      If binding() Then
                                          ec = work()
                                          Return waitfor(ec)
                                      Else
                                          Return goto_end()
                                      End If
                                  Else
                                      raise_error(error_type.warning,
                                                  "reference_count_event_comb_2.work failed")
                                      Return False
                                  End If
                              End Function)
    End Function

    Private Function start() As event_comb
        Dim ec As event_comb = Nothing
        Return New event_comb(Function() As Boolean
                                  assert(r.mark_in_use())
                                  ec = init()
                                  Return waitfor_or_null(ec) AndAlso
                                         goto_next()
                              End Function,
                              Function() As Boolean
                                  If ec.end_result_or_null() Then
                                      Return waitfor(run()) AndAlso
                                             goto_next()
                                  Else
                                      raise_error(error_type.warning,
                                                  "reference_count_event_comb_2.init failed")
                                      Return goto_next()
                                  End If
                              End Function,
                              Function() As Boolean
                                  ec = final()
                                  Return waitfor_or_null(ec) AndAlso
                                         goto_next()
                              End Function,
                              Function() As Boolean
                                  r.release()
                                  If ec.end_result_or_null() Then
                                      Return goto_end()
                                  Else
                                      raise_error(error_type.warning,
                                                  "reference_count_event_comb_2.final failed")
                                      Return False
                                  End If
                              End Function)
    End Function

    Protected Overridable Function init() As event_comb
        Return If(i Is Nothing, Nothing, i())
    End Function

    Protected Overridable Function work() As event_comb
        assert(Not w Is Nothing)
        Return w()
    End Function

    Protected Overridable Function final() As event_comb
        Return If(f Is Nothing, Nothing, f())
    End Function

##DEFINE TYPE reference_count_event_comb_2
##INCLUDE ctors.vbp
End Class
