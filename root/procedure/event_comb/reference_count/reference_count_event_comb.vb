
Option Explicit On
Option Infer Off
Option Strict On

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with reference_count_event_comb.vbp ----------
'so change reference_count_event_comb.vbp instead of this file


' TODO: Remove, use event_comb.flip_event

Imports osi.root.connector
Imports osi.root.constants
Imports osi.root.formation

#Const START_AFTER_TRIGGER = True
#If START_AFTER_TRIGGER Then
Imports impl_type = osi.root.procedure.reference_count_event_comb_1
#Else
Imports impl_type = osi.root.procedure.reference_count_event_comb_2
#End If

Public Class reference_count_event_comb
    Inherits impl_type

    Protected Sub New(ByVal init As Func(Of event_comb),
                      ByVal work As Func(Of event_comb),
                      ByVal final As Func(Of event_comb))
        MyBase.New(init, work, final)
    End Sub

    Protected Sub New()
        MyBase.New()
    End Sub


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with ctors.vbp ----------
'so change ctors.vbp instead of this file


    Public Shared Shadows Function disposer(ByVal rcec As reference_count_event_comb,
                                            ByRef r As disposer(Of reference_count_event_comb)) As Boolean
        If rcec Is Nothing Then
            Return False
        Else
            rcec.bind()
            r = make_disposer(rcec,
                              disposer:=Sub(ad)
                                            rcec.release()
                                        End Sub)
            Return True
        End If
    End Function

    Public Shared Shadows Function disposer(ByVal rcec As reference_count_event_comb) _
                                           As disposer(Of reference_count_event_comb)
        Dim r As disposer(Of reference_count_event_comb) = Nothing
        assert(disposer(rcec, r))
        Return r
    End Function

    Public Shared Shadows Function ctor(ByVal work As Func(Of event_comb),
                                        ByRef r As reference_count_event_comb) As Boolean
        Return ctor(Nothing, work, Nothing, r)
    End Function

    Public Shared Shadows Function ctor(ByVal work As Func(Of event_comb)) As reference_count_event_comb
        Dim r As reference_count_event_comb = Nothing
        assert(ctor(work, r))
        Return r
    End Function

    Public Shared Shadows Function ctor(ByVal init As Func(Of event_comb),
                                        ByVal work As Func(Of event_comb),
                                        ByVal final As Func(Of event_comb),
                                        ByRef r As reference_count_event_comb) As Boolean
        If work Is Nothing Then
            Return False
        Else
            r = New reference_count_event_comb(init, work, final)
            Return True
        End If
    End Function

    Public Shared Shadows Function ctor(ByVal init As Func(Of event_comb),
                                        ByVal work As Func(Of event_comb),
                                        ByVal final As Func(Of event_comb)) As reference_count_event_comb
        Dim r As reference_count_event_comb = Nothing
        assert(ctor(init, work, final, r))
        Return r
    End Function

    Public Shared Shadows Function ctor(ByVal work As Func(Of Boolean),
                                        ByVal interval_ms As Int64,
                                        ByRef r As reference_count_event_comb) As Boolean
        If work Is Nothing Then
            Return False
        Else
            Return ctor(Function() sync_async(Function() If(work(), True, waitfor(interval_ms))),
                        r)
        End If
    End Function

    Public Shared Shadows Function ctor(ByVal work As Func(Of Boolean),
                                        ByVal interval_ms As Int64) As reference_count_event_comb
        Dim r As reference_count_event_comb = Nothing
        assert(ctor(work, interval_ms, r))
        Return r
    End Function

    Public Shared Shadows Function ctor(ByVal work As Action,
                                        ByRef r As reference_count_event_comb) As Boolean
        If work Is Nothing Then
            Return False
        Else
            Return ctor(Function() As Boolean
                            work()
                            Return True
                        End Function,
                        npos,
                        r)
        End If
    End Function

    Public Shared Shadows Function ctor(ByVal work As Action) As reference_count_event_comb
        Dim r As reference_count_event_comb = Nothing
        assert(ctor(work, r))
        Return r
    End Function
'finish ctors.vbp --------
End Class
'finish reference_count_event_comb.vbp --------
