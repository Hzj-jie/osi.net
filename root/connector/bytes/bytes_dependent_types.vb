
'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types.vbp ----------
'so change bytes_dependent_types.vbp instead of this file


Option Strict On

Imports osi.root.constants

Public Module _bytes_dependent_types


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types_impl.vbp ----------
'so change bytes_dependent_types_impl.vbp instead of this file



    Public Function bytes_bool(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As Boolean) As Boolean
        Dim v As Byte = byte_0
        If bytes_byte(i, ii, il, v) Then
            o = byte_bool(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function bytes_bool(
                        ByVal i() As Byte,
                        ByRef o As Boolean,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim v As Byte = byte_0
        If bytes_byte(i, v, offset) Then
            o = byte_bool(v)
            Return True
        Else
            Return False
        End If
    End Function

#If "bool" = "uint32" Then
    Public Function bytes_bool_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
#Else
    Public Function bytes_bool(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
#End If
        Dim o As Boolean = bool_0
        assert(bytes_bool(i, o, offset))
        Return o
    End Function

    Public Function entire_bytes_bool(ByVal i() As Byte, ByRef o As Boolean) As Boolean
        Dim p As UInt32 = 0
        Return bytes_bool(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_bytes_bool(ByVal i() As Byte) As Boolean
        Dim o As Boolean = bool_0
        assert(entire_bytes_bool(i, o))
        Return o
    End Function
    
    Public Function bool_bytes(
                        ByVal i As Boolean,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Return byte_bytes(bool_byte(i), d, offset)
    End Function

    Public Function bool_bytes(ByVal i As Boolean) As Byte()
        Return byte_bytes(bool_byte(i))
    End Function
'finish bytes_dependent_types_impl.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types_impl.vbp ----------
'so change bytes_dependent_types_impl.vbp instead of this file



    Public Function bytes_sbyte(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As SByte) As Boolean
        Dim v As Byte = byte_0
        If bytes_byte(i, ii, il, v) Then
            o = byte_sbyte(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function bytes_sbyte(
                        ByVal i() As Byte,
                        ByRef o As SByte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim v As Byte = byte_0
        If bytes_byte(i, v, offset) Then
            o = byte_sbyte(v)
            Return True
        Else
            Return False
        End If
    End Function

#If "sbyte" = "uint32" Then
    Public Function bytes_sbyte_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As SByte
#Else
    Public Function bytes_sbyte(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As SByte
#End If
        Dim o As SByte = sbyte_0
        assert(bytes_sbyte(i, o, offset))
        Return o
    End Function

    Public Function entire_bytes_sbyte(ByVal i() As Byte, ByRef o As SByte) As Boolean
        Dim p As UInt32 = 0
        Return bytes_sbyte(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_bytes_sbyte(ByVal i() As Byte) As SByte
        Dim o As SByte = sbyte_0
        assert(entire_bytes_sbyte(i, o))
        Return o
    End Function
    
    Public Function sbyte_bytes(
                        ByVal i As SByte,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Return byte_bytes(sbyte_byte(i), d, offset)
    End Function

    Public Function sbyte_bytes(ByVal i As SByte) As Byte()
        Return byte_bytes(sbyte_byte(i))
    End Function
'finish bytes_dependent_types_impl.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types_impl.vbp ----------
'so change bytes_dependent_types_impl.vbp instead of this file



    Public Function bytes_int8(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As SByte) As Boolean
        Dim v As Byte = byte_0
        If bytes_byte(i, ii, il, v) Then
            o = byte_int8(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function bytes_int8(
                        ByVal i() As Byte,
                        ByRef o As SByte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim v As Byte = byte_0
        If bytes_byte(i, v, offset) Then
            o = byte_int8(v)
            Return True
        Else
            Return False
        End If
    End Function

#If "int8" = "uint32" Then
    Public Function bytes_int8_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As SByte
#Else
    Public Function bytes_int8(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As SByte
#End If
        Dim o As SByte = int8_0
        assert(bytes_int8(i, o, offset))
        Return o
    End Function

    Public Function entire_bytes_int8(ByVal i() As Byte, ByRef o As SByte) As Boolean
        Dim p As UInt32 = 0
        Return bytes_int8(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_bytes_int8(ByVal i() As Byte) As SByte
        Dim o As SByte = int8_0
        assert(entire_bytes_int8(i, o))
        Return o
    End Function
    
    Public Function int8_bytes(
                        ByVal i As SByte,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Return byte_bytes(int8_byte(i), d, offset)
    End Function

    Public Function int8_bytes(ByVal i As SByte) As Byte()
        Return byte_bytes(int8_byte(i))
    End Function
'finish bytes_dependent_types_impl.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types_impl.vbp ----------
'so change bytes_dependent_types_impl.vbp instead of this file



    Public Function bytes_uint8(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As Byte) As Boolean
        Dim v As Byte = byte_0
        If bytes_byte(i, ii, il, v) Then
            o = byte_uint8(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function bytes_uint8(
                        ByVal i() As Byte,
                        ByRef o As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim v As Byte = byte_0
        If bytes_byte(i, v, offset) Then
            o = byte_uint8(v)
            Return True
        Else
            Return False
        End If
    End Function

#If "uint8" = "uint32" Then
    Public Function bytes_uint8_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Byte
#Else
    Public Function bytes_uint8(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Byte
#End If
        Dim o As Byte = uint8_0
        assert(bytes_uint8(i, o, offset))
        Return o
    End Function

    Public Function entire_bytes_uint8(ByVal i() As Byte, ByRef o As Byte) As Boolean
        Dim p As UInt32 = 0
        Return bytes_uint8(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_bytes_uint8(ByVal i() As Byte) As Byte
        Dim o As Byte = uint8_0
        assert(entire_bytes_uint8(i, o))
        Return o
    End Function
    
    Public Function uint8_bytes(
                        ByVal i As Byte,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Return byte_bytes(uint8_byte(i), d, offset)
    End Function

    Public Function uint8_bytes(ByVal i As Byte) As Byte()
        Return byte_bytes(uint8_byte(i))
    End Function
'finish bytes_dependent_types_impl.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types_impl.vbp ----------
'so change bytes_dependent_types_impl.vbp instead of this file



    Public Function bytes_uint16(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As UInt16) As Boolean
        Dim v As Int16 = int16_0
        If bytes_int16(i, ii, il, v) Then
            o = int16_uint16(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function bytes_uint16(
                        ByVal i() As Byte,
                        ByRef o As UInt16,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim v As Int16 = int16_0
        If bytes_int16(i, v, offset) Then
            o = int16_uint16(v)
            Return True
        Else
            Return False
        End If
    End Function

#If "uint16" = "uint32" Then
    Public Function bytes_uint16_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt16
#Else
    Public Function bytes_uint16(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt16
#End If
        Dim o As UInt16 = uint16_0
        assert(bytes_uint16(i, o, offset))
        Return o
    End Function

    Public Function entire_bytes_uint16(ByVal i() As Byte, ByRef o As UInt16) As Boolean
        Dim p As UInt32 = 0
        Return bytes_uint16(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_bytes_uint16(ByVal i() As Byte) As UInt16
        Dim o As UInt16 = uint16_0
        assert(entire_bytes_uint16(i, o))
        Return o
    End Function
    
    Public Function uint16_bytes(
                        ByVal i As UInt16,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Return int16_bytes(uint16_int16(i), d, offset)
    End Function

    Public Function uint16_bytes(ByVal i As UInt16) As Byte()
        Return int16_bytes(uint16_int16(i))
    End Function
'finish bytes_dependent_types_impl.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types_impl.vbp ----------
'so change bytes_dependent_types_impl.vbp instead of this file



    Public Function bytes_char(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As Char) As Boolean
        Dim v As UInt16 = uint16_0
        If bytes_uint16(i, ii, il, v) Then
            o = uint16_char(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function bytes_char(
                        ByVal i() As Byte,
                        ByRef o As Char,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim v As UInt16 = uint16_0
        If bytes_uint16(i, v, offset) Then
            o = uint16_char(v)
            Return True
        Else
            Return False
        End If
    End Function

#If "char" = "uint32" Then
    Public Function bytes_char_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Char
#Else
    Public Function bytes_char(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Char
#End If
        Dim o As Char = char_0
        assert(bytes_char(i, o, offset))
        Return o
    End Function

    Public Function entire_bytes_char(ByVal i() As Byte, ByRef o As Char) As Boolean
        Dim p As UInt32 = 0
        Return bytes_char(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_bytes_char(ByVal i() As Byte) As Char
        Dim o As Char = char_0
        assert(entire_bytes_char(i, o))
        Return o
    End Function
    
    Public Function char_bytes(
                        ByVal i As Char,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Return uint16_bytes(char_uint16(i), d, offset)
    End Function

    Public Function char_bytes(ByVal i As Char) As Byte()
        Return uint16_bytes(char_uint16(i))
    End Function
'finish bytes_dependent_types_impl.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types_impl.vbp ----------
'so change bytes_dependent_types_impl.vbp instead of this file



    Public Function bytes_uint32(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As UInt32) As Boolean
        Dim v As Int32 = int32_0
        If bytes_int32(i, ii, il, v) Then
            o = int32_uint32(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function bytes_uint32(
                        ByVal i() As Byte,
                        ByRef o As UInt32,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim v As Int32 = int32_0
        If bytes_int32(i, v, offset) Then
            o = int32_uint32(v)
            Return True
        Else
            Return False
        End If
    End Function

#If "uint32" = "uint32" Then
    Public Function bytes_uint32_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt32
#Else
    Public Function bytes_uint32(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt32
#End If
        Dim o As UInt32 = uint32_0
        assert(bytes_uint32(i, o, offset))
        Return o
    End Function

    Public Function entire_bytes_uint32(ByVal i() As Byte, ByRef o As UInt32) As Boolean
        Dim p As UInt32 = 0
        Return bytes_uint32(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_bytes_uint32(ByVal i() As Byte) As UInt32
        Dim o As UInt32 = uint32_0
        assert(entire_bytes_uint32(i, o))
        Return o
    End Function
    
    Public Function uint32_bytes(
                        ByVal i As UInt32,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Return int32_bytes(uint32_int32(i), d, offset)
    End Function

    Public Function uint32_bytes(ByVal i As UInt32) As Byte()
        Return int32_bytes(uint32_int32(i))
    End Function
'finish bytes_dependent_types_impl.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types_impl.vbp ----------
'so change bytes_dependent_types_impl.vbp instead of this file



    Public Function bytes_uint64(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As UInt64) As Boolean
        Dim v As Int64 = int64_0
        If bytes_int64(i, ii, il, v) Then
            o = int64_uint64(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function bytes_uint64(
                        ByVal i() As Byte,
                        ByRef o As UInt64,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim v As Int64 = int64_0
        If bytes_int64(i, v, offset) Then
            o = int64_uint64(v)
            Return True
        Else
            Return False
        End If
    End Function

#If "uint64" = "uint32" Then
    Public Function bytes_uint64_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt64
#Else
    Public Function bytes_uint64(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt64
#End If
        Dim o As UInt64 = uint64_0
        assert(bytes_uint64(i, o, offset))
        Return o
    End Function

    Public Function entire_bytes_uint64(ByVal i() As Byte, ByRef o As UInt64) As Boolean
        Dim p As UInt32 = 0
        Return bytes_uint64(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_bytes_uint64(ByVal i() As Byte) As UInt64
        Dim o As UInt64 = uint64_0
        assert(entire_bytes_uint64(i, o))
        Return o
    End Function
    
    Public Function uint64_bytes(
                        ByVal i As UInt64,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Return int64_bytes(uint64_int64(i), d, offset)
    End Function

    Public Function uint64_bytes(ByVal i As UInt64) As Byte()
        Return int64_bytes(uint64_int64(i))
    End Function
'finish bytes_dependent_types_impl.vbp --------

End Module
'finish bytes_dependent_types.vbp --------
