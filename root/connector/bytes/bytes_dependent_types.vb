
Option Explicit On
Option Infer Off
Option Strict On

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types.vbp ----------
'so change bytes_dependent_types.vbp instead of this file


Imports System.Runtime.CompilerServices
Imports osi.root.constants

Public Module _bytes_dependent_types


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types_impl.vbp ----------
'so change bytes_dependent_types_impl.vbp instead of this file



    Public Function bytes_bool(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As Boolean) As Boolean
        Dim v As Byte = byte_0
        If bytes_byte(i, ii, il, v) Then
            o = byte_bool(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function bool_bytes(ByVal i As Boolean) As Byte()
        Return byte_bytes(bool_byte(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function bytes_bool(
                        ByVal i() As Byte,
                        ByRef o As Boolean,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_bool
#End If
        If bytes_bool(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "bool" = "uint32" Then
    Public Function bytes_bool_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
#Else
    Public Function bytes_bool(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
#End If
        Dim o As Boolean = bool_0
        assert(bytes_bool(i, o, offset))
        Return o
    End Function

    Public Function entire_bytes_bool(
                        ByVal i() As Byte,
                        ByRef o As Boolean) As Boolean
        Dim p As UInt32 = 0
        Return bytes_bool(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_bytes_bool(ByVal i() As Byte) As Boolean
        Dim o As Boolean = bool_0
        assert(entire_bytes_bool(i, o))
        Return o
    End Function
    
    Public Function bool_bytes(
                        ByVal i As Boolean,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_bool
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = bool_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "bool" <> "int8" AndAlso "bool" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function bytes(ByVal i As Boolean) As Byte()
        Return bool_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_bool(ByVal i() As Byte) As Boolean
#If "bool" = "uint32" Then
        Return bytes_bool_(i)
#Else
        Return bytes_bool(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------

    Public Function big_endian_bytes_bool(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As Boolean) As Boolean
        Dim v As Byte = byte_0
        If big_endian_bytes_byte(i, ii, il, v) Then
            o = byte_bool(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function bool_big_endian_bytes(ByVal i As Boolean) As Byte()
        Return byte_big_endian_bytes(bool_byte(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function big_endian_bytes_bool(
                        ByVal i() As Byte,
                        ByRef o As Boolean,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_bool
#End If
        If big_endian_bytes_bool(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "bool" = "uint32" Then
    Public Function big_endian_bytes_bool_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
#Else
    Public Function big_endian_bytes_bool(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
#End If
        Dim o As Boolean = bool_0
        assert(big_endian_bytes_bool(i, o, offset))
        Return o
    End Function

    Public Function entire_big_endian_bytes_bool(
                        ByVal i() As Byte,
                        ByRef o As Boolean) As Boolean
        Dim p As UInt32 = 0
        Return big_endian_bytes_bool(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_big_endian_bytes_bool(ByVal i() As Byte) As Boolean
        Dim o As Boolean = bool_0
        assert(entire_big_endian_bytes_bool(i, o))
        Return o
    End Function
    
    Public Function bool_big_endian_bytes(
                        ByVal i As Boolean,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_bool
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = bool_big_endian_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "bool" <> "int8" AndAlso "bool" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function big_endian_bytes(ByVal i As Boolean) As Byte()
        Return bool_big_endian_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_big_endian_bool(ByVal i() As Byte) As Boolean
#If "bool" = "uint32" Then
        Return big_endian_bytes_bool_(i)
#Else
        Return big_endian_bytes_bool(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------

    Public Function little_endian_bytes_bool(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As Boolean) As Boolean
        Dim v As Byte = byte_0
        If little_endian_bytes_byte(i, ii, il, v) Then
            o = byte_bool(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function bool_little_endian_bytes(ByVal i As Boolean) As Byte()
        Return byte_little_endian_bytes(bool_byte(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function little_endian_bytes_bool(
                        ByVal i() As Byte,
                        ByRef o As Boolean,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_bool
#End If
        If little_endian_bytes_bool(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "bool" = "uint32" Then
    Public Function little_endian_bytes_bool_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
#Else
    Public Function little_endian_bytes_bool(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
#End If
        Dim o As Boolean = bool_0
        assert(little_endian_bytes_bool(i, o, offset))
        Return o
    End Function

    Public Function entire_little_endian_bytes_bool(
                        ByVal i() As Byte,
                        ByRef o As Boolean) As Boolean
        Dim p As UInt32 = 0
        Return little_endian_bytes_bool(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_little_endian_bytes_bool(ByVal i() As Byte) As Boolean
        Dim o As Boolean = bool_0
        assert(entire_little_endian_bytes_bool(i, o))
        Return o
    End Function
    
    Public Function bool_little_endian_bytes(
                        ByVal i As Boolean,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_bool
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = bool_little_endian_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "bool" <> "int8" AndAlso "bool" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function little_endian_bytes(ByVal i As Boolean) As Byte()
        Return bool_little_endian_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_little_endian_bool(ByVal i() As Byte) As Boolean
#If "bool" = "uint32" Then
        Return little_endian_bytes_bool_(i)
#Else
        Return little_endian_bytes_bool(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------
'finish bytes_dependent_types_impl.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types_impl.vbp ----------
'so change bytes_dependent_types_impl.vbp instead of this file



    Public Function bytes_sbyte(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As SByte) As Boolean
        Dim v As Byte = byte_0
        If bytes_byte(i, ii, il, v) Then
            o = byte_sbyte(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function sbyte_bytes(ByVal i As SByte) As Byte()
        Return byte_bytes(sbyte_byte(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function bytes_sbyte(
                        ByVal i() As Byte,
                        ByRef o As SByte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_sbyte
#End If
        If bytes_sbyte(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "sbyte" = "uint32" Then
    Public Function bytes_sbyte_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As SByte
#Else
    Public Function bytes_sbyte(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As SByte
#End If
        Dim o As SByte = sbyte_0
        assert(bytes_sbyte(i, o, offset))
        Return o
    End Function

    Public Function entire_bytes_sbyte(
                        ByVal i() As Byte,
                        ByRef o As SByte) As Boolean
        Dim p As UInt32 = 0
        Return bytes_sbyte(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_bytes_sbyte(ByVal i() As Byte) As SByte
        Dim o As SByte = sbyte_0
        assert(entire_bytes_sbyte(i, o))
        Return o
    End Function
    
    Public Function sbyte_bytes(
                        ByVal i As SByte,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_sbyte
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = sbyte_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "sbyte" <> "int8" AndAlso "sbyte" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function bytes(ByVal i As SByte) As Byte()
        Return sbyte_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_sbyte(ByVal i() As Byte) As SByte
#If "sbyte" = "uint32" Then
        Return bytes_sbyte_(i)
#Else
        Return bytes_sbyte(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------

    Public Function big_endian_bytes_sbyte(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As SByte) As Boolean
        Dim v As Byte = byte_0
        If big_endian_bytes_byte(i, ii, il, v) Then
            o = byte_sbyte(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function sbyte_big_endian_bytes(ByVal i As SByte) As Byte()
        Return byte_big_endian_bytes(sbyte_byte(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function big_endian_bytes_sbyte(
                        ByVal i() As Byte,
                        ByRef o As SByte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_sbyte
#End If
        If big_endian_bytes_sbyte(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "sbyte" = "uint32" Then
    Public Function big_endian_bytes_sbyte_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As SByte
#Else
    Public Function big_endian_bytes_sbyte(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As SByte
#End If
        Dim o As SByte = sbyte_0
        assert(big_endian_bytes_sbyte(i, o, offset))
        Return o
    End Function

    Public Function entire_big_endian_bytes_sbyte(
                        ByVal i() As Byte,
                        ByRef o As SByte) As Boolean
        Dim p As UInt32 = 0
        Return big_endian_bytes_sbyte(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_big_endian_bytes_sbyte(ByVal i() As Byte) As SByte
        Dim o As SByte = sbyte_0
        assert(entire_big_endian_bytes_sbyte(i, o))
        Return o
    End Function
    
    Public Function sbyte_big_endian_bytes(
                        ByVal i As SByte,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_sbyte
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = sbyte_big_endian_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "sbyte" <> "int8" AndAlso "sbyte" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function big_endian_bytes(ByVal i As SByte) As Byte()
        Return sbyte_big_endian_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_big_endian_sbyte(ByVal i() As Byte) As SByte
#If "sbyte" = "uint32" Then
        Return big_endian_bytes_sbyte_(i)
#Else
        Return big_endian_bytes_sbyte(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------

    Public Function little_endian_bytes_sbyte(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As SByte) As Boolean
        Dim v As Byte = byte_0
        If little_endian_bytes_byte(i, ii, il, v) Then
            o = byte_sbyte(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function sbyte_little_endian_bytes(ByVal i As SByte) As Byte()
        Return byte_little_endian_bytes(sbyte_byte(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function little_endian_bytes_sbyte(
                        ByVal i() As Byte,
                        ByRef o As SByte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_sbyte
#End If
        If little_endian_bytes_sbyte(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "sbyte" = "uint32" Then
    Public Function little_endian_bytes_sbyte_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As SByte
#Else
    Public Function little_endian_bytes_sbyte(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As SByte
#End If
        Dim o As SByte = sbyte_0
        assert(little_endian_bytes_sbyte(i, o, offset))
        Return o
    End Function

    Public Function entire_little_endian_bytes_sbyte(
                        ByVal i() As Byte,
                        ByRef o As SByte) As Boolean
        Dim p As UInt32 = 0
        Return little_endian_bytes_sbyte(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_little_endian_bytes_sbyte(ByVal i() As Byte) As SByte
        Dim o As SByte = sbyte_0
        assert(entire_little_endian_bytes_sbyte(i, o))
        Return o
    End Function
    
    Public Function sbyte_little_endian_bytes(
                        ByVal i As SByte,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_sbyte
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = sbyte_little_endian_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "sbyte" <> "int8" AndAlso "sbyte" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function little_endian_bytes(ByVal i As SByte) As Byte()
        Return sbyte_little_endian_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_little_endian_sbyte(ByVal i() As Byte) As SByte
#If "sbyte" = "uint32" Then
        Return little_endian_bytes_sbyte_(i)
#Else
        Return little_endian_bytes_sbyte(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------
'finish bytes_dependent_types_impl.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types_impl.vbp ----------
'so change bytes_dependent_types_impl.vbp instead of this file



    Public Function bytes_int8(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As SByte) As Boolean
        Dim v As Byte = byte_0
        If bytes_byte(i, ii, il, v) Then
            o = byte_int8(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function int8_bytes(ByVal i As SByte) As Byte()
        Return byte_bytes(int8_byte(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function bytes_int8(
                        ByVal i() As Byte,
                        ByRef o As SByte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_int8
#End If
        If bytes_int8(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "int8" = "uint32" Then
    Public Function bytes_int8_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As SByte
#Else
    Public Function bytes_int8(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As SByte
#End If
        Dim o As SByte = int8_0
        assert(bytes_int8(i, o, offset))
        Return o
    End Function

    Public Function entire_bytes_int8(
                        ByVal i() As Byte,
                        ByRef o As SByte) As Boolean
        Dim p As UInt32 = 0
        Return bytes_int8(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_bytes_int8(ByVal i() As Byte) As SByte
        Dim o As SByte = int8_0
        assert(entire_bytes_int8(i, o))
        Return o
    End Function
    
    Public Function int8_bytes(
                        ByVal i As SByte,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_int8
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = int8_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "int8" <> "int8" AndAlso "int8" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function bytes(ByVal i As SByte) As Byte()
        Return int8_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_int8(ByVal i() As Byte) As SByte
#If "int8" = "uint32" Then
        Return bytes_int8_(i)
#Else
        Return bytes_int8(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------

    Public Function big_endian_bytes_int8(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As SByte) As Boolean
        Dim v As Byte = byte_0
        If big_endian_bytes_byte(i, ii, il, v) Then
            o = byte_int8(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function int8_big_endian_bytes(ByVal i As SByte) As Byte()
        Return byte_big_endian_bytes(int8_byte(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function big_endian_bytes_int8(
                        ByVal i() As Byte,
                        ByRef o As SByte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_int8
#End If
        If big_endian_bytes_int8(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "int8" = "uint32" Then
    Public Function big_endian_bytes_int8_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As SByte
#Else
    Public Function big_endian_bytes_int8(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As SByte
#End If
        Dim o As SByte = int8_0
        assert(big_endian_bytes_int8(i, o, offset))
        Return o
    End Function

    Public Function entire_big_endian_bytes_int8(
                        ByVal i() As Byte,
                        ByRef o As SByte) As Boolean
        Dim p As UInt32 = 0
        Return big_endian_bytes_int8(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_big_endian_bytes_int8(ByVal i() As Byte) As SByte
        Dim o As SByte = int8_0
        assert(entire_big_endian_bytes_int8(i, o))
        Return o
    End Function
    
    Public Function int8_big_endian_bytes(
                        ByVal i As SByte,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_int8
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = int8_big_endian_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "int8" <> "int8" AndAlso "int8" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function big_endian_bytes(ByVal i As SByte) As Byte()
        Return int8_big_endian_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_big_endian_int8(ByVal i() As Byte) As SByte
#If "int8" = "uint32" Then
        Return big_endian_bytes_int8_(i)
#Else
        Return big_endian_bytes_int8(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------

    Public Function little_endian_bytes_int8(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As SByte) As Boolean
        Dim v As Byte = byte_0
        If little_endian_bytes_byte(i, ii, il, v) Then
            o = byte_int8(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function int8_little_endian_bytes(ByVal i As SByte) As Byte()
        Return byte_little_endian_bytes(int8_byte(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function little_endian_bytes_int8(
                        ByVal i() As Byte,
                        ByRef o As SByte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_int8
#End If
        If little_endian_bytes_int8(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "int8" = "uint32" Then
    Public Function little_endian_bytes_int8_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As SByte
#Else
    Public Function little_endian_bytes_int8(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As SByte
#End If
        Dim o As SByte = int8_0
        assert(little_endian_bytes_int8(i, o, offset))
        Return o
    End Function

    Public Function entire_little_endian_bytes_int8(
                        ByVal i() As Byte,
                        ByRef o As SByte) As Boolean
        Dim p As UInt32 = 0
        Return little_endian_bytes_int8(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_little_endian_bytes_int8(ByVal i() As Byte) As SByte
        Dim o As SByte = int8_0
        assert(entire_little_endian_bytes_int8(i, o))
        Return o
    End Function
    
    Public Function int8_little_endian_bytes(
                        ByVal i As SByte,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_int8
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = int8_little_endian_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "int8" <> "int8" AndAlso "int8" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function little_endian_bytes(ByVal i As SByte) As Byte()
        Return int8_little_endian_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_little_endian_int8(ByVal i() As Byte) As SByte
#If "int8" = "uint32" Then
        Return little_endian_bytes_int8_(i)
#Else
        Return little_endian_bytes_int8(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------
'finish bytes_dependent_types_impl.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types_impl.vbp ----------
'so change bytes_dependent_types_impl.vbp instead of this file



    Public Function bytes_uint8(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As Byte) As Boolean
        Dim v As Byte = byte_0
        If bytes_byte(i, ii, il, v) Then
            o = byte_uint8(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function uint8_bytes(ByVal i As Byte) As Byte()
        Return byte_bytes(uint8_byte(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function bytes_uint8(
                        ByVal i() As Byte,
                        ByRef o As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_uint8
#End If
        If bytes_uint8(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint8" = "uint32" Then
    Public Function bytes_uint8_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Byte
#Else
    Public Function bytes_uint8(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Byte
#End If
        Dim o As Byte = uint8_0
        assert(bytes_uint8(i, o, offset))
        Return o
    End Function

    Public Function entire_bytes_uint8(
                        ByVal i() As Byte,
                        ByRef o As Byte) As Boolean
        Dim p As UInt32 = 0
        Return bytes_uint8(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_bytes_uint8(ByVal i() As Byte) As Byte
        Dim o As Byte = uint8_0
        assert(entire_bytes_uint8(i, o))
        Return o
    End Function
    
    Public Function uint8_bytes(
                        ByVal i As Byte,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_uint8
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = uint8_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint8" <> "int8" AndAlso "uint8" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function bytes(ByVal i As Byte) As Byte()
        Return uint8_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_uint8(ByVal i() As Byte) As Byte
#If "uint8" = "uint32" Then
        Return bytes_uint8_(i)
#Else
        Return bytes_uint8(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------

    Public Function big_endian_bytes_uint8(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As Byte) As Boolean
        Dim v As Byte = byte_0
        If big_endian_bytes_byte(i, ii, il, v) Then
            o = byte_uint8(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function uint8_big_endian_bytes(ByVal i As Byte) As Byte()
        Return byte_big_endian_bytes(uint8_byte(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function big_endian_bytes_uint8(
                        ByVal i() As Byte,
                        ByRef o As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_uint8
#End If
        If big_endian_bytes_uint8(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint8" = "uint32" Then
    Public Function big_endian_bytes_uint8_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Byte
#Else
    Public Function big_endian_bytes_uint8(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Byte
#End If
        Dim o As Byte = uint8_0
        assert(big_endian_bytes_uint8(i, o, offset))
        Return o
    End Function

    Public Function entire_big_endian_bytes_uint8(
                        ByVal i() As Byte,
                        ByRef o As Byte) As Boolean
        Dim p As UInt32 = 0
        Return big_endian_bytes_uint8(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_big_endian_bytes_uint8(ByVal i() As Byte) As Byte
        Dim o As Byte = uint8_0
        assert(entire_big_endian_bytes_uint8(i, o))
        Return o
    End Function
    
    Public Function uint8_big_endian_bytes(
                        ByVal i As Byte,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_uint8
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = uint8_big_endian_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint8" <> "int8" AndAlso "uint8" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function big_endian_bytes(ByVal i As Byte) As Byte()
        Return uint8_big_endian_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_big_endian_uint8(ByVal i() As Byte) As Byte
#If "uint8" = "uint32" Then
        Return big_endian_bytes_uint8_(i)
#Else
        Return big_endian_bytes_uint8(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------

    Public Function little_endian_bytes_uint8(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As Byte) As Boolean
        Dim v As Byte = byte_0
        If little_endian_bytes_byte(i, ii, il, v) Then
            o = byte_uint8(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function uint8_little_endian_bytes(ByVal i As Byte) As Byte()
        Return byte_little_endian_bytes(uint8_byte(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function little_endian_bytes_uint8(
                        ByVal i() As Byte,
                        ByRef o As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_uint8
#End If
        If little_endian_bytes_uint8(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint8" = "uint32" Then
    Public Function little_endian_bytes_uint8_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Byte
#Else
    Public Function little_endian_bytes_uint8(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Byte
#End If
        Dim o As Byte = uint8_0
        assert(little_endian_bytes_uint8(i, o, offset))
        Return o
    End Function

    Public Function entire_little_endian_bytes_uint8(
                        ByVal i() As Byte,
                        ByRef o As Byte) As Boolean
        Dim p As UInt32 = 0
        Return little_endian_bytes_uint8(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_little_endian_bytes_uint8(ByVal i() As Byte) As Byte
        Dim o As Byte = uint8_0
        assert(entire_little_endian_bytes_uint8(i, o))
        Return o
    End Function
    
    Public Function uint8_little_endian_bytes(
                        ByVal i As Byte,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "byte" <> "" Then
        size = sizeof_byte
#Else
        size = sizeof_uint8
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = uint8_little_endian_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint8" <> "int8" AndAlso "uint8" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function little_endian_bytes(ByVal i As Byte) As Byte()
        Return uint8_little_endian_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_little_endian_uint8(ByVal i() As Byte) As Byte
#If "uint8" = "uint32" Then
        Return little_endian_bytes_uint8_(i)
#Else
        Return little_endian_bytes_uint8(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------
'finish bytes_dependent_types_impl.vbp --------

#If 0 Then


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types_impl.vbp ----------
'so change bytes_dependent_types_impl.vbp instead of this file



    Public Function bytes_uint16(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As UInt16) As Boolean
        Dim v As Int16 = int16_0
        If bytes_int16(i, ii, il, v) Then
            o = int16_uint16(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function uint16_bytes(ByVal i As UInt16) As Byte()
        Return int16_bytes(uint16_int16(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function bytes_uint16(
                        ByVal i() As Byte,
                        ByRef o As UInt16,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int16" <> "" Then
        size = sizeof_int16
#Else
        size = sizeof_uint16
#End If
        If bytes_uint16(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint16" = "uint32" Then
    Public Function bytes_uint16_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt16
#Else
    Public Function bytes_uint16(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt16
#End If
        Dim o As UInt16 = uint16_0
        assert(bytes_uint16(i, o, offset))
        Return o
    End Function

    Public Function entire_bytes_uint16(
                        ByVal i() As Byte,
                        ByRef o As UInt16) As Boolean
        Dim p As UInt32 = 0
        Return bytes_uint16(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_bytes_uint16(ByVal i() As Byte) As UInt16
        Dim o As UInt16 = uint16_0
        assert(entire_bytes_uint16(i, o))
        Return o
    End Function
    
    Public Function uint16_bytes(
                        ByVal i As UInt16,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int16" <> "" Then
        size = sizeof_int16
#Else
        size = sizeof_uint16
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = uint16_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint16" <> "int8" AndAlso "uint16" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function bytes(ByVal i As UInt16) As Byte()
        Return uint16_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_uint16(ByVal i() As Byte) As UInt16
#If "uint16" = "uint32" Then
        Return bytes_uint16_(i)
#Else
        Return bytes_uint16(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------

    Public Function big_endian_bytes_uint16(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As UInt16) As Boolean
        Dim v As Int16 = int16_0
        If big_endian_bytes_int16(i, ii, il, v) Then
            o = int16_uint16(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function uint16_big_endian_bytes(ByVal i As UInt16) As Byte()
        Return int16_big_endian_bytes(uint16_int16(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function big_endian_bytes_uint16(
                        ByVal i() As Byte,
                        ByRef o As UInt16,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int16" <> "" Then
        size = sizeof_int16
#Else
        size = sizeof_uint16
#End If
        If big_endian_bytes_uint16(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint16" = "uint32" Then
    Public Function big_endian_bytes_uint16_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt16
#Else
    Public Function big_endian_bytes_uint16(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt16
#End If
        Dim o As UInt16 = uint16_0
        assert(big_endian_bytes_uint16(i, o, offset))
        Return o
    End Function

    Public Function entire_big_endian_bytes_uint16(
                        ByVal i() As Byte,
                        ByRef o As UInt16) As Boolean
        Dim p As UInt32 = 0
        Return big_endian_bytes_uint16(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_big_endian_bytes_uint16(ByVal i() As Byte) As UInt16
        Dim o As UInt16 = uint16_0
        assert(entire_big_endian_bytes_uint16(i, o))
        Return o
    End Function
    
    Public Function uint16_big_endian_bytes(
                        ByVal i As UInt16,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int16" <> "" Then
        size = sizeof_int16
#Else
        size = sizeof_uint16
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = uint16_big_endian_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint16" <> "int8" AndAlso "uint16" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function big_endian_bytes(ByVal i As UInt16) As Byte()
        Return uint16_big_endian_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_big_endian_uint16(ByVal i() As Byte) As UInt16
#If "uint16" = "uint32" Then
        Return big_endian_bytes_uint16_(i)
#Else
        Return big_endian_bytes_uint16(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------

    Public Function little_endian_bytes_uint16(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As UInt16) As Boolean
        Dim v As Int16 = int16_0
        If little_endian_bytes_int16(i, ii, il, v) Then
            o = int16_uint16(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function uint16_little_endian_bytes(ByVal i As UInt16) As Byte()
        Return int16_little_endian_bytes(uint16_int16(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function little_endian_bytes_uint16(
                        ByVal i() As Byte,
                        ByRef o As UInt16,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int16" <> "" Then
        size = sizeof_int16
#Else
        size = sizeof_uint16
#End If
        If little_endian_bytes_uint16(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint16" = "uint32" Then
    Public Function little_endian_bytes_uint16_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt16
#Else
    Public Function little_endian_bytes_uint16(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt16
#End If
        Dim o As UInt16 = uint16_0
        assert(little_endian_bytes_uint16(i, o, offset))
        Return o
    End Function

    Public Function entire_little_endian_bytes_uint16(
                        ByVal i() As Byte,
                        ByRef o As UInt16) As Boolean
        Dim p As UInt32 = 0
        Return little_endian_bytes_uint16(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_little_endian_bytes_uint16(ByVal i() As Byte) As UInt16
        Dim o As UInt16 = uint16_0
        assert(entire_little_endian_bytes_uint16(i, o))
        Return o
    End Function
    
    Public Function uint16_little_endian_bytes(
                        ByVal i As UInt16,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int16" <> "" Then
        size = sizeof_int16
#Else
        size = sizeof_uint16
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = uint16_little_endian_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint16" <> "int8" AndAlso "uint16" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function little_endian_bytes(ByVal i As UInt16) As Byte()
        Return uint16_little_endian_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_little_endian_uint16(ByVal i() As Byte) As UInt16
#If "uint16" = "uint32" Then
        Return little_endian_bytes_uint16_(i)
#Else
        Return little_endian_bytes_uint16(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------
'finish bytes_dependent_types_impl.vbp --------

#End If


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types_impl.vbp ----------
'so change bytes_dependent_types_impl.vbp instead of this file



    Public Function bytes_char(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As Char) As Boolean
        Dim v As UInt16 = uint16_0
        If bytes_uint16(i, ii, il, v) Then
            o = uint16_char(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function char_bytes(ByVal i As Char) As Byte()
        Return uint16_bytes(char_uint16(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function bytes_char(
                        ByVal i() As Byte,
                        ByRef o As Char,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "uint16" <> "" Then
        size = sizeof_uint16
#Else
        size = sizeof_char
#End If
        If bytes_char(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "char" = "uint32" Then
    Public Function bytes_char_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Char
#Else
    Public Function bytes_char(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Char
#End If
        Dim o As Char = char_0
        assert(bytes_char(i, o, offset))
        Return o
    End Function

    Public Function entire_bytes_char(
                        ByVal i() As Byte,
                        ByRef o As Char) As Boolean
        Dim p As UInt32 = 0
        Return bytes_char(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_bytes_char(ByVal i() As Byte) As Char
        Dim o As Char = char_0
        assert(entire_bytes_char(i, o))
        Return o
    End Function
    
    Public Function char_bytes(
                        ByVal i As Char,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "uint16" <> "" Then
        size = sizeof_uint16
#Else
        size = sizeof_char
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = char_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "char" <> "int8" AndAlso "char" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function bytes(ByVal i As Char) As Byte()
        Return char_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_char(ByVal i() As Byte) As Char
#If "char" = "uint32" Then
        Return bytes_char_(i)
#Else
        Return bytes_char(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------

    Public Function big_endian_bytes_char(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As Char) As Boolean
        Dim v As UInt16 = uint16_0
        If big_endian_bytes_uint16(i, ii, il, v) Then
            o = uint16_char(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function char_big_endian_bytes(ByVal i As Char) As Byte()
        Return uint16_big_endian_bytes(char_uint16(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function big_endian_bytes_char(
                        ByVal i() As Byte,
                        ByRef o As Char,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "uint16" <> "" Then
        size = sizeof_uint16
#Else
        size = sizeof_char
#End If
        If big_endian_bytes_char(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "char" = "uint32" Then
    Public Function big_endian_bytes_char_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Char
#Else
    Public Function big_endian_bytes_char(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Char
#End If
        Dim o As Char = char_0
        assert(big_endian_bytes_char(i, o, offset))
        Return o
    End Function

    Public Function entire_big_endian_bytes_char(
                        ByVal i() As Byte,
                        ByRef o As Char) As Boolean
        Dim p As UInt32 = 0
        Return big_endian_bytes_char(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_big_endian_bytes_char(ByVal i() As Byte) As Char
        Dim o As Char = char_0
        assert(entire_big_endian_bytes_char(i, o))
        Return o
    End Function
    
    Public Function char_big_endian_bytes(
                        ByVal i As Char,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "uint16" <> "" Then
        size = sizeof_uint16
#Else
        size = sizeof_char
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = char_big_endian_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "char" <> "int8" AndAlso "char" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function big_endian_bytes(ByVal i As Char) As Byte()
        Return char_big_endian_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_big_endian_char(ByVal i() As Byte) As Char
#If "char" = "uint32" Then
        Return big_endian_bytes_char_(i)
#Else
        Return big_endian_bytes_char(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------

    Public Function little_endian_bytes_char(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As Char) As Boolean
        Dim v As UInt16 = uint16_0
        If little_endian_bytes_uint16(i, ii, il, v) Then
            o = uint16_char(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function char_little_endian_bytes(ByVal i As Char) As Byte()
        Return uint16_little_endian_bytes(char_uint16(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function little_endian_bytes_char(
                        ByVal i() As Byte,
                        ByRef o As Char,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "uint16" <> "" Then
        size = sizeof_uint16
#Else
        size = sizeof_char
#End If
        If little_endian_bytes_char(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "char" = "uint32" Then
    Public Function little_endian_bytes_char_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Char
#Else
    Public Function little_endian_bytes_char(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Char
#End If
        Dim o As Char = char_0
        assert(little_endian_bytes_char(i, o, offset))
        Return o
    End Function

    Public Function entire_little_endian_bytes_char(
                        ByVal i() As Byte,
                        ByRef o As Char) As Boolean
        Dim p As UInt32 = 0
        Return little_endian_bytes_char(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_little_endian_bytes_char(ByVal i() As Byte) As Char
        Dim o As Char = char_0
        assert(entire_little_endian_bytes_char(i, o))
        Return o
    End Function
    
    Public Function char_little_endian_bytes(
                        ByVal i As Char,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "uint16" <> "" Then
        size = sizeof_uint16
#Else
        size = sizeof_char
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = char_little_endian_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "char" <> "int8" AndAlso "char" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function little_endian_bytes(ByVal i As Char) As Byte()
        Return char_little_endian_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_little_endian_char(ByVal i() As Byte) As Char
#If "char" = "uint32" Then
        Return little_endian_bytes_char_(i)
#Else
        Return little_endian_bytes_char(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------
'finish bytes_dependent_types_impl.vbp --------

#If 0 Then


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types_impl.vbp ----------
'so change bytes_dependent_types_impl.vbp instead of this file



    Public Function bytes_uint32(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As UInt32) As Boolean
        Dim v As Int32 = int32_0
        If bytes_int32(i, ii, il, v) Then
            o = int32_uint32(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function uint32_bytes(ByVal i As UInt32) As Byte()
        Return int32_bytes(uint32_int32(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function bytes_uint32(
                        ByVal i() As Byte,
                        ByRef o As UInt32,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int32" <> "" Then
        size = sizeof_int32
#Else
        size = sizeof_uint32
#End If
        If bytes_uint32(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint32" = "uint32" Then
    Public Function bytes_uint32_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt32
#Else
    Public Function bytes_uint32(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt32
#End If
        Dim o As UInt32 = uint32_0
        assert(bytes_uint32(i, o, offset))
        Return o
    End Function

    Public Function entire_bytes_uint32(
                        ByVal i() As Byte,
                        ByRef o As UInt32) As Boolean
        Dim p As UInt32 = 0
        Return bytes_uint32(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_bytes_uint32(ByVal i() As Byte) As UInt32
        Dim o As UInt32 = uint32_0
        assert(entire_bytes_uint32(i, o))
        Return o
    End Function
    
    Public Function uint32_bytes(
                        ByVal i As UInt32,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int32" <> "" Then
        size = sizeof_int32
#Else
        size = sizeof_uint32
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = uint32_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint32" <> "int8" AndAlso "uint32" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function bytes(ByVal i As UInt32) As Byte()
        Return uint32_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_uint32(ByVal i() As Byte) As UInt32
#If "uint32" = "uint32" Then
        Return bytes_uint32_(i)
#Else
        Return bytes_uint32(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------

    Public Function big_endian_bytes_uint32(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As UInt32) As Boolean
        Dim v As Int32 = int32_0
        If big_endian_bytes_int32(i, ii, il, v) Then
            o = int32_uint32(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function uint32_big_endian_bytes(ByVal i As UInt32) As Byte()
        Return int32_big_endian_bytes(uint32_int32(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function big_endian_bytes_uint32(
                        ByVal i() As Byte,
                        ByRef o As UInt32,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int32" <> "" Then
        size = sizeof_int32
#Else
        size = sizeof_uint32
#End If
        If big_endian_bytes_uint32(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint32" = "uint32" Then
    Public Function big_endian_bytes_uint32_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt32
#Else
    Public Function big_endian_bytes_uint32(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt32
#End If
        Dim o As UInt32 = uint32_0
        assert(big_endian_bytes_uint32(i, o, offset))
        Return o
    End Function

    Public Function entire_big_endian_bytes_uint32(
                        ByVal i() As Byte,
                        ByRef o As UInt32) As Boolean
        Dim p As UInt32 = 0
        Return big_endian_bytes_uint32(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_big_endian_bytes_uint32(ByVal i() As Byte) As UInt32
        Dim o As UInt32 = uint32_0
        assert(entire_big_endian_bytes_uint32(i, o))
        Return o
    End Function
    
    Public Function uint32_big_endian_bytes(
                        ByVal i As UInt32,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int32" <> "" Then
        size = sizeof_int32
#Else
        size = sizeof_uint32
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = uint32_big_endian_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint32" <> "int8" AndAlso "uint32" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function big_endian_bytes(ByVal i As UInt32) As Byte()
        Return uint32_big_endian_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_big_endian_uint32(ByVal i() As Byte) As UInt32
#If "uint32" = "uint32" Then
        Return big_endian_bytes_uint32_(i)
#Else
        Return big_endian_bytes_uint32(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------

    Public Function little_endian_bytes_uint32(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As UInt32) As Boolean
        Dim v As Int32 = int32_0
        If little_endian_bytes_int32(i, ii, il, v) Then
            o = int32_uint32(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function uint32_little_endian_bytes(ByVal i As UInt32) As Byte()
        Return int32_little_endian_bytes(uint32_int32(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function little_endian_bytes_uint32(
                        ByVal i() As Byte,
                        ByRef o As UInt32,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int32" <> "" Then
        size = sizeof_int32
#Else
        size = sizeof_uint32
#End If
        If little_endian_bytes_uint32(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint32" = "uint32" Then
    Public Function little_endian_bytes_uint32_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt32
#Else
    Public Function little_endian_bytes_uint32(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt32
#End If
        Dim o As UInt32 = uint32_0
        assert(little_endian_bytes_uint32(i, o, offset))
        Return o
    End Function

    Public Function entire_little_endian_bytes_uint32(
                        ByVal i() As Byte,
                        ByRef o As UInt32) As Boolean
        Dim p As UInt32 = 0
        Return little_endian_bytes_uint32(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_little_endian_bytes_uint32(ByVal i() As Byte) As UInt32
        Dim o As UInt32 = uint32_0
        assert(entire_little_endian_bytes_uint32(i, o))
        Return o
    End Function
    
    Public Function uint32_little_endian_bytes(
                        ByVal i As UInt32,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int32" <> "" Then
        size = sizeof_int32
#Else
        size = sizeof_uint32
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = uint32_little_endian_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint32" <> "int8" AndAlso "uint32" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function little_endian_bytes(ByVal i As UInt32) As Byte()
        Return uint32_little_endian_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_little_endian_uint32(ByVal i() As Byte) As UInt32
#If "uint32" = "uint32" Then
        Return little_endian_bytes_uint32_(i)
#Else
        Return little_endian_bytes_uint32(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------
'finish bytes_dependent_types_impl.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_types_impl.vbp ----------
'so change bytes_dependent_types_impl.vbp instead of this file



    Public Function bytes_uint64(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As UInt64) As Boolean
        Dim v As Int64 = int64_0
        If bytes_int64(i, ii, il, v) Then
            o = int64_uint64(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function uint64_bytes(ByVal i As UInt64) As Byte()
        Return int64_bytes(uint64_int64(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function bytes_uint64(
                        ByVal i() As Byte,
                        ByRef o As UInt64,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int64" <> "" Then
        size = sizeof_int64
#Else
        size = sizeof_uint64
#End If
        If bytes_uint64(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint64" = "uint32" Then
    Public Function bytes_uint64_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt64
#Else
    Public Function bytes_uint64(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt64
#End If
        Dim o As UInt64 = uint64_0
        assert(bytes_uint64(i, o, offset))
        Return o
    End Function

    Public Function entire_bytes_uint64(
                        ByVal i() As Byte,
                        ByRef o As UInt64) As Boolean
        Dim p As UInt32 = 0
        Return bytes_uint64(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_bytes_uint64(ByVal i() As Byte) As UInt64
        Dim o As UInt64 = uint64_0
        assert(entire_bytes_uint64(i, o))
        Return o
    End Function
    
    Public Function uint64_bytes(
                        ByVal i As UInt64,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int64" <> "" Then
        size = sizeof_int64
#Else
        size = sizeof_uint64
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = uint64_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint64" <> "int8" AndAlso "uint64" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function bytes(ByVal i As UInt64) As Byte()
        Return uint64_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_uint64(ByVal i() As Byte) As UInt64
#If "uint64" = "uint32" Then
        Return bytes_uint64_(i)
#Else
        Return bytes_uint64(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------

    Public Function big_endian_bytes_uint64(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As UInt64) As Boolean
        Dim v As Int64 = int64_0
        If big_endian_bytes_int64(i, ii, il, v) Then
            o = int64_uint64(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function uint64_big_endian_bytes(ByVal i As UInt64) As Byte()
        Return int64_big_endian_bytes(uint64_int64(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function big_endian_bytes_uint64(
                        ByVal i() As Byte,
                        ByRef o As UInt64,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int64" <> "" Then
        size = sizeof_int64
#Else
        size = sizeof_uint64
#End If
        If big_endian_bytes_uint64(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint64" = "uint32" Then
    Public Function big_endian_bytes_uint64_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt64
#Else
    Public Function big_endian_bytes_uint64(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt64
#End If
        Dim o As UInt64 = uint64_0
        assert(big_endian_bytes_uint64(i, o, offset))
        Return o
    End Function

    Public Function entire_big_endian_bytes_uint64(
                        ByVal i() As Byte,
                        ByRef o As UInt64) As Boolean
        Dim p As UInt32 = 0
        Return big_endian_bytes_uint64(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_big_endian_bytes_uint64(ByVal i() As Byte) As UInt64
        Dim o As UInt64 = uint64_0
        assert(entire_big_endian_bytes_uint64(i, o))
        Return o
    End Function
    
    Public Function uint64_big_endian_bytes(
                        ByVal i As UInt64,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int64" <> "" Then
        size = sizeof_int64
#Else
        size = sizeof_uint64
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = uint64_big_endian_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint64" <> "int8" AndAlso "uint64" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function big_endian_bytes(ByVal i As UInt64) As Byte()
        Return uint64_big_endian_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_big_endian_uint64(ByVal i() As Byte) As UInt64
#If "uint64" = "uint32" Then
        Return big_endian_bytes_uint64_(i)
#Else
        Return big_endian_bytes_uint64(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------

    Public Function little_endian_bytes_uint64(
                        ByVal i() As Byte,
                        ByVal ii As UInt32,
                        ByVal il As UInt32,
                        ByRef o As UInt64) As Boolean
        Dim v As Int64 = int64_0
        If little_endian_bytes_int64(i, ii, il, v) Then
            o = int64_uint64(v)
            Return True
        Else
            Return False
        End If
    End Function

    Public Function uint64_little_endian_bytes(ByVal i As UInt64) As Byte()
        Return int64_little_endian_bytes(uint64_int64(i))
    End Function


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with bytes_dependent_impl.vbp ----------
'so change bytes_dependent_impl.vbp instead of this file


    Public Function little_endian_bytes_uint64(
                        ByVal i() As Byte,
                        ByRef o As UInt64,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int64" <> "" Then
        size = sizeof_int64
#Else
        size = sizeof_uint64
#End If
        If little_endian_bytes_uint64(i, offset, size, o) Then
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint64" = "uint32" Then
    Public Function little_endian_bytes_uint64_(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt64
#Else
    Public Function little_endian_bytes_uint64(
                        ByVal i() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As UInt64
#End If
        Dim o As UInt64 = uint64_0
        assert(little_endian_bytes_uint64(i, o, offset))
        Return o
    End Function

    Public Function entire_little_endian_bytes_uint64(
                        ByVal i() As Byte,
                        ByRef o As UInt64) As Boolean
        Dim p As UInt32 = 0
        Return little_endian_bytes_uint64(i, o, p) AndAlso
               p = array_size(i)
    End Function

    Public Function entire_little_endian_bytes_uint64(ByVal i() As Byte) As UInt64
        Dim o As UInt64 = uint64_0
        assert(entire_little_endian_bytes_uint64(i, o))
        Return o
    End Function
    
    Public Function uint64_little_endian_bytes(
                        ByVal i As UInt64,
                        ByVal d() As Byte,
                        Optional ByRef offset As UInt32 = uint32_0) As Boolean
        Dim size As UInt32 = 0
#If "int64" <> "" Then
        size = sizeof_int64
#Else
        size = sizeof_uint64
#End If
        If array_size(d) >= offset + size Then
#If IS_BYTE Then
            d(CInt(offset)) = i
#Else
            Dim t() As Byte = Nothing
            t = uint64_little_endian_bytes(i)
            arrays.copy(d, offset, t)
#End If
            offset += size
            Return True
        Else
            Return False
        End If
    End Function

#If "uint64" <> "int8" AndAlso "uint64" <> "uint8" Then
    ' There are no int8 and uint8 types.
    <Extension()> Public Function little_endian_bytes(ByVal i As UInt64) As Byte()
        Return uint64_little_endian_bytes(i)
    End Function
#End If

    <Extension()> Public Function as_little_endian_uint64(ByVal i() As Byte) As UInt64
#If "uint64" = "uint32" Then
        Return little_endian_bytes_uint64_(i)
#Else
        Return little_endian_bytes_uint64(i)
#End If
    End Function
'finish bytes_dependent_impl.vbp --------
'finish bytes_dependent_types_impl.vbp --------

#End If

End Module
'finish bytes_dependent_types.vbp --------
