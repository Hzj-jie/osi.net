
Option Explicit On
Option Infer Off
Option Strict On

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with minmax.vbp ----------
'so change minmax.vbp instead of this file


Imports System.Runtime.CompilerServices
Imports osi.root.constants

Public Module _minmax

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with minmax.1.vbp ----------
'so change minmax.1.vbp instead of this file


    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As Int32, ByVal s As Int32) As Int32
        Return If(f < s, f, s)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As Int32, ByVal s As Int32) As Int32
        Return If(f < s, s, f)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As Int32, ByVal s As Int32, ByVal ParamArray v() As Int32) As Int32
        Dim r As Int32 = min(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) < r Then
                r = v(i)
            End If
        Next
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As Int32, ByVal s As Int32, ByVal ParamArray v() As Int32) As Int32
        Dim r As Int32 = max(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) > r Then
                r = v(i)
            End If
        Next
        Return r
    End Function
'finish minmax.1.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with minmax.1.vbp ----------
'so change minmax.1.vbp instead of this file


    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As UInt32, ByVal s As UInt32) As UInt32
        Return If(f < s, f, s)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As UInt32, ByVal s As UInt32) As UInt32
        Return If(f < s, s, f)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As UInt32, ByVal s As UInt32, ByVal ParamArray v() As UInt32) As UInt32
        Dim r As UInt32 = min(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) < r Then
                r = v(i)
            End If
        Next
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As UInt32, ByVal s As UInt32, ByVal ParamArray v() As UInt32) As UInt32
        Dim r As UInt32 = max(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) > r Then
                r = v(i)
            End If
        Next
        Return r
    End Function
'finish minmax.1.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with minmax.1.vbp ----------
'so change minmax.1.vbp instead of this file


    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As Int64, ByVal s As Int64) As Int64
        Return If(f < s, f, s)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As Int64, ByVal s As Int64) As Int64
        Return If(f < s, s, f)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As Int64, ByVal s As Int64, ByVal ParamArray v() As Int64) As Int64
        Dim r As Int64 = min(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) < r Then
                r = v(i)
            End If
        Next
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As Int64, ByVal s As Int64, ByVal ParamArray v() As Int64) As Int64
        Dim r As Int64 = max(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) > r Then
                r = v(i)
            End If
        Next
        Return r
    End Function
'finish minmax.1.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with minmax.1.vbp ----------
'so change minmax.1.vbp instead of this file


    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As UInt64, ByVal s As UInt64) As UInt64
        Return If(f < s, f, s)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As UInt64, ByVal s As UInt64) As UInt64
        Return If(f < s, s, f)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As UInt64, ByVal s As UInt64, ByVal ParamArray v() As UInt64) As UInt64
        Dim r As UInt64 = min(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) < r Then
                r = v(i)
            End If
        Next
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As UInt64, ByVal s As UInt64, ByVal ParamArray v() As UInt64) As UInt64
        Dim r As UInt64 = max(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) > r Then
                r = v(i)
            End If
        Next
        Return r
    End Function
'finish minmax.1.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with minmax.1.vbp ----------
'so change minmax.1.vbp instead of this file


    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As Decimal, ByVal s As Decimal) As Decimal
        Return If(f < s, f, s)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As Decimal, ByVal s As Decimal) As Decimal
        Return If(f < s, s, f)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As Decimal, ByVal s As Decimal, ByVal ParamArray v() As Decimal) As Decimal
        Dim r As Decimal = min(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) < r Then
                r = v(i)
            End If
        Next
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As Decimal, ByVal s As Decimal, ByVal ParamArray v() As Decimal) As Decimal
        Dim r As Decimal = max(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) > r Then
                r = v(i)
            End If
        Next
        Return r
    End Function
'finish minmax.1.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with minmax.1.vbp ----------
'so change minmax.1.vbp instead of this file


    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As Int16, ByVal s As Int16) As Int16
        Return If(f < s, f, s)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As Int16, ByVal s As Int16) As Int16
        Return If(f < s, s, f)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As Int16, ByVal s As Int16, ByVal ParamArray v() As Int16) As Int16
        Dim r As Int16 = min(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) < r Then
                r = v(i)
            End If
        Next
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As Int16, ByVal s As Int16, ByVal ParamArray v() As Int16) As Int16
        Dim r As Int16 = max(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) > r Then
                r = v(i)
            End If
        Next
        Return r
    End Function
'finish minmax.1.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with minmax.1.vbp ----------
'so change minmax.1.vbp instead of this file


    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As UInt16, ByVal s As UInt16) As UInt16
        Return If(f < s, f, s)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As UInt16, ByVal s As UInt16) As UInt16
        Return If(f < s, s, f)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As UInt16, ByVal s As UInt16, ByVal ParamArray v() As UInt16) As UInt16
        Dim r As UInt16 = min(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) < r Then
                r = v(i)
            End If
        Next
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As UInt16, ByVal s As UInt16, ByVal ParamArray v() As UInt16) As UInt16
        Dim r As UInt16 = max(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) > r Then
                r = v(i)
            End If
        Next
        Return r
    End Function
'finish minmax.1.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with minmax.1.vbp ----------
'so change minmax.1.vbp instead of this file


    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As SByte, ByVal s As SByte) As SByte
        Return If(f < s, f, s)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As SByte, ByVal s As SByte) As SByte
        Return If(f < s, s, f)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As SByte, ByVal s As SByte, ByVal ParamArray v() As SByte) As SByte
        Dim r As SByte = min(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) < r Then
                r = v(i)
            End If
        Next
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As SByte, ByVal s As SByte, ByVal ParamArray v() As SByte) As SByte
        Dim r As SByte = max(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) > r Then
                r = v(i)
            End If
        Next
        Return r
    End Function
'finish minmax.1.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with minmax.1.vbp ----------
'so change minmax.1.vbp instead of this file


    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As Byte, ByVal s As Byte) As Byte
        Return If(f < s, f, s)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As Byte, ByVal s As Byte) As Byte
        Return If(f < s, s, f)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As Byte, ByVal s As Byte, ByVal ParamArray v() As Byte) As Byte
        Dim r As Byte = min(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) < r Then
                r = v(i)
            End If
        Next
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As Byte, ByVal s As Byte, ByVal ParamArray v() As Byte) As Byte
        Dim r As Byte = max(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) > r Then
                r = v(i)
            End If
        Next
        Return r
    End Function
'finish minmax.1.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with minmax.1.vbp ----------
'so change minmax.1.vbp instead of this file


    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As String, ByVal s As String) As String
        Return If(f < s, f, s)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As String, ByVal s As String) As String
        Return If(f < s, s, f)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(ByVal f As String, ByVal s As String, ByVal ParamArray v() As String) As String
        Dim r As String = min(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) < r Then
                r = v(i)
            End If
        Next
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(ByVal f As String, ByVal s As String, ByVal ParamArray v() As String) As String
        Dim r As String = max(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If v(i) > r Then
                r = v(i)
            End If
        Next
        Return r
    End Function
'finish minmax.1.vbp --------

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(Of T)(ByVal f As T, ByVal s As T) As T
        Return If(compare(f, s) < 0, f, s)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(Of T)(ByVal f As T, ByVal s As T) As T
        Return If(compare(f, s) < 0, s, f)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(Of T)(ByVal f As T, ByVal s As T, ByVal ParamArray v() As T) As T
        Dim r As T = min(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If compare(v(i), r) < 0 Then
                r = v(i)
            End If
        Next
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(Of T)(ByVal f As T, ByVal s As T, ByVal ParamArray v() As T) As T
        Dim r As T = max(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If compare(v(i), r) > 0 Then
                r = v(i)
            End If
        Next
        Return r
    End Function
End Module
'finish minmax.vbp --------
