
##DEFAULT TYPE Int32

' Represent a size. Can be invalid.
' int_size is for memory buffer. Allocating a byte array larger than 2G is not supported in .Net.
' size is for file or stream. Typically there is no size limitation for these resources.

#If "##TYPE##" = "SByte" Then
    Public Const size_invalid As Int32 = npos
#End If

    <Extension()> Public Function is_size(ByVal i As ##TYPE##) As Boolean
        Return i >= 0 OrElse i = size_invalid
    End Function

    <Extension()> Public Function is_int_size(ByVal i As ##TYPE##) As Boolean
        Return (i >= 0 AndAlso i <= max_int32) OrElse i = size_invalid
    End Function

    <Extension()> Public Function is_positive_size(ByVal i As ##TYPE##) As Boolean
        Return i > 0 OrElse i = size_invalid
    End Function

    <Extension()> Public Function is_positive_int_size(ByVal i As ##TYPE##) As Boolean
        Return (i > 0 AndAlso i <= max_int32) OrElse i = size_invalid
    End Function

    <Extension()> Public Sub assert_is_size(ByVal i As ##TYPE##)
        assert(i.is_size())
    End Sub

    <Extension()> Public Sub assert_is_int_size(ByVal i As ##TYPE##)
        assert(i.is_int_size())
    End Sub

    <Extension()> Public Sub assert_is_positive_size(ByVal i As ##TYPE##)
        assert(i.is_positive_size())
    End Sub

    <Extension()> Public Sub assert_is_positive_int_size(ByVal i As ##TYPE##)
        assert(i.is_positive_int_size())
    End Sub

    <Extension()> Public Function invalid_size(ByVal i As ##TYPE##) As Boolean
        i.assert_is_size()
        Return i = size_invalid
    End Function

    <Extension()> Public Function invalid_int_size(ByVal i As ##TYPE##) As Boolean
        i.assert_is_int_size()
        Return i = size_invalid
    End Function

    <Extension()> Public Function invalid_positive_size(ByVal i As ##TYPE##) As Boolean
        i.assert_is_positive_size()
        Return i = size_invalid
    End Function

    <Extension()> Public Function invalid_positive_int_size(ByVal i As ##TYPE##) As Boolean
        i.assert_is_positive_int_size()
        Return i = size_invalid
    End Function

    <Extension()> Public Function valid_size(ByVal i As ##TYPE##) As Boolean
        i.assert_is_size()
        Return i <> size_invalid
    End Function

    <Extension()> Public Function valid_int_size(ByVal i As ##TYPE##) As Boolean
        i.assert_is_int_size()
        Return i <> size_invalid
    End Function

    <Extension()> Public Function valid_positive_size(ByVal i As ##TYPE##) As Boolean
        i.assert_is_positive_size()
        Return i <> size_invalid
    End Function

    <Extension()> Public Function valid_positive_int_size(ByVal i As ##TYPE##) As Boolean
        i.assert_is_positive_int_size()
        Return i <> size_invalid
    End Function

    <Extension()> Public Function size(ByVal i As ##TYPE##) As UInt64
        i.assert_is_size()
        assert(i.valid_size())
        Return CULng(i)
    End Function

    <Extension()> Public Function int_size(ByVal i As ##TYPE##) As Int32
        i.assert_is_int_size()
        assert(i.valid_int_size())
        Return CInt(i)
    End Function

    <Extension()> Public Function positive_size(ByVal i As ##TYPE##) As UInt64
        i.assert_is_positive_size()
        assert(i.valid_size())
        Return CULng(i)
    End Function

    <Extension()> Public Function positive_int_size(ByVal i As ##TYPE##) As Int32
        i.assert_is_positive_int_size()
        assert(i.valid_positive_int_size())
        Return CInt(i)
    End Function

