
##DEFAULT TYPE npos_uint
##DEFAULT SIGNED_TYPE Int32
##DEFAULT CAST CUInt
##DEFAULT ZERO uint32_0
##DEFAULT MAX max_uint32
##DEFAULT HAS_NPOS True
##DEFAULT HAS_INF True
##DEFAULT HAS_VALUE True
##DEFAULT ACCEPT_ZERO True
##DEFAULT ACCEPT_MAX True

Imports System.IO
Imports osi.root.constants
Imports constants = osi.root.constants

Partial Public Structure ##TYPE##
    Implements IComparable, IComparable(Of ##TYPE##), ICloneable, ICloneable(Of ##TYPE##)

    Public Shared ReadOnly inf As ##TYPE## =
        Function() As ##TYPE##
            Dim inf As ##TYPE## = New ##TYPE##(constants.npos)
            assert(inf.npos())
            Return inf
        End Function()
    Public Shared ReadOnly zero As ##TYPE## =
        Function() As ##TYPE##
            Dim zero As ##TYPE## = New ##TYPE##(##ZERO##)
            If ##ACCEPT_ZERO## Then
                assert(Not zero.npos())
            Else
                assert(zero.npos())
            End If
            Return zero
        End Function()
    Public Shared ReadOnly sizeof_value As UInt32 = CUInt(sizeof(Of U##SIGNED_TYPE##)())

    <Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2207:InitializeValueTypeStaticFieldsInline")>
    Shared Sub New()
        assert(constants.npos < 0)
        Dim x As ##TYPE## = Nothing
        assert(Not x.npos())
        assert(x.raw_value() = ##ZERO##)

        bytes_serializer.fixed.register(
                Function(ByVal i As ##TYPE##, ByVal o As MemoryStream) As Boolean
                    #If Not ##ACCEPT_ZERO## Then
                        If i.npos() Then
                            Return bytes_serializer.append_to(##ZERO##, o)
                        End If
                        Return bytes_serializer.append_to(i.raw_value(), o)
                    #ElseIf Not ##ACCEPT_MAX## Then
                        If i.npos() Then
                            Return bytes_serializer.append_to(##MAX##, o)
                        End If
                        Return bytes_serializer.append_to(i.raw_value(), o)
                    #Else
                        If i.npos() Then
                            Return bytes_serializer.append_to(True, o)
                        End If
                        Return bytes_serializer.append_to(False, o) AndAlso
                               bytes_serializer.append_to(i.raw_value(), o)
                    #End If
                End Function,
                Function(ByVal i As MemoryStream, ByRef o As ##TYPE##) As Boolean
                    #If Not ##ACCEPT_ZERO## OrElse Not ##ACCEPT_MAX## Then
                        Dim u As U##SIGNED_TYPE## = ##ZERO##
                        If Not bytes_serializer.consume_from(i, u) Then
                            Return False
                        End If
                        o = New ##TYPE##(u)
                        Return True
                    #Else
                        Dim n As Boolean = False
                        If Not bytes_serializer.consume_from(i, n) Then
                            Return False
                        End If
                        If n Then
                            o = inf
                            Return True
                        End If
                        Dim u As U##SIGNED_TYPE## = ##ZERO##
                        If Not bytes_serializer.consume_from(i, u) Then
                            Return False
                        End If
                        o = New ##TYPE##(u)
                        Return True
                    #End If
                End Function)
    End Sub

    Private ReadOnly i As U##SIGNED_TYPE##
    Private ReadOnly n As Boolean

#If "##SIGNED_TYPE##" <> "SByte" Then
    ##DEFINE INPUT_SIGNED_TYPE SByte
    ##DEFINE INPUT_UNSIGNED_TYPE Byte
    ##INCLUDE npos_uint_ctor.vbp
#End If

#If "##SIGNED_TYPE##" <> "Int16" AndAlso "##SIGNED_TYPE##" <> "Short" Then
    ##DEFINE INPUT_SIGNED_TYPE Int16
    ##INCLUDE npos_uint_ctor.vbp
#End If

#If "##SIGNED_TYPE##" <> "Int32" AndAlso "##SIGNED_TYPE##" <> "Integer" Then
    ##DEFINE INPUT_SIGNED_TYPE Int32
    ##INCLUDE npos_uint_ctor.vbp
#End If

#If "##SIGNED_TYPE##" <> "Int64" AndAlso "##SIGNED_TYPE##" <> "Long" Then
    ##DEFINE INPUT_SIGNED_TYPE Int64
    ##INCLUDE npos_uint_ctor.vbp
#End If

#If "##SIGNED_TYPE##" <> "Decimal" Then
    ##DEFINE INPUT_SIGNED_TYPE Decimal
    ##DEFINE HAS_UNSIGNED_TYPE False
    ##INCLUDE npos_uint_ctor.vbp
#End If

##DEFINE INPUT_SIGNED_TYPE ##SIGNED_TYPE##
##INCLUDE npos_uint_ctor.vbp

    Public Sub New(ByVal that As ##TYPE##)
        i = that.i
        n = that.n
    End Sub

#If ##HAS_VALUE## Then
    Public Function value() As U##SIGNED_TYPE##
#If Not DEBUG Then
        assert(Not npos())
#End If
        Return raw_value()
    End Function
#End If

    Private Function raw_value() As U##SIGNED_TYPE##
#If DEBUG Then
        assert(Not npos())
#End If
        Return i
    End Function

#If ##HAS_NPOS## Then
    Public Function npos() As Boolean
#Else
    Private Function npos() As Boolean
#End If
        Return n
    End Function

#If ##HAS_INF## Then
    Public Function infinite() As Boolean
        Return npos()
    End Function
#End If

    Public Shared Operator =(ByVal this As ##TYPE##, ByVal that As ##TYPE##) As Boolean
        If this.npos() = that.npos() Then
            If this.npos() Then
                Return True
            End If
            Return this.raw_value() = that.raw_value()
        End If
        Return False
    End Operator

    Public Shared Operator <>(ByVal this As ##TYPE##, ByVal that As ##TYPE##) As Boolean
        Return Not (this = that)
    End Operator

    Public Shared Operator =(ByVal this As ##TYPE##, ByVal that As ##SIGNED_TYPE##) As Boolean
        If that < 0 AndAlso this.npos() Then
            Return True
        End If
        Return this.raw_value() = ##CAST##(that)
    End Operator

    Public Shared Operator <>(ByVal this As ##TYPE##, ByVal that As ##SIGNED_TYPE##) As Boolean
        Return Not (this = that)
    End Operator

    Public Shared Operator =(ByVal this As ##SIGNED_TYPE##, ByVal that As ##TYPE##) As Boolean
        Return that = this
    End Operator

    Public Shared Operator <>(ByVal this As ##SIGNED_TYPE##, ByVal that As ##TYPE##) As Boolean
        Return that <> this
    End Operator

    Public Shared Operator =(ByVal this As ##TYPE##, ByVal that As U##SIGNED_TYPE##) As Boolean
        If this.npos() Then
            Return False
        End If
        Return this.raw_value() = that
    End Operator

    Public Shared Operator <>(ByVal this As ##TYPE##, ByVal that As U##SIGNED_TYPE##) As Boolean
        Return Not (this = that)
    End Operator

    Public Shared Operator =(ByVal this As U##SIGNED_TYPE##, ByVal that As ##TYPE##) As Boolean
        Return that = this
    End Operator

    Public Shared Operator <>(ByVal this As U##SIGNED_TYPE##, ByVal that As ##TYPE##) As Boolean
        Return that <> this
    End Operator

    Public Shared Operator <(ByVal this As ##TYPE##, ByVal that As ##TYPE##) As Boolean
        If this.npos() Then
            Return False
        End If
        If that.npos() Then
            Return True
        End If
        Return this.raw_value() < that.raw_value()
    End Operator

    Public Shared Operator >(ByVal this As ##TYPE##, ByVal that As ##TYPE##) As Boolean
        If that.npos() Then
            Return False
        End If
        If this.npos() Then
            Return True
        End If
        Return this.raw_value() > that.raw_value()
    End Operator

    Public Shared Operator <(ByVal this As ##TYPE##, ByVal that As ##SIGNED_TYPE##) As Boolean
        If that <= 0 OrElse
           this.npos() OrElse
           this.raw_value() >= max_int32 Then
            Return False
        End If
        Return this.raw_value() < ##CAST##(that)
    End Operator

    Public Shared Operator >(ByVal this As ##TYPE##, ByVal that As ##SIGNED_TYPE##) As Boolean
        If that < 0 Then
            Return False
        End If
        If this.npos() OrElse this.raw_value() > max_int32 Then
            Return True
        End If
        Return this.raw_value() > ##CAST##(that)
    End Operator

    Public Shared Operator <(ByVal this As ##SIGNED_TYPE##, ByVal that As ##TYPE##) As Boolean
        Return that > this
    End Operator

    Public Shared Operator >(ByVal this As ##SIGNED_TYPE##, ByVal that As ##TYPE##) As Boolean
        Return that < this
    End Operator

    Public Shared Operator <(ByVal this As ##TYPE##, ByVal that As U##SIGNED_TYPE##) As Boolean
        If this.npos() Then
            Return False
        End If
        Return this.raw_value() < that
    End Operator

    Public Shared Operator >(ByVal this As ##TYPE##, ByVal that As U##SIGNED_TYPE##) As Boolean
        If this.npos() Then
            Return True
        End If
        Return this.raw_value() > that
    End Operator

    Public Shared Operator <(ByVal this As U##SIGNED_TYPE##, ByVal that As ##TYPE##) As Boolean
        Return that > this
    End Operator

    Public Shared Operator >(ByVal this As U##SIGNED_TYPE##, ByVal that As ##TYPE##) As Boolean
        Return that < this
    End Operator

    Public Shared Operator <=(ByVal this As ##TYPE##, ByVal that As ##TYPE##) As Boolean
        If that.npos() Then
            Return True
        End If
        If this.npos() Then
            Return False
        End If
        Return this.raw_value() <= that.raw_value()
    End Operator

    Public Shared Operator >=(ByVal this As ##TYPE##, ByVal that As ##TYPE##) As Boolean
        If this.npos() Then
            Return True
        End If
        If that.npos() Then
            Return False
        End If
        Return this.raw_value() >= that.raw_value()
    End Operator

    Public Shared Operator <=(ByVal this As ##TYPE##, ByVal that As ##SIGNED_TYPE##) As Boolean
        If that < 0 OrElse
           this.npos() OrElse
           this.raw_value() > max_int32 Then
            Return False
        End If
        Return this.raw_value() <= ##CAST##(that)
    End Operator

    Public Shared Operator >=(ByVal this As ##TYPE##, ByVal that As ##SIGNED_TYPE##) As Boolean
        If this.npos() Then
            Return True
        End If
        If that < 0 Then
            Return False
        End If
        If this.raw_value() >= max_int32 Then
            Return True
        End If
        Return this.raw_value() >= ##CAST##(that)
    End Operator

    Public Shared Operator <=(ByVal this As ##SIGNED_TYPE##, ByVal that As ##TYPE##) As Boolean
        Return that >= this
    End Operator

    Public Shared Operator >=(ByVal this As ##SIGNED_TYPE##, ByVal that As ##TYPE##) As Boolean
        Return that <= this
    End Operator

    Public Shared Operator <=(ByVal this As ##TYPE##, ByVal that As U##SIGNED_TYPE##) As Boolean
        If this.npos() Then
            Return False
        End If
        Return this.raw_value() <= that
    End Operator

    Public Shared Operator >=(ByVal this As ##TYPE##, ByVal that As U##SIGNED_TYPE##) As Boolean
        If this.npos() Then
            Return True
        End If
        Return this.raw_value() >= that
    End Operator

    Public Shared Operator <=(ByVal this As U##SIGNED_TYPE##, ByVal that As ##TYPE##) As Boolean
        Return that >= this
    End Operator

    Public Shared Operator >=(ByVal this As U##SIGNED_TYPE##, ByVal that As ##TYPE##) As Boolean
        Return that <= this
    End Operator

    Public Shared Widening Operator CType(ByVal this As ##TYPE##) As ##SIGNED_TYPE##
        If this.npos() Then
            Return constants.npos
        End If
        assert(this.raw_value() <= max_int32)
        Return CInt(this.raw_value())
    End Operator

    Public Shared Widening Operator CType(ByVal this As ##TYPE##) As U##SIGNED_TYPE##
        assert(Not this.npos())
        Return this.raw_value()
    End Operator

#If ##HAS_VALUE## Then
    Public Shared Operator +(Byval this As ##TYPE##) As U##SIGNED_TYPE##
        Return this.raw_value()
    End Operator    
#End If

    Public Overrides Function ToString() As String
        If npos() Then
            Return Convert.ToString(constants.npos)
        End If
        Return Convert.ToString(raw_value())
    End Function

    Public Function CompareTo(ByVal that As ##TYPE##) As Int32 Implements IComparable(Of ##TYPE##).CompareTo
        If npos() = that.npos() Then
            Return 0
        End If
        If npos() Then
            Return 1
        End If
        If that.npos() Then
            Return -1
        End If
        Return raw_value().CompareTo(that.raw_value())
    End Function

    Public Function CompareTo(ByVal that As Object) As Int32 Implements IComparable.CompareTo
        Dim other As ##TYPE## = Nothing
        If cast(Of ##TYPE##)(that, other) Then
            Return CompareTo(other)
        End If
        Return CompareTo(zero)
    End Function

    Public Function CloneT() As ##TYPE## Implements ICloneable(Of ##TYPE##).Clone
        Return New ##TYPE##(Me)
    End Function

    Public Function Clone() As Object Implements ICloneable.Clone
        Return CloneT()
    End Function
End Structure
