
'this file is generated by osi/root/codegen/array/array.exe
'so edit the osi/root/codegen/array/array.cpp instead of this file

Option Strict On

Imports System.Runtime.CompilerServices

Imports osi.root.constants


Public Module _array

#If Not DEBUG Then

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i() As Decimal) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.Length()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i() As Decimal) As Int32
        Return If(i Is Nothing, 0, i.Length())
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i() As Decimal) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.LongLength()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i() As Decimal) As Boolean
        Return i Is Nothing OrElse i.Length() = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i(,) As Decimal) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.GetLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i(,) As Decimal) As Int32
        Return If(i Is Nothing, 0, i.GetLength(0))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i(,) As Decimal) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.GetLongLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i(,) As Decimal) As Boolean
        Return i Is Nothing OrElse i.GetLength(0) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Decimal,
                           ByVal first_start As UInt32,
                           ByVal second() As Decimal,
                           ByVal second_start As UInt32,
                           ByVal len As UInt32) As Int32
        assert(array_size(first) >= first_start + len)
        assert(array_size(second) >= second_start + len)
        Dim fs As Int32 = CInt(first_start)
        Dim ss As Int32 = CInt(second_start)
        For i As Int32 = 0 To CInt(len) - 1
            Dim cmp As Int32 = 0
            cmp = compare(first(i + fs), second(i + ss))
            If cmp <> 0 Then
                Return cmp
            End If
        Next
        Return 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Decimal,
                           ByVal second() As Decimal,
                           ByVal len As UInt32) As Int32
        Return memcmp(first, uint32_0, second, uint32_0, len)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Decimal,
                           ByVal second() As Decimal) As Int32
        Dim ll As UInt32 = array_size(first)
        Dim rl As UInt32 = array_size(second)
        If ll <> rl Then
            Return compare(ll, rl)
        End If
        Return memcmp(first, second, ll)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function to_strings(ByVal i() As Decimal) As String()
        If isemptyarray(i) Then
            Return Nothing
        End If
        Dim r(array_size_i(i) - 1) As String
        For j As Int32 = 0 To array_size_i(i) - 1
            r(j) = Convert.ToString(i(j))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function with_strings(ByVal i As Decimal, ByVal ParamArray j() As Decimal) As String()
        Dim r(array_size_i(j)) As String
        r(0) = Convert.ToString(i)
        For k As Int32 = 0 To array_size_i(j) - 1
            r(k + 1) = Convert.ToString(j(k))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function start_with(ByVal first() As Decimal, ByVal second() As Decimal) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, second, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function end_with(ByVal first() As Decimal, ByVal second() As Decimal) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, array_size(first) - array_size(second), second, uint32_0, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function first(ByVal i() As Decimal) As Decimal
        assert(Not i.isemptyarray())
        Return i(0)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function last(ByVal i() As Decimal) As Decimal
        assert(Not i.isemptyarray())
        Return i(i.array_size_i() - 1)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i() As Int64) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.Length()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i() As Int64) As Int32
        Return If(i Is Nothing, 0, i.Length())
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i() As Int64) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.LongLength()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i() As Int64) As Boolean
        Return i Is Nothing OrElse i.Length() = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i(,) As Int64) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.GetLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i(,) As Int64) As Int32
        Return If(i Is Nothing, 0, i.GetLength(0))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i(,) As Int64) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.GetLongLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i(,) As Int64) As Boolean
        Return i Is Nothing OrElse i.GetLength(0) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Int64,
                           ByVal first_start As UInt32,
                           ByVal second() As Int64,
                           ByVal second_start As UInt32,
                           ByVal len As UInt32) As Int32
        assert(array_size(first) >= first_start + len)
        assert(array_size(second) >= second_start + len)
        Dim fs As Int32 = CInt(first_start)
        Dim ss As Int32 = CInt(second_start)
        For i As Int32 = 0 To CInt(len) - 1
            Dim cmp As Int32 = 0
            cmp = compare(first(i + fs), second(i + ss))
            If cmp <> 0 Then
                Return cmp
            End If
        Next
        Return 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Int64,
                           ByVal second() As Int64,
                           ByVal len As UInt32) As Int32
        Return memcmp(first, uint32_0, second, uint32_0, len)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Int64,
                           ByVal second() As Int64) As Int32
        Dim ll As UInt32 = array_size(first)
        Dim rl As UInt32 = array_size(second)
        If ll <> rl Then
            Return compare(ll, rl)
        End If
        Return memcmp(first, second, ll)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function to_strings(ByVal i() As Int64) As String()
        If isemptyarray(i) Then
            Return Nothing
        End If
        Dim r(array_size_i(i) - 1) As String
        For j As Int32 = 0 To array_size_i(i) - 1
            r(j) = Convert.ToString(i(j))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function with_strings(ByVal i As Int64, ByVal ParamArray j() As Int64) As String()
        Dim r(array_size_i(j)) As String
        r(0) = Convert.ToString(i)
        For k As Int32 = 0 To array_size_i(j) - 1
            r(k + 1) = Convert.ToString(j(k))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function start_with(ByVal first() As Int64, ByVal second() As Int64) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, second, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function end_with(ByVal first() As Int64, ByVal second() As Int64) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, array_size(first) - array_size(second), second, uint32_0, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function first(ByVal i() As Int64) As Int64
        assert(Not i.isemptyarray())
        Return i(0)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function last(ByVal i() As Int64) As Int64
        assert(Not i.isemptyarray())
        Return i(i.array_size_i() - 1)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i() As Int32) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.Length()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i() As Int32) As Int32
        Return If(i Is Nothing, 0, i.Length())
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i() As Int32) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.LongLength()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i() As Int32) As Boolean
        Return i Is Nothing OrElse i.Length() = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i(,) As Int32) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.GetLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i(,) As Int32) As Int32
        Return If(i Is Nothing, 0, i.GetLength(0))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i(,) As Int32) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.GetLongLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i(,) As Int32) As Boolean
        Return i Is Nothing OrElse i.GetLength(0) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Int32,
                           ByVal first_start As UInt32,
                           ByVal second() As Int32,
                           ByVal second_start As UInt32,
                           ByVal len As UInt32) As Int32
        assert(array_size(first) >= first_start + len)
        assert(array_size(second) >= second_start + len)
        Dim fs As Int32 = CInt(first_start)
        Dim ss As Int32 = CInt(second_start)
        For i As Int32 = 0 To CInt(len) - 1
            Dim cmp As Int32 = 0
            cmp = compare(first(i + fs), second(i + ss))
            If cmp <> 0 Then
                Return cmp
            End If
        Next
        Return 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Int32,
                           ByVal second() As Int32,
                           ByVal len As UInt32) As Int32
        Return memcmp(first, uint32_0, second, uint32_0, len)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Int32,
                           ByVal second() As Int32) As Int32
        Dim ll As UInt32 = array_size(first)
        Dim rl As UInt32 = array_size(second)
        If ll <> rl Then
            Return compare(ll, rl)
        End If
        Return memcmp(first, second, ll)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function to_strings(ByVal i() As Int32) As String()
        If isemptyarray(i) Then
            Return Nothing
        End If
        Dim r(array_size_i(i) - 1) As String
        For j As Int32 = 0 To array_size_i(i) - 1
            r(j) = Convert.ToString(i(j))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function with_strings(ByVal i As Int32, ByVal ParamArray j() As Int32) As String()
        Dim r(array_size_i(j)) As String
        r(0) = Convert.ToString(i)
        For k As Int32 = 0 To array_size_i(j) - 1
            r(k + 1) = Convert.ToString(j(k))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function start_with(ByVal first() As Int32, ByVal second() As Int32) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, second, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function end_with(ByVal first() As Int32, ByVal second() As Int32) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, array_size(first) - array_size(second), second, uint32_0, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function first(ByVal i() As Int32) As Int32
        assert(Not i.isemptyarray())
        Return i(0)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function last(ByVal i() As Int32) As Int32
        assert(Not i.isemptyarray())
        Return i(i.array_size_i() - 1)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i() As Int16) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.Length()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i() As Int16) As Int32
        Return If(i Is Nothing, 0, i.Length())
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i() As Int16) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.LongLength()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i() As Int16) As Boolean
        Return i Is Nothing OrElse i.Length() = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i(,) As Int16) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.GetLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i(,) As Int16) As Int32
        Return If(i Is Nothing, 0, i.GetLength(0))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i(,) As Int16) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.GetLongLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i(,) As Int16) As Boolean
        Return i Is Nothing OrElse i.GetLength(0) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Int16,
                           ByVal first_start As UInt32,
                           ByVal second() As Int16,
                           ByVal second_start As UInt32,
                           ByVal len As UInt32) As Int32
        assert(array_size(first) >= first_start + len)
        assert(array_size(second) >= second_start + len)
        Dim fs As Int32 = CInt(first_start)
        Dim ss As Int32 = CInt(second_start)
        For i As Int32 = 0 To CInt(len) - 1
            Dim cmp As Int32 = 0
            cmp = compare(first(i + fs), second(i + ss))
            If cmp <> 0 Then
                Return cmp
            End If
        Next
        Return 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Int16,
                           ByVal second() As Int16,
                           ByVal len As UInt32) As Int32
        Return memcmp(first, uint32_0, second, uint32_0, len)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Int16,
                           ByVal second() As Int16) As Int32
        Dim ll As UInt32 = array_size(first)
        Dim rl As UInt32 = array_size(second)
        If ll <> rl Then
            Return compare(ll, rl)
        End If
        Return memcmp(first, second, ll)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function to_strings(ByVal i() As Int16) As String()
        If isemptyarray(i) Then
            Return Nothing
        End If
        Dim r(array_size_i(i) - 1) As String
        For j As Int32 = 0 To array_size_i(i) - 1
            r(j) = Convert.ToString(i(j))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function with_strings(ByVal i As Int16, ByVal ParamArray j() As Int16) As String()
        Dim r(array_size_i(j)) As String
        r(0) = Convert.ToString(i)
        For k As Int32 = 0 To array_size_i(j) - 1
            r(k + 1) = Convert.ToString(j(k))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function start_with(ByVal first() As Int16, ByVal second() As Int16) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, second, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function end_with(ByVal first() As Int16, ByVal second() As Int16) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, array_size(first) - array_size(second), second, uint32_0, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function first(ByVal i() As Int16) As Int16
        assert(Not i.isemptyarray())
        Return i(0)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function last(ByVal i() As Int16) As Int16
        assert(Not i.isemptyarray())
        Return i(i.array_size_i() - 1)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i() As SByte) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.Length()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i() As SByte) As Int32
        Return If(i Is Nothing, 0, i.Length())
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i() As SByte) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.LongLength()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i() As SByte) As Boolean
        Return i Is Nothing OrElse i.Length() = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i(,) As SByte) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.GetLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i(,) As SByte) As Int32
        Return If(i Is Nothing, 0, i.GetLength(0))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i(,) As SByte) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.GetLongLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i(,) As SByte) As Boolean
        Return i Is Nothing OrElse i.GetLength(0) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As SByte,
                           ByVal first_start As UInt32,
                           ByVal second() As SByte,
                           ByVal second_start As UInt32,
                           ByVal len As UInt32) As Int32
        assert(array_size(first) >= first_start + len)
        assert(array_size(second) >= second_start + len)
        Dim fs As Int32 = CInt(first_start)
        Dim ss As Int32 = CInt(second_start)
        For i As Int32 = 0 To CInt(len) - 1
            Dim cmp As Int32 = 0
            cmp = compare(first(i + fs), second(i + ss))
            If cmp <> 0 Then
                Return cmp
            End If
        Next
        Return 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As SByte,
                           ByVal second() As SByte,
                           ByVal len As UInt32) As Int32
        Return memcmp(first, uint32_0, second, uint32_0, len)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As SByte,
                           ByVal second() As SByte) As Int32
        Dim ll As UInt32 = array_size(first)
        Dim rl As UInt32 = array_size(second)
        If ll <> rl Then
            Return compare(ll, rl)
        End If
        Return memcmp(first, second, ll)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function to_strings(ByVal i() As SByte) As String()
        If isemptyarray(i) Then
            Return Nothing
        End If
        Dim r(array_size_i(i) - 1) As String
        For j As Int32 = 0 To array_size_i(i) - 1
            r(j) = Convert.ToString(i(j))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function with_strings(ByVal i As SByte, ByVal ParamArray j() As SByte) As String()
        Dim r(array_size_i(j)) As String
        r(0) = Convert.ToString(i)
        For k As Int32 = 0 To array_size_i(j) - 1
            r(k + 1) = Convert.ToString(j(k))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function start_with(ByVal first() As SByte, ByVal second() As SByte) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, second, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function end_with(ByVal first() As SByte, ByVal second() As SByte) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, array_size(first) - array_size(second), second, uint32_0, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function first(ByVal i() As SByte) As SByte
        assert(Not i.isemptyarray())
        Return i(0)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function last(ByVal i() As SByte) As SByte
        assert(Not i.isemptyarray())
        Return i(i.array_size_i() - 1)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i() As UInt64) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.Length()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i() As UInt64) As Int32
        Return If(i Is Nothing, 0, i.Length())
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i() As UInt64) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.LongLength()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i() As UInt64) As Boolean
        Return i Is Nothing OrElse i.Length() = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i(,) As UInt64) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.GetLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i(,) As UInt64) As Int32
        Return If(i Is Nothing, 0, i.GetLength(0))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i(,) As UInt64) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.GetLongLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i(,) As UInt64) As Boolean
        Return i Is Nothing OrElse i.GetLength(0) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As UInt64,
                           ByVal first_start As UInt32,
                           ByVal second() As UInt64,
                           ByVal second_start As UInt32,
                           ByVal len As UInt32) As Int32
        assert(array_size(first) >= first_start + len)
        assert(array_size(second) >= second_start + len)
        Dim fs As Int32 = CInt(first_start)
        Dim ss As Int32 = CInt(second_start)
        For i As Int32 = 0 To CInt(len) - 1
            Dim cmp As Int32 = 0
            cmp = compare(first(i + fs), second(i + ss))
            If cmp <> 0 Then
                Return cmp
            End If
        Next
        Return 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As UInt64,
                           ByVal second() As UInt64,
                           ByVal len As UInt32) As Int32
        Return memcmp(first, uint32_0, second, uint32_0, len)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As UInt64,
                           ByVal second() As UInt64) As Int32
        Dim ll As UInt32 = array_size(first)
        Dim rl As UInt32 = array_size(second)
        If ll <> rl Then
            Return compare(ll, rl)
        End If
        Return memcmp(first, second, ll)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function to_strings(ByVal i() As UInt64) As String()
        If isemptyarray(i) Then
            Return Nothing
        End If
        Dim r(array_size_i(i) - 1) As String
        For j As Int32 = 0 To array_size_i(i) - 1
            r(j) = Convert.ToString(i(j))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function with_strings(ByVal i As UInt64, ByVal ParamArray j() As UInt64) As String()
        Dim r(array_size_i(j)) As String
        r(0) = Convert.ToString(i)
        For k As Int32 = 0 To array_size_i(j) - 1
            r(k + 1) = Convert.ToString(j(k))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function start_with(ByVal first() As UInt64, ByVal second() As UInt64) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, second, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function end_with(ByVal first() As UInt64, ByVal second() As UInt64) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, array_size(first) - array_size(second), second, uint32_0, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function first(ByVal i() As UInt64) As UInt64
        assert(Not i.isemptyarray())
        Return i(0)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function last(ByVal i() As UInt64) As UInt64
        assert(Not i.isemptyarray())
        Return i(i.array_size_i() - 1)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i() As UInt32) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.Length()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i() As UInt32) As Int32
        Return If(i Is Nothing, 0, i.Length())
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i() As UInt32) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.LongLength()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i() As UInt32) As Boolean
        Return i Is Nothing OrElse i.Length() = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i(,) As UInt32) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.GetLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i(,) As UInt32) As Int32
        Return If(i Is Nothing, 0, i.GetLength(0))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i(,) As UInt32) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.GetLongLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i(,) As UInt32) As Boolean
        Return i Is Nothing OrElse i.GetLength(0) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As UInt32,
                           ByVal first_start As UInt32,
                           ByVal second() As UInt32,
                           ByVal second_start As UInt32,
                           ByVal len As UInt32) As Int32
        assert(array_size(first) >= first_start + len)
        assert(array_size(second) >= second_start + len)
        Dim fs As Int32 = CInt(first_start)
        Dim ss As Int32 = CInt(second_start)
        For i As Int32 = 0 To CInt(len) - 1
            Dim cmp As Int32 = 0
            cmp = compare(first(i + fs), second(i + ss))
            If cmp <> 0 Then
                Return cmp
            End If
        Next
        Return 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As UInt32,
                           ByVal second() As UInt32,
                           ByVal len As UInt32) As Int32
        Return memcmp(first, uint32_0, second, uint32_0, len)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As UInt32,
                           ByVal second() As UInt32) As Int32
        Dim ll As UInt32 = array_size(first)
        Dim rl As UInt32 = array_size(second)
        If ll <> rl Then
            Return compare(ll, rl)
        End If
        Return memcmp(first, second, ll)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function to_strings(ByVal i() As UInt32) As String()
        If isemptyarray(i) Then
            Return Nothing
        End If
        Dim r(array_size_i(i) - 1) As String
        For j As Int32 = 0 To array_size_i(i) - 1
            r(j) = Convert.ToString(i(j))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function with_strings(ByVal i As UInt32, ByVal ParamArray j() As UInt32) As String()
        Dim r(array_size_i(j)) As String
        r(0) = Convert.ToString(i)
        For k As Int32 = 0 To array_size_i(j) - 1
            r(k + 1) = Convert.ToString(j(k))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function start_with(ByVal first() As UInt32, ByVal second() As UInt32) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, second, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function end_with(ByVal first() As UInt32, ByVal second() As UInt32) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, array_size(first) - array_size(second), second, uint32_0, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function first(ByVal i() As UInt32) As UInt32
        assert(Not i.isemptyarray())
        Return i(0)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function last(ByVal i() As UInt32) As UInt32
        assert(Not i.isemptyarray())
        Return i(i.array_size_i() - 1)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i() As UInt16) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.Length()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i() As UInt16) As Int32
        Return If(i Is Nothing, 0, i.Length())
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i() As UInt16) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.LongLength()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i() As UInt16) As Boolean
        Return i Is Nothing OrElse i.Length() = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i(,) As UInt16) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.GetLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i(,) As UInt16) As Int32
        Return If(i Is Nothing, 0, i.GetLength(0))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i(,) As UInt16) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.GetLongLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i(,) As UInt16) As Boolean
        Return i Is Nothing OrElse i.GetLength(0) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As UInt16,
                           ByVal first_start As UInt32,
                           ByVal second() As UInt16,
                           ByVal second_start As UInt32,
                           ByVal len As UInt32) As Int32
        assert(array_size(first) >= first_start + len)
        assert(array_size(second) >= second_start + len)
        Dim fs As Int32 = CInt(first_start)
        Dim ss As Int32 = CInt(second_start)
        For i As Int32 = 0 To CInt(len) - 1
            Dim cmp As Int32 = 0
            cmp = compare(first(i + fs), second(i + ss))
            If cmp <> 0 Then
                Return cmp
            End If
        Next
        Return 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As UInt16,
                           ByVal second() As UInt16,
                           ByVal len As UInt32) As Int32
        Return memcmp(first, uint32_0, second, uint32_0, len)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As UInt16,
                           ByVal second() As UInt16) As Int32
        Dim ll As UInt32 = array_size(first)
        Dim rl As UInt32 = array_size(second)
        If ll <> rl Then
            Return compare(ll, rl)
        End If
        Return memcmp(first, second, ll)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function to_strings(ByVal i() As UInt16) As String()
        If isemptyarray(i) Then
            Return Nothing
        End If
        Dim r(array_size_i(i) - 1) As String
        For j As Int32 = 0 To array_size_i(i) - 1
            r(j) = Convert.ToString(i(j))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function with_strings(ByVal i As UInt16, ByVal ParamArray j() As UInt16) As String()
        Dim r(array_size_i(j)) As String
        r(0) = Convert.ToString(i)
        For k As Int32 = 0 To array_size_i(j) - 1
            r(k + 1) = Convert.ToString(j(k))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function start_with(ByVal first() As UInt16, ByVal second() As UInt16) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, second, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function end_with(ByVal first() As UInt16, ByVal second() As UInt16) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, array_size(first) - array_size(second), second, uint32_0, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function first(ByVal i() As UInt16) As UInt16
        assert(Not i.isemptyarray())
        Return i(0)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function last(ByVal i() As UInt16) As UInt16
        assert(Not i.isemptyarray())
        Return i(i.array_size_i() - 1)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i() As Byte) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.Length()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i() As Byte) As Int32
        Return If(i Is Nothing, 0, i.Length())
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i() As Byte) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.LongLength()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i() As Byte) As Boolean
        Return i Is Nothing OrElse i.Length() = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i(,) As Byte) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.GetLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i(,) As Byte) As Int32
        Return If(i Is Nothing, 0, i.GetLength(0))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i(,) As Byte) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.GetLongLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i(,) As Byte) As Boolean
        Return i Is Nothing OrElse i.GetLength(0) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Byte,
                           ByVal first_start As UInt32,
                           ByVal second() As Byte,
                           ByVal second_start As UInt32,
                           ByVal len As UInt32) As Int32
        assert(array_size(first) >= first_start + len)
        assert(array_size(second) >= second_start + len)
        Dim fs As Int32 = CInt(first_start)
        Dim ss As Int32 = CInt(second_start)
        For i As Int32 = 0 To CInt(len) - 1
            Dim cmp As Int32 = 0
            cmp = compare(first(i + fs), second(i + ss))
            If cmp <> 0 Then
                Return cmp
            End If
        Next
        Return 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Byte,
                           ByVal second() As Byte,
                           ByVal len As UInt32) As Int32
        Return memcmp(first, uint32_0, second, uint32_0, len)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Byte,
                           ByVal second() As Byte) As Int32
        Dim ll As UInt32 = array_size(first)
        Dim rl As UInt32 = array_size(second)
        If ll <> rl Then
            Return compare(ll, rl)
        End If
        Return memcmp(first, second, ll)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function to_strings(ByVal i() As Byte) As String()
        If isemptyarray(i) Then
            Return Nothing
        End If
        Dim r(array_size_i(i) - 1) As String
        For j As Int32 = 0 To array_size_i(i) - 1
            r(j) = Convert.ToString(i(j))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function with_strings(ByVal i As Byte, ByVal ParamArray j() As Byte) As String()
        Dim r(array_size_i(j)) As String
        r(0) = Convert.ToString(i)
        For k As Int32 = 0 To array_size_i(j) - 1
            r(k + 1) = Convert.ToString(j(k))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function start_with(ByVal first() As Byte, ByVal second() As Byte) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, second, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function end_with(ByVal first() As Byte, ByVal second() As Byte) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, array_size(first) - array_size(second), second, uint32_0, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function first(ByVal i() As Byte) As Byte
        assert(Not i.isemptyarray())
        Return i(0)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function last(ByVal i() As Byte) As Byte
        assert(Not i.isemptyarray())
        Return i(i.array_size_i() - 1)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i() As Single) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.Length()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i() As Single) As Int32
        Return If(i Is Nothing, 0, i.Length())
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i() As Single) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.LongLength()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i() As Single) As Boolean
        Return i Is Nothing OrElse i.Length() = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i(,) As Single) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.GetLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i(,) As Single) As Int32
        Return If(i Is Nothing, 0, i.GetLength(0))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i(,) As Single) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.GetLongLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i(,) As Single) As Boolean
        Return i Is Nothing OrElse i.GetLength(0) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Single,
                           ByVal first_start As UInt32,
                           ByVal second() As Single,
                           ByVal second_start As UInt32,
                           ByVal len As UInt32) As Int32
        assert(array_size(first) >= first_start + len)
        assert(array_size(second) >= second_start + len)
        Dim fs As Int32 = CInt(first_start)
        Dim ss As Int32 = CInt(second_start)
        For i As Int32 = 0 To CInt(len) - 1
            Dim cmp As Int32 = 0
            cmp = compare(first(i + fs), second(i + ss))
            If cmp <> 0 Then
                Return cmp
            End If
        Next
        Return 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Single,
                           ByVal second() As Single,
                           ByVal len As UInt32) As Int32
        Return memcmp(first, uint32_0, second, uint32_0, len)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Single,
                           ByVal second() As Single) As Int32
        Dim ll As UInt32 = array_size(first)
        Dim rl As UInt32 = array_size(second)
        If ll <> rl Then
            Return compare(ll, rl)
        End If
        Return memcmp(first, second, ll)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function to_strings(ByVal i() As Single) As String()
        If isemptyarray(i) Then
            Return Nothing
        End If
        Dim r(array_size_i(i) - 1) As String
        For j As Int32 = 0 To array_size_i(i) - 1
            r(j) = Convert.ToString(i(j))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function with_strings(ByVal i As Single, ByVal ParamArray j() As Single) As String()
        Dim r(array_size_i(j)) As String
        r(0) = Convert.ToString(i)
        For k As Int32 = 0 To array_size_i(j) - 1
            r(k + 1) = Convert.ToString(j(k))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function start_with(ByVal first() As Single, ByVal second() As Single) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, second, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function end_with(ByVal first() As Single, ByVal second() As Single) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, array_size(first) - array_size(second), second, uint32_0, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function first(ByVal i() As Single) As Single
        assert(Not i.isemptyarray())
        Return i(0)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function last(ByVal i() As Single) As Single
        assert(Not i.isemptyarray())
        Return i(i.array_size_i() - 1)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i() As Double) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.Length()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i() As Double) As Int32
        Return If(i Is Nothing, 0, i.Length())
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i() As Double) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.LongLength()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i() As Double) As Boolean
        Return i Is Nothing OrElse i.Length() = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i(,) As Double) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.GetLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i(,) As Double) As Int32
        Return If(i Is Nothing, 0, i.GetLength(0))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i(,) As Double) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.GetLongLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i(,) As Double) As Boolean
        Return i Is Nothing OrElse i.GetLength(0) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Double,
                           ByVal first_start As UInt32,
                           ByVal second() As Double,
                           ByVal second_start As UInt32,
                           ByVal len As UInt32) As Int32
        assert(array_size(first) >= first_start + len)
        assert(array_size(second) >= second_start + len)
        Dim fs As Int32 = CInt(first_start)
        Dim ss As Int32 = CInt(second_start)
        For i As Int32 = 0 To CInt(len) - 1
            Dim cmp As Int32 = 0
            cmp = compare(first(i + fs), second(i + ss))
            If cmp <> 0 Then
                Return cmp
            End If
        Next
        Return 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Double,
                           ByVal second() As Double,
                           ByVal len As UInt32) As Int32
        Return memcmp(first, uint32_0, second, uint32_0, len)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As Double,
                           ByVal second() As Double) As Int32
        Dim ll As UInt32 = array_size(first)
        Dim rl As UInt32 = array_size(second)
        If ll <> rl Then
            Return compare(ll, rl)
        End If
        Return memcmp(first, second, ll)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function to_strings(ByVal i() As Double) As String()
        If isemptyarray(i) Then
            Return Nothing
        End If
        Dim r(array_size_i(i) - 1) As String
        For j As Int32 = 0 To array_size_i(i) - 1
            r(j) = Convert.ToString(i(j))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function with_strings(ByVal i As Double, ByVal ParamArray j() As Double) As String()
        Dim r(array_size_i(j)) As String
        r(0) = Convert.ToString(i)
        For k As Int32 = 0 To array_size_i(j) - 1
            r(k + 1) = Convert.ToString(j(k))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function start_with(ByVal first() As Double, ByVal second() As Double) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, second, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function end_with(ByVal first() As Double, ByVal second() As Double) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, array_size(first) - array_size(second), second, uint32_0, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function first(ByVal i() As Double) As Double
        assert(Not i.isemptyarray())
        Return i(0)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function last(ByVal i() As Double) As Double
        assert(Not i.isemptyarray())
        Return i(i.array_size_i() - 1)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i() As String) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.Length()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i() As String) As Int32
        Return If(i Is Nothing, 0, i.Length())
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i() As String) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.LongLength()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i() As String) As Boolean
        Return i Is Nothing OrElse i.Length() = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(ByVal i(,) As String) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.GetLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(ByVal i(,) As String) As Int32
        Return If(i Is Nothing, 0, i.GetLength(0))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(ByVal i(,) As String) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.GetLongLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(ByVal i(,) As String) As Boolean
        Return i Is Nothing OrElse i.GetLength(0) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As String,
                           ByVal first_start As UInt32,
                           ByVal second() As String,
                           ByVal second_start As UInt32,
                           ByVal len As UInt32) As Int32
        assert(array_size(first) >= first_start + len)
        assert(array_size(second) >= second_start + len)
        Dim fs As Int32 = CInt(first_start)
        Dim ss As Int32 = CInt(second_start)
        For i As Int32 = 0 To CInt(len) - 1
            Dim cmp As Int32 = 0
            cmp = compare(first(i + fs), second(i + ss))
            If cmp <> 0 Then
                Return cmp
            End If
        Next
        Return 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As String,
                           ByVal second() As String,
                           ByVal len As UInt32) As Int32
        Return memcmp(first, uint32_0, second, uint32_0, len)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(ByVal first() As String,
                           ByVal second() As String) As Int32
        Dim ll As UInt32 = array_size(first)
        Dim rl As UInt32 = array_size(second)
        If ll <> rl Then
            Return compare(ll, rl)
        End If
        Return memcmp(first, second, ll)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function to_strings(ByVal i() As String) As String()
        If isemptyarray(i) Then
            Return Nothing
        End If
        Dim r(array_size_i(i) - 1) As String
        For j As Int32 = 0 To array_size_i(i) - 1
            r(j) = Convert.ToString(i(j))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function with_strings(ByVal i As String, ByVal ParamArray j() As String) As String()
        Dim r(array_size_i(j)) As String
        r(0) = Convert.ToString(i)
        For k As Int32 = 0 To array_size_i(j) - 1
            r(k + 1) = Convert.ToString(j(k))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function start_with(ByVal first() As String, ByVal second() As String) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, second, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function end_with(ByVal first() As String, ByVal second() As String) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, array_size(first) - array_size(second), second, uint32_0, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function first(ByVal i() As String) As String
        assert(Not i.isemptyarray())
        Return i(0)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function last(ByVal i() As String) As String
        assert(Not i.isemptyarray())
        Return i(i.array_size_i() - 1)
    End Function

#End If

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(Of T)(ByVal i() As T) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.Length()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(Of T)(ByVal i() As T) As Int32
        Return If(i Is Nothing, 0, i.Length())
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(Of T)(ByVal i() As T) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.LongLength()))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(Of T)(ByVal i() As T) As Boolean
        Return i Is Nothing OrElse i.Length() = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size(Of T)(ByVal i(,) As T) As UInt32
        Return If(i Is Nothing, uint32_0, CUInt(i.GetLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_size_i(Of T)(ByVal i(,) As T) As Int32
        Return If(i Is Nothing, 0, i.GetLength(0))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function array_long_size(Of T)(ByVal i(,) As T) As UInt64
        Return If(i Is Nothing, uint32_0, CULng(i.GetLongLength(0)))
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function isemptyarray(Of T)(ByVal i(,) As T) As Boolean
        Return i Is Nothing OrElse i.GetLength(0) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(Of T)(ByVal first() As T,
                                 ByVal first_start As UInt32,
                                 ByVal second() As T,
                                 ByVal second_start As UInt32,
                                 ByVal len As UInt32) As Int32
        assert(array_size(first) >= first_start + len)
        assert(array_size(second) >= second_start + len)
        Dim fs As Int32 = CInt(first_start)
        Dim ss As Int32 = CInt(second_start)
        For i As Int32 = 0 To CInt(len) - 1
            Dim cmp As Int32 = 0
            cmp = compare(first(i + fs), second(i + ss))
            If cmp <> 0 Then
                Return cmp
            End If
        Next
        Return 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(Of T)(ByVal first() As T,
                                 ByVal second() As T,
                                 ByVal len As UInt32) As Int32
        Return memcmp(first, uint32_0, second, uint32_0, len)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function memcmp(Of T)(ByVal first() As T,
                                 ByVal second() As T) As Int32
        Dim ll As UInt32 = array_size(first)
        Dim rl As UInt32 = array_size(second)
        If ll <> rl Then
            Return compare(ll, rl)
        End If
        Return memcmp(first, second, ll)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function to_strings(Of T)(ByVal i() As T) As String()
        If isemptyarray(i) Then
            Return Nothing
        End If
        Dim r(array_size_i(i) - 1) As String
        For j As Int32 = 0 To array_size_i(i) - 1
            r(j) = Convert.ToString(i(j))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function with_strings(Of T)(ByVal i As T, ByVal ParamArray j() As T) As String()
        Dim r(array_size_i(j)) As String
        r(0) = Convert.ToString(i)
        For k As Int32 = 0 To array_size_i(j) - 1
            r(k + 1) = Convert.ToString(j(k))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function start_with(Of T)(ByVal first() As T, ByVal second() As T) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, second, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function end_with(Of T)(ByVal first() As T, ByVal second() As T) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, array_size(first) - array_size(second), second, uint32_0, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function first(Of T)(ByVal i() As T) As T
        assert(Not i.isemptyarray())
        Return i(0)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function last(Of T)(ByVal i() As T) As T
        assert(Not i.isemptyarray())
        Return i(i.array_size_i() - 1)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function to_strings(ByVal i() As Object) As String()
        If isemptyarray(i) Then
            Return Nothing
        End If
        Dim r(array_size_i(i) - 1) As String
        For j As Int32 = 0 To array_size_i(i) - 1
            r(j) = Convert.ToString(i(j))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function with_strings(ByVal i As Object, ByVal ParamArray j() As Object) As String()
        Dim r(array_size_i(j)) As String
        r(0) = Convert.ToString(i)
        For k As Int32 = 0 To array_size_i(j) - 1
            r(k + 1) = Convert.ToString(j(k))
        Next
        Return r
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function start_with(ByVal first() As Object, ByVal second() As Object) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, second, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function end_with(ByVal first() As Object, ByVal second() As Object) As Boolean
        If array_size(first) < array_size(second) Then
            Return False
        End If
        Return memcmp(first, array_size(first) - array_size(second), second, uint32_0, array_size(second)) = 0
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function first(ByVal i() As Object) As Object
        assert(Not i.isemptyarray())
        Return i(0)
    End Function

    <Extension()>
    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function last(ByVal i() As Object) As Object
        assert(Not i.isemptyarray())
        Return i(i.array_size_i() - 1)
    End Function

End Module
