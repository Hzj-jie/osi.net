
Imports System.Runtime.CompilerServices
Imports osi.root.constants

Public Module _minmax
##DEFINE TYPE Int32
##INCLUDE minmax.1.vbp

##DEFINE TYPE UInt32
##INCLUDE minmax.1.vbp

##DEFINE TYPE Int64
##INCLUDE minmax.1.vbp

##DEFINE TYPE UInt64
##INCLUDE minmax.1.vbp

##DEFINE TYPE Decimal
##INCLUDE minmax.1.vbp

##DEFINE TYPE Int16
##INCLUDE minmax.1.vbp

##DEFINE TYPE UInt16
##INCLUDE minmax.1.vbp

##DEFINE TYPE SByte
##INCLUDE minmax.1.vbp

##DEFINE TYPE Byte
##INCLUDE minmax.1.vbp

##DEFINE TYPE String
##INCLUDE minmax.1.vbp

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(Of T)(ByVal f As T, ByVal s As T) As T
        Return If(compare(f, s) < 0, f, s)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(Of T)(ByVal f As T, ByVal s As T) As T
        Return If(compare(f, s) < 0, s, f)
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function min(Of T)(ByVal f As T, ByVal s As T, ByVal ParamArray v() As T) As T
        Dim r As T = min(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If compare(v(i), r) < 0 Then
                r = v(i)
            End If
        Next
        Return r
    End Function

    <MethodImpl(method_impl_options.aggressive_inlining)>
    Public Function max(Of T)(ByVal f As T, ByVal s As T, ByVal ParamArray v() As T) As T
        Dim r As T = max(f, s)
        For i As Int32 = 0 To array_size_i(v) - 1
            If compare(v(i), r) > 0 Then
                r = v(i)
            End If
        Next
        Return r
    End Function
End Module
