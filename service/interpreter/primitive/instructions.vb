
' This file is generated by commands-parser, with commands.txt file.
' So change commands-parser or commands.txt instead of this file.

Option Explicit On
Option Infer Off
Option Strict On

Imports System.Text
Imports osi.root.constants
Imports osi.root.connector
Imports osi.root.formation

Namespace primitive
    Namespace instructions
        Partial Public NotInheritable Class [push]
            Implements instruction, IComparable, IComparable(Of [push])

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                b = array_concat(uint32_bytes(command.push))
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.push))
                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.push)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.push))
                p += uint32_1
                Return True
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [push])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [push]) As Int32 Implements IComparable(Of [push]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function
        End Class

        Partial Public NotInheritable Class [pop]
            Implements instruction, IComparable, IComparable(Of [pop])

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                b = array_concat(uint32_bytes(command.pop))
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.pop))
                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.pop)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.pop))
                p += uint32_1
                Return True
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [pop])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [pop]) As Int32 Implements IComparable(Of [pop]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function
        End Class

        Partial Public NotInheritable Class [jump]
            Implements instruction, IComparable, IComparable(Of [jump])

            Private ReadOnly d0 As data_ref

            Public Sub New()
                d0 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref)
                Me.d0 = d0
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.jump),
                                 b0)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.jump))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.jump) AndAlso
                       d0.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.jump))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [jump])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [jump]) As Int32 Implements IComparable(Of [jump]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [cpc]
            Implements instruction, IComparable, IComparable(Of [cpc])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_block

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_block()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_block)
                Me.d0 = d0
                Me.d1 = d1
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.cpc),
                                 b0,
                                 b1)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.cpc))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.cpc) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.cpc))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [cpc])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [cpc]) As Int32 Implements IComparable(Of [cpc]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [mov]
            Implements instruction, IComparable, IComparable(Of [mov])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.mov),
                                 b0,
                                 b1)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.mov))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.mov) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.mov))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [mov])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [mov]) As Int32 Implements IComparable(Of [mov]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [cp]
            Implements instruction, IComparable, IComparable(Of [cp])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.cp),
                                 b0,
                                 b1)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.cp))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.cp) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.cp))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [cp])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [cp]) As Int32 Implements IComparable(Of [cp]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [add]
            Implements instruction, IComparable, IComparable(Of [add])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.add),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.add))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.add) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.add))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [add])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [add]) As Int32 Implements IComparable(Of [add]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [sub]
            Implements instruction, IComparable, IComparable(Of [sub])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.sub),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.sub))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.sub) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.sub))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [sub])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [sub]) As Int32 Implements IComparable(Of [sub]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [mul]
            Implements instruction, IComparable, IComparable(Of [mul])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.mul),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.mul))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.mul) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.mul))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [mul])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [mul]) As Int32 Implements IComparable(Of [mul]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [div]
            Implements instruction, IComparable, IComparable(Of [div])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref
            Private ReadOnly d3 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
                d3 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref,
                       ByVal d3 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
                Me.d3 = d3
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size() +
                       d3.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                Dim b3() As Byte = Nothing
                If Not d3.export(b3) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.div),
                                 b0,
                                 b1,
                                 b2,
                                 b3)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.div))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d3.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.div) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p) AndAlso
                       d3.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.div))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p) AndAlso
                       d3.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [div])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [div]) As Int32 Implements IComparable(Of [div]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d3.CompareTo(other.d3)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p3(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d3)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [ext]
            Implements instruction, IComparable, IComparable(Of [ext])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref
            Private ReadOnly d3 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
                d3 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref,
                       ByVal d3 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
                Me.d3 = d3
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size() +
                       d3.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                Dim b3() As Byte = Nothing
                If Not d3.export(b3) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.ext),
                                 b0,
                                 b1,
                                 b2,
                                 b3)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.ext))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d3.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.ext) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p) AndAlso
                       d3.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.ext))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p) AndAlso
                       d3.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [ext])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [ext]) As Int32 Implements IComparable(Of [ext]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d3.CompareTo(other.d3)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p3(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d3)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [pow]
            Implements instruction, IComparable, IComparable(Of [pow])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.pow),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.pow))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.pow) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.pow))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [pow])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [pow]) As Int32 Implements IComparable(Of [pow]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [jumpif]
            Implements instruction, IComparable, IComparable(Of [jumpif])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.jumpif),
                                 b0,
                                 b1)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.jumpif))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.jumpif) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.jumpif))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [jumpif])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [jumpif]) As Int32 Implements IComparable(Of [jumpif]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [cpco]
            Implements instruction, IComparable, IComparable(Of [cpco])

            Private ReadOnly d0 As data_ref

            Public Sub New()
                d0 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref)
                Me.d0 = d0
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.cpco),
                                 b0)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.cpco))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.cpco) AndAlso
                       d0.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.cpco))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [cpco])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [cpco]) As Int32 Implements IComparable(Of [cpco]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [cpdbz]
            Implements instruction, IComparable, IComparable(Of [cpdbz])

            Private ReadOnly d0 As data_ref

            Public Sub New()
                d0 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref)
                Me.d0 = d0
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.cpdbz),
                                 b0)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.cpdbz))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.cpdbz) AndAlso
                       d0.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.cpdbz))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [cpdbz])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [cpdbz]) As Int32 Implements IComparable(Of [cpdbz]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [cpin]
            Implements instruction, IComparable, IComparable(Of [cpin])

            Private ReadOnly d0 As data_ref

            Public Sub New()
                d0 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref)
                Me.d0 = d0
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.cpin),
                                 b0)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.cpin))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.cpin) AndAlso
                       d0.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.cpin))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [cpin])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [cpin]) As Int32 Implements IComparable(Of [cpin]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [stop]
            Implements instruction, IComparable, IComparable(Of [stop])

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                b = array_concat(uint32_bytes(command.stop))
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.stop))
                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.stop)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.stop))
                p += uint32_1
                Return True
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [stop])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [stop]) As Int32 Implements IComparable(Of [stop]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function
        End Class

        Partial Public NotInheritable Class [equal]
            Implements instruction, IComparable, IComparable(Of [equal])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.equal),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.equal))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.equal) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.equal))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [equal])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [equal]) As Int32 Implements IComparable(Of [equal]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [less]
            Implements instruction, IComparable, IComparable(Of [less])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.less),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.less))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.less) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.less))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [less])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [less]) As Int32 Implements IComparable(Of [less]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [app]
            Implements instruction, IComparable, IComparable(Of [app])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.app),
                                 b0,
                                 b1)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.app))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.app) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.app))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [app])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [app]) As Int32 Implements IComparable(Of [app]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [sapp]
            Implements instruction, IComparable, IComparable(Of [sapp])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.sapp),
                                 b0,
                                 b1)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.sapp))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.sapp) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.sapp))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [sapp])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [sapp]) As Int32 Implements IComparable(Of [sapp]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [cut]
            Implements instruction, IComparable, IComparable(Of [cut])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.cut),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.cut))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.cut) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.cut))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [cut])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [cut]) As Int32 Implements IComparable(Of [cut]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [cutl]
            Implements instruction, IComparable, IComparable(Of [cutl])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref
            Private ReadOnly d3 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
                d3 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref,
                       ByVal d3 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
                Me.d3 = d3
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size() +
                       d3.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                Dim b3() As Byte = Nothing
                If Not d3.export(b3) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.cutl),
                                 b0,
                                 b1,
                                 b2,
                                 b3)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.cutl))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d3.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.cutl) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p) AndAlso
                       d3.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.cutl))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p) AndAlso
                       d3.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [cutl])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [cutl]) As Int32 Implements IComparable(Of [cutl]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d3.CompareTo(other.d3)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p3(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d3)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [int]
            Implements instruction, IComparable, IComparable(Of [int])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.int),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.int))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.int) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.int))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [int])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [int]) As Int32 Implements IComparable(Of [int]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [clr]
            Implements instruction, IComparable, IComparable(Of [clr])

            Private ReadOnly d0 As data_ref

            Public Sub New()
                d0 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref)
                Me.d0 = d0
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.clr),
                                 b0)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.clr))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.clr) AndAlso
                       d0.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.clr))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [clr])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [clr]) As Int32 Implements IComparable(Of [clr]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [scut]
            Implements instruction, IComparable, IComparable(Of [scut])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.scut),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.scut))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.scut) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.scut))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [scut])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [scut]) As Int32 Implements IComparable(Of [scut]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [sizeof]
            Implements instruction, IComparable, IComparable(Of [sizeof])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.sizeof),
                                 b0,
                                 b1)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.sizeof))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.sizeof) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.sizeof))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [sizeof])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [sizeof]) As Int32 Implements IComparable(Of [sizeof]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [empty]
            Implements instruction, IComparable, IComparable(Of [empty])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.empty),
                                 b0,
                                 b1)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.empty))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.empty) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.empty))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [empty])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [empty]) As Int32 Implements IComparable(Of [empty]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [and]
            Implements instruction, IComparable, IComparable(Of [and])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.and),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.and))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.and) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.and))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [and])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [and]) As Int32 Implements IComparable(Of [and]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [or]
            Implements instruction, IComparable, IComparable(Of [or])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.or),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.or))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.or) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.or))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [or])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [or]) As Int32 Implements IComparable(Of [or]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [not]
            Implements instruction, IComparable, IComparable(Of [not])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.not),
                                 b0,
                                 b1)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.not))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.not) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.not))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [not])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [not]) As Int32 Implements IComparable(Of [not]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [stst]
            Implements instruction, IComparable, IComparable(Of [stst])

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                b = array_concat(uint32_bytes(command.stst))
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.stst))
                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.stst)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.stst))
                p += uint32_1
                Return True
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [stst])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [stst]) As Int32 Implements IComparable(Of [stst]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function
        End Class

        Partial Public NotInheritable Class [rest]
            Implements instruction, IComparable, IComparable(Of [rest])

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                b = array_concat(uint32_bytes(command.rest))
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.rest))
                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.rest)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.rest))
                p += uint32_1
                Return True
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [rest])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [rest]) As Int32 Implements IComparable(Of [rest]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function
        End Class

        Partial Public NotInheritable Class [fadd]
            Implements instruction, IComparable, IComparable(Of [fadd])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.fadd),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.fadd))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.fadd) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.fadd))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [fadd])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [fadd]) As Int32 Implements IComparable(Of [fadd]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [fsub]
            Implements instruction, IComparable, IComparable(Of [fsub])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.fsub),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.fsub))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.fsub) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.fsub))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [fsub])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [fsub]) As Int32 Implements IComparable(Of [fsub]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [fmul]
            Implements instruction, IComparable, IComparable(Of [fmul])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.fmul),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.fmul))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.fmul) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.fmul))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [fmul])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [fmul]) As Int32 Implements IComparable(Of [fmul]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [fdiv]
            Implements instruction, IComparable, IComparable(Of [fdiv])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.fdiv),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.fdiv))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.fdiv) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.fdiv))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [fdiv])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [fdiv]) As Int32 Implements IComparable(Of [fdiv]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [fext]
            Implements instruction, IComparable, IComparable(Of [fext])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.fext),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.fext))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.fext) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.fext))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [fext])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [fext]) As Int32 Implements IComparable(Of [fext]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [fpow]
            Implements instruction, IComparable, IComparable(Of [fpow])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.fpow),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.fpow))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.fpow) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.fpow))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [fpow])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [fpow]) As Int32 Implements IComparable(Of [fpow]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [fequal]
            Implements instruction, IComparable, IComparable(Of [fequal])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.fequal),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.fequal))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.fequal) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.fequal))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [fequal])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [fequal]) As Int32 Implements IComparable(Of [fequal]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [fless]
            Implements instruction, IComparable, IComparable(Of [fless])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.fless),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.fless))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.fless) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.fless))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [fless])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [fless]) As Int32 Implements IComparable(Of [fless]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [lfs]
            Implements instruction, IComparable, IComparable(Of [lfs])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.lfs),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.lfs))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.lfs) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.lfs))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [lfs])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [lfs]) As Int32 Implements IComparable(Of [lfs]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [rfs]
            Implements instruction, IComparable, IComparable(Of [rfs])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref
            Private ReadOnly d2 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
                d2 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref,
                       ByVal d2 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
                Me.d2 = d2
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size() +
                       d2.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                Dim b2() As Byte = Nothing
                If Not d2.export(b2) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.rfs),
                                 b0,
                                 b1,
                                 b2)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.rfs))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d2.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.rfs) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p) AndAlso
                       d2.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.rfs))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p) AndAlso
                       d2.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [rfs])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [rfs]) As Int32 Implements IComparable(Of [rfs]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d2.CompareTo(other.d2)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p2(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d2)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [alloc]
            Implements instruction, IComparable, IComparable(Of [alloc])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.alloc),
                                 b0,
                                 b1)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.alloc))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.alloc) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.alloc))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [alloc])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [alloc]) As Int32 Implements IComparable(Of [alloc]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [dealloc]
            Implements instruction, IComparable, IComparable(Of [dealloc])

            Private ReadOnly d0 As data_ref

            Public Sub New()
                d0 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref)
                Me.d0 = d0
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.dealloc),
                                 b0)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.dealloc))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.dealloc) AndAlso
                       d0.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.dealloc))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [dealloc])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [dealloc]) As Int32 Implements IComparable(Of [dealloc]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [hmovin]
            Implements instruction, IComparable, IComparable(Of [hmovin])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.hmovin),
                                 b0,
                                 b1)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.hmovin))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.hmovin) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.hmovin))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [hmovin])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [hmovin]) As Int32 Implements IComparable(Of [hmovin]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

        Partial Public NotInheritable Class [hmovout]
            Implements instruction, IComparable, IComparable(Of [hmovout])

            Private ReadOnly d0 As data_ref
            Private ReadOnly d1 As data_ref

            Public Sub New()
                d0 = New data_ref()
                d1 = New data_ref()
            End Sub

            Public Sub New( _
                       ByVal d0 As data_ref,
                       ByVal d1 As data_ref)
                Me.d0 = d0
                Me.d1 = d1
            End Sub

            Public Function bytes_size() As UInt32 Implements exportable.bytes_size
                Return sizeof_uint32 +
                       d0.bytes_size() +
                       d1.bytes_size()
            End Function

            Public Function export(ByRef b() As Byte) As Boolean Implements exportable.export
                Dim b0() As Byte = Nothing
                If Not d0.export(b0) Then
                    Return False
                End If
                Dim b1() As Byte = Nothing
                If Not d1.export(b1) Then
                    Return False
                End If
                b = array_concat(uint32_bytes(command.hmovout),
                                 b0,
                                 b1)
                Return True
            End Function

            Public Function export(ByRef s As String) As Boolean Implements exportable.export
                Dim b As New StringBuilder()
                b.Append(command_str(command.hmovout))
                If Not d0.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                If Not d1.export(s) Then
                    Return False
                End If
                b.Append(character.blank)
                b.Append(s)

                s = Convert.ToString(b)
                Return True
            End Function

            Public Function import(ByVal i() As Byte, ByRef p As UInt32) As Boolean Implements exportable.import
                Dim o As UInt32 = 0
                Return assert(bytes_uint32(i, o, p) AndAlso o = command.hmovout) AndAlso
                       d0.import(i, p) AndAlso
                       d1.import(i, p)
            End Function

            Public Function import(s As vector(Of String), ByRef p As UInt32) As Boolean Implements exportable.import
                assert(Not s.null_or_empty() AndAlso s.size() > p)
                assert(s(p) = command_str(command.hmovout))
                p += uint32_1
                Return True AndAlso
                       d0.import(s, p) AndAlso
                       d1.import(s, p)
            End Function

            Public Function CompareTo(ByVal obj As Object) As Int32 Implements IComparable.CompareTo
                Return CompareTo(cast(Of [hmovout])(obj, False))
            End Function

            Public Function CompareTo(ByVal other As [hmovout]) As Int32 Implements IComparable(Of [hmovout]).CompareTo
                Dim c As Int32 = object_compare(Me, other)
                If c <> object_compare_undetermined Then
                    Return c
                End If
                assert(Not other Is Nothing)
                c = Me.d0.CompareTo(other.d0)
                If c <> 0 Then
                    Return c
                End If

                c = Me.d1.CompareTo(other.d1)
                If c <> 0 Then
                    Return c
                End If

                Return 0
            End Function

            Public Overrides Function ToString() As String
                Dim s As String = Nothing
                assert(export(s))
                Return s
            End Function

            Private Function p0(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d0)
                assert(Not p Is Nothing)
                Return p
            End Function

            Private Function p1(ByVal imi As imitation) As ref(Of Byte())
                assert(Not imi Is Nothing)
                Dim p As ref(Of Byte()) = imi.access_stack(d1)
                assert(Not p Is Nothing)
                Return p
            End Function
        End Class

    End Namespace
End Namespace
