
' This file is generated by commands-parser, with commands.txt file.
' So change commands-parser or commands.txt instead of this file.

Namespace primitive
    Public Enum command As UInt32
        ' push a data slot in to stack 
        [push]
        ' pop a data slot from stack 
        [pop]
        ' push (*A uint) data slots in to stack 
        [pushm]
        ' pop (*A uint) data slots from stack 
        [popm]
        ' jump to instruction @A 
        [jump]
        ' (*A big_uint) = (*B big_uint) + (*C big_uint) 
        [add]
        ' (*A big_uint) = (*B big_uint) - (*C big_uint) 
        [sub]
        ' (*A) = B 
        [movc]
        ' (*A) = (*B) 
        [mov]
        ' (*A big_uint) = (*B big_uint) * (*C big_uint) 
        [mul]
        ' (*A big_uint) = (*C big_uint) / (*D big_uint) (*B big_uint) = (*C big_uint) % (*D big_uint) 
        [div]
        ' (*A big_uint) = extract((*C big_uint), (*D big_uint)) (*B big_uint) = remainder(extract((*C big_uint), (*D big_uint))) 
        [ext]
        ' (*A big_uint) = pow((*B big_uint), (*C big_uint)) 
        [pow]
        ' jump to instruction @A, if (*B bool) is true 
        [jumpif]
        ' (*A) = IP 
        [cpip]
        ' (*A) = CO 
        [cpco]
        ' (*A) = DBZ 
        [cpdbz]
        ' (*A) = IN 
        [cpin]
        ' finish execution, and leave the executor in a stop but not error status. 
        [stop]
        ' (*A) = ((*B big_uint) == (*C big_uint)) 
        [equal]
        ' (*A) = ((*B big_uint) < (*C big_uint)) 
        [less]
        ' (*A) = ((*B big_uint) <= (*C big_uint)) 
        [leeq]
        ' (*A) += (*B) 
        [app]
        ' (*A) += sizeof(*B) + (*B) 
        [sapp]
        ' (*A) = sub-array(src=(*B uint), from=(*C uint)) 
        [cut]
        ' (*A) = sub-array(src=(*B), from=(*C uint), len=(*D uint)) 
        [cutl]
        ' execute an external function (*A uint), with parameter (*B), return value will be set to (*C) 
        [extern]
        ' set (*A) to empty array 
        [clr]
        ' (*A) = the (*C uint) chunk of (*B) 
        [scut]
        ' (*A) = array-size(*B) 
        [sizeof]
        ' (*A) = ((*B) == null) 
        [empty]
        ' (*A big_uint) = (*B big_uint) AND (*C big_uint) 
        [and]
        ' (*A big_uint) = (*B big_uint) OR (*C big_uint) 
        [or]
        ' (*A big_uint) = NOT (*B big_uint) 
        [not]

        COUNT
    End Enum
End Namespace
