
push	#push a data slot in to stack
pop	#pop a data slot from stack
jump	data_ref	#jump to instruction @A
cpc	data_ref	data_block	#(*A) = B
mov	data_ref	data_ref	#(*A) = (*B), clr B
cp	data_ref	data_ref	#(*A) = (*B)
add	data_ref	data_ref	data_ref	#(*A big_uint) = (*B big_uint) + (*C big_uint)
sub	data_ref	data_ref	data_ref	#(*A big_uint) = (*B big_uint) - (*C big_uint)
mul	data_ref	data_ref	data_ref	#(*A big_uint) = (*B big_uint) * (*C big_uint)
div	data_ref	data_ref	data_ref	data_ref	#(*A big_uint) = (*C big_uint) / (*D big_uint) (*B big_uint) = (*C big_uint) % (*D big_uint)
ext	data_ref	data_ref	data_ref	data_ref	#(*A big_uint) = extract((*C big_uint), (*D big_uint)) (*B big_uint) = remainder(extract((*C big_uint), (*D big_uint)))
pow	data_ref	data_ref	data_ref	#(*A big_uint) = pow((*B big_uint), (*C big_uint))
jumpif	data_ref	data_ref	#jump to instruction @A, if (*B bool) is true
cpco	data_ref	#(*A) = CO
cpdbz	data_ref	#(*A) = DBZ
cpin	data_ref	#(*A) = IN
stop	#finish execution, and leave the executor in a stop but not error state.
equal	data_ref	data_ref	data_ref	#(*A) = ((*B big_uint) == (*C big_uint))
less	data_ref	data_ref	data_ref	#(*A) = ((*B big_uint) < (*C big_uint))
app	data_ref	data_ref	#(*A) += (*B)
sapp	data_ref	data_ref	#(*A) += sizeof(*B) + (*B)
cut	data_ref	data_ref	data_ref	#(*A) = sub-array(src=(*B), from=(*C uint))
cutl	data_ref	data_ref	data_ref	data_ref	#(*A) = sub-array(src=(*B), from=(*C uint), len=(*D uint))
int	data_ref	data_ref	data_ref	#execute an interrupt function (*A uint), with parameter (*B), return value will be set to (*C)
clr	data_ref	#set (*A) to empty array
scut	data_ref	data_ref	data_ref	#(*A) = the (*C uint) chunk of (*B)
sizeof	data_ref	data_ref	#(*A) = array-size(*B)
empty	data_ref	data_ref	#(*A) = ((*B) == null)
and	data_ref	data_ref	data_ref	#(*A big_uint) = (*B big_uint) AND (*C big_uint)
or	data_ref	data_ref	data_ref	#(*A big_uint) = (*B big_uint) OR (*C big_uint)
not	data_ref	data_ref	#(*A big_uint) = NOT (*B big_uint)
stst	#push current state into states, such as IP_AFTER_THIS_INSTRUCTION, i.e. IP + 1, Stack Size, a typical usage is [ stst, jump ? ]
rest	#pop extra (StackSize - states.top.StackSize) slots from stack, and jump to instruction @(* states.top.IP uint64)

fadd	data_ref	data_ref	data_ref	#(*A big_udec) = (*B big_udec) + (*B big_udec)
fsub	data_ref	data_ref	data_ref	#(*A big_udec) = (*B big_udec) - (*B big_udec)
fmul	data_ref	data_ref	data_ref	#(*A big_udec) = (*B big_udec) * (*B big_udec)
fdiv	data_ref	data_ref	data_ref	#(*A big_udec) = (*B big_udec) / (*C big_udec)
fext	data_ref	data_ref	data_ref	#(*A big_udec) = extract((*B big_udec), (*C big_udec)) 
fpow	data_ref	data_ref	data_ref	#(*A big_udec) = pow((*B big_udec), (*B big_udec))
fequal	data_ref	data_ref	data_ref	#(*A) = ((*B big_udec) == (*C big_udec))
fless	data_ref	data_ref	data_ref	#(*A) = ((*B big_udec) < (*C big_udec))
