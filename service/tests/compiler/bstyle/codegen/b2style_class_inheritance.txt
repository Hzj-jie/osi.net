typedef Integer int ;
  logic "type long 8" ;
  typedef Boolean bool ;
  logic "type byte 1" ;
  typedef BigUnsignedInteger biguint ;
  typedef BigUnsignedFloat ufloat ;
  typedef String string ;
  typedef type0 void ;
     logic "define @@prefixes@constants@int_0 Integer" ;
  logic "copy_const @@prefixes@constants@int_0 i0" ;
  logic "define @@prefixes@constants@int_1 Integer" ;
  logic "copy_const @@prefixes@constants@int_1 i1" ;
  logic "define @@prefixes@constants@size_of_int Integer" ;
  logic "copy_const @@prefixes@constants@size_of_int i4" ;
  logic "define @@prefixes@constants@size_of_long Integer" ;
  logic "copy_const @@prefixes@constants@size_of_long i8" ;
  logic "define @@prefixes@constants@size_of_bool Integer" ;
  logic "copy_const @@prefixes@constants@size_of_bool i1" ;
  logic "define @@prefixes@constants@size_of_byte Integer" ;
  logic "copy_const @@prefixes@constants@size_of_byte i1" ;
  logic "define @@prefixes@constants@size_of_float Integer" ;
  logic "copy_const @@prefixes@constants@size_of_float i16" ;
  logic "define @@prefixes@constants@eof Integer" ;
  logic "copy_const @@prefixes@constants@eof i-1" ;
  logic "define @@prefixes@constants@ptr_offset type_ptr" ;
  logic "copy_const @@prefixes@constants@ptr_offset l4294967296" ;
  logic "define @@prefixes@temps@biguint BigUnsignedInteger" ;
  logic "define @@prefixes@temps@string String" ;
          typedef string b2style__string ;
  typedef void b2style__void ;
  typedef bool b2style__bool ;
  typedef biguint b2style__biguint ;
  typedef long b2style__long ;
  typedef int b2style__int ;
  typedef byte b2style__byte ;
  typedef ufloat b2style__ufloat ;
       biguint to_biguint ( int i ) { return i ;
 }  biguint to_biguint ( long i ) { return i ;
 }  long to_long ( int i ) { return i ;
 }  long fit_in_long ( long & x ) { logic "cut_len x x @@prefixes@constants@int_0 @@prefixes@constants@size_of_long" ;
 return x ;
 }  int fit_in_int ( int & x ) { logic "cut_len x x @@prefixes@constants@int_0 @@prefixes@constants@size_of_int" ;
 return x ;
 }  byte fit_in_byte ( byte & x ) { logic "cut_len x x @@prefixes@constants@int_0 @@prefixes@constants@size_of_byte" ;
 return x ;
 }  long to_long ( biguint x ) { long y ;
 logic "cut_len y x @@prefixes@constants@int_0 @@prefixes@constants@size_of_long" ;
 return y ;
 }      bool equal ( biguint i , biguint j ) { bool result ;
 logic "equal result i j" ;
 return result ;
 }  bool equal ( long i , long j ) { return equal ( to_biguint ( i ) , to_biguint ( j ) ) ;
 }  bool equal ( int i , int j ) { return equal ( to_biguint ( i ) , to_biguint ( j ) ) ;
 }       string str_concat ( string i , string j ) { logic "append i j" ;
 return i ;
 }  string str_concat ( string i , string j , string k ) { return str_concat ( str_concat ( i , j ) , k ) ;
 }  string str_concat ( string i , byte j ) { logic "append i j" ;
 return i ;
 }  string to_str ( byte i ) { string s ;
 return str_concat ( s , i ) ;
 }      bool str_equal ( string i , string j ) { bool result ;
 logic "equal result i j" ;
 return result ;
 }     b2style__bool b2style__or ( b2style__bool b2style__i , b2style__bool b2style__j ) { if ( b2style__i ) return true ;
 if ( b2style__j ) return true ;
 return false ;
 }  b2style__bool b2style__not ( b2style__bool b2style__i ) { if ( b2style__i ) return false ;
 return true ;
 }    b2style__bool b2style__equal ( b2style__string b2style__i , b2style__string b2style__j ) { return str_equal ( b2style__i , b2style__j ) ;
 }    b2style__bool b2style__equal ( b2style__biguint b2style__i , b2style__biguint b2style__j ) { return equal ( b2style__i , b2style__j ) ;
 }    b2style__bool b2style__equal ( b2style__long b2style__i , b2style__long b2style__j ) { return equal ( b2style__i , b2style__j ) ;
 }    b2style__bool b2style__equal ( b2style__int b2style__i , b2style__int b2style__j ) { return equal ( b2style__i , b2style__j ) ;
 }    b2style__bool b2style__equal ( b2style__bool b2style__i , b2style__bool b2style__j ) { if ( b2style__i ) return b2style__j ;
 return b2style__not ( b2style__j ) ;
 }          b2style__bool b2style__less_than ( b2style__biguint b2style__i , b2style__biguint b2style__j ) { b2style__bool b2style__result ;
  logic "less b2style__result b2style__i b2style__j" ;
 return b2style__result ;
 }  b2style__bool b2style__less_than ( b2style__long b2style__i , b2style__long b2style__j ) { return b2style__less_than ( to_biguint ( b2style__i ) , to_biguint ( b2style__j ) ) ;
 }  b2style__bool b2style__less_than ( b2style__int b2style__i , b2style__int b2style__j ) { return b2style__less_than ( to_biguint ( b2style__i ) , to_biguint ( b2style__j ) ) ;
 }  b2style__bool b2style__less_or_equal ( b2style__biguint b2style__i , b2style__biguint b2style__j ) { return b2style__or ( b2style__less_than ( b2style__i , b2style__j ) , b2style__equal ( b2style__i , b2style__j ) ) ;
 }  b2style__bool b2style__less_or_equal ( b2style__long b2style__i , b2style__long b2style__j ) { return b2style__or ( b2style__less_than ( b2style__i , b2style__j ) , b2style__equal ( b2style__i , b2style__j ) ) ;
 }  b2style__bool b2style__less_or_equal ( b2style__int b2style__i , b2style__int b2style__j ) { return b2style__or ( b2style__less_than ( b2style__i , b2style__j ) , b2style__equal ( b2style__i , b2style__j ) ) ;
 }        b2style__biguint b2style__add ( b2style__biguint b2style__i , b2style__biguint b2style__j ) {  logic "add b2style__i b2style__i b2style__j" ;
 return b2style__i ;
 }  b2style__long b2style__add ( b2style__long b2style__i , b2style__long b2style__j ) {  logic "add b2style__i b2style__i b2style__j" ;
 return fit_in_long ( b2style__i ) ;
 }  b2style__int b2style__add ( b2style__int b2style__i , b2style__int b2style__j ) {  logic "add b2style__i b2style__i b2style__j" ;
 return fit_in_int ( b2style__i ) ;
 }  b2style__byte b2style__add ( b2style__byte b2style__i , b2style__byte b2style__j ) {  logic "add b2style__i b2style__i b2style__j" ;
 return fit_in_byte ( b2style__i ) ;
 }  b2style__string b2style__add ( b2style__string b2style__i , b2style__string b2style__j ) { return str_concat ( b2style__i , b2style__j ) ;
 }  b2style__biguint b2style__minus ( b2style__biguint b2style__i , b2style__biguint b2style__j ) {  logic "subtract b2style__i b2style__i b2style__j" ;
 return b2style__i ;
 }  b2style__long b2style__minus ( b2style__long b2style__i , b2style__long b2style__j ) {  logic "subtract b2style__i b2style__i b2style__j" ;
 return fit_in_long ( b2style__i ) ;
 }  b2style__int b2style__minus ( b2style__int b2style__i , b2style__int b2style__j ) {  logic "subtract b2style__i b2style__i b2style__j" ;
 return fit_in_int ( b2style__i ) ;
 }                                                                                          b2style__void b2style__self_add ( b2style__biguint & b2style__i , b2style__biguint b2style__j ) { b2style__i = b2style__add ( b2style__i , b2style__j ) ;
 }  b2style__void b2style__self_add ( b2style__long & b2style__i , b2style__long b2style__j ) { b2style__i = b2style__add ( b2style__i , b2style__j ) ;
 }  b2style__void b2style__self_add ( b2style__int & b2style__i , b2style__int b2style__j ) { b2style__i = b2style__add ( b2style__i , b2style__j ) ;
 }  b2style__void b2style__self_add ( b2style__byte & b2style__i , b2style__byte b2style__j ) { b2style__i = b2style__add ( b2style__i , b2style__j ) ;
 }  b2style__void b2style__self_minus ( b2style__biguint & b2style__i , b2style__biguint b2style__j ) { b2style__i = b2style__minus ( b2style__i , b2style__j ) ;
 }  b2style__void b2style__self_minus ( b2style__long & b2style__i , b2style__long b2style__j ) { b2style__i = b2style__minus ( b2style__i , b2style__j ) ;
 }  b2style__void b2style__self_minus ( b2style__int & b2style__i , b2style__int b2style__j ) { b2style__i = b2style__minus ( b2style__i , b2style__j ) ;
 }                                                              void load_method ( string m ) { m = str_concat ( "osi.service.interpreter.primitive.loaded_methods, osi.service.interpreter:" , m ) ;
 logic "interrupt load_method m @@prefixes@temps@string" ;
 }   b2style__void b2style__load_method ( b2style__string b2style__m ) { load_method ( b2style__m ) ;
 }                 int INT_MIN = -2147483648 ;
  int INT_MAX = 2147483647 ;
  long LONG_MAX = to_long ( 9223372036854775807L ) ;
   b2style__string b2style__to_str ( b2style__string b2style__i ) { return b2style__i ;
 }  b2style__string b2style__to_str ( b2style__byte b2style__i ) { return to_str ( b2style__i ) ;
 }  b2style__string b2style__to_str ( b2style__bool b2style__i ) { if ( b2style__i ) return "True" ;
 return "False" ;
 }    b2style__string b2style__execute_loaded_method____b2style__biguint____b2style__string ( b2style__biguint b2style__p ) { b2style__string b2style__result ;
   logic "interrupt execute_loaded_method b2style__p b2style__result" ;
 return b2style__result ;
 } b2style__string b2style__biguint_to_str ( b2style__biguint b2style__i ) { b2style__load_method ( "big_uint_to_str" ) ;
 return b2style__execute_loaded_method____b2style__biguint____b2style__string ( b2style__i ) ;
 }  b2style__string b2style__to_str ( b2style__biguint b2style__i ) { return b2style__biguint_to_str ( b2style__i ) ;
 }   b2style__string b2style__biguint_to_str_forward____b2style__int ( b2style__int b2style__i , b2style__int b2style__MAX ) { if ( b2style__less_or_equal ( b2style__i , b2style__MAX ) ) { return b2style__biguint_to_str ( to_biguint ( b2style__i ) ) ;
 } b2style__self_minus ( b2style__i , b2style__MAX ) ;
 b2style__i = b2style__minus ( b2style__MAX , b2style__i ) ;
 b2style__int b2style___2 = 2 ;
 b2style__self_add ( b2style__i , b2style___2 ) ;
 return str_concat ( "-" , b2style__biguint_to_str ( to_biguint ( b2style__i ) ) ) ;
 } b2style__string b2style__int_to_str ( b2style__int b2style__i ) { return b2style__biguint_to_str_forward____b2style__int ( b2style__i , INT_MAX ) ;
 }  b2style__string b2style__execute_loaded_method____b2style__ufloat____b2style__string ( b2style__ufloat b2style__p ) { b2style__string b2style__result ;
   logic "interrupt execute_loaded_method b2style__p b2style__result" ;
 return b2style__result ;
 } b2style__string b2style__ufloat_to_str ( b2style__ufloat b2style__i ) { b2style__load_method ( "big_udec_to_str" ) ;
 return b2style__execute_loaded_method____b2style__ufloat____b2style__string ( b2style__i ) ;
 }  b2style__string b2style__biguint_to_str_forward____b2style__long ( b2style__long b2style__i , b2style__long b2style__MAX ) { if ( b2style__less_or_equal ( b2style__i , b2style__MAX ) ) { return b2style__biguint_to_str ( to_biguint ( b2style__i ) ) ;
 } b2style__self_minus ( b2style__i , b2style__MAX ) ;
 b2style__i = b2style__minus ( b2style__MAX , b2style__i ) ;
 b2style__long b2style___2 = 2 ;
 b2style__self_add ( b2style__i , b2style___2 ) ;
 return str_concat ( "-" , b2style__biguint_to_str ( to_biguint ( b2style__i ) ) ) ;
 } b2style__string b2style__long_to_str ( b2style__long b2style__i ) { return b2style__biguint_to_str_forward____b2style__long ( b2style__i , LONG_MAX ) ;
 }  b2style__string b2style__to_str ( b2style__int b2style__i ) { return b2style__int_to_str ( b2style__i ) ;
 }  b2style__string b2style__to_str ( b2style__ufloat b2style__i ) { return b2style__ufloat_to_str ( b2style__i ) ;
 }  b2style__string b2style__to_str ( b2style__long b2style__i ) { return b2style__long_to_str ( b2style__i ) ;
 }              void std_out ( string i ) { logic "interrupt stdout i @@prefixes@temps@string" ;
 }     b2style__void b2style__std_out ( b2style__string b2style__i ) { std_out ( b2style__i ) ;
 }      b2style__void b2style__std_out____b2style__bool ( b2style__bool b2style__i ) { b2style__std_out ( b2style__to_str ( b2style__i ) ) ;
 } b2style__void b2style__std_out ( b2style__bool b2style__i ) { b2style__std_out____b2style__bool ( b2style__i ) ;
 }     b2style__void b2style__std_out____b2style__int ( b2style__int b2style__i ) { b2style__std_out ( b2style__to_str ( b2style__i ) ) ;
 } b2style__void b2style__std_out ( b2style__int b2style__i ) { b2style__std_out____b2style__int ( b2style__i ) ;
 }     b2style__void b2style__std_out____b2style__biguint ( b2style__biguint b2style__i ) { b2style__std_out ( b2style__to_str ( b2style__i ) ) ;
 } b2style__void b2style__std_out ( b2style__biguint b2style__i ) { b2style__std_out____b2style__biguint ( b2style__i ) ;
 }                                 b2style__bool b2style__equal ( b2style__ufloat b2style__i , b2style__ufloat b2style__j ) { b2style__bool b2style__result ;
  logic "float_equal b2style__result b2style__i b2style__j" ;
 return b2style__result ;
 }      b2style__bool b2style__less_than ( b2style__ufloat b2style__i , b2style__ufloat b2style__j ) { b2style__bool b2style__result ;
  logic "float_less b2style__result b2style__i b2style__j" ;
 return b2style__result ;
 }  b2style__ufloat b2style__add ( b2style__ufloat b2style__i , b2style__ufloat b2style__j ) {  logic "float_add b2style__i b2style__i b2style__j" ;
 return b2style__i ;
 }  b2style__ufloat b2style__minus ( b2style__ufloat b2style__i , b2style__ufloat b2style__j ) {  logic "float_subtract b2style__i b2style__i b2style__j" ;
 return b2style__i ;
 }          b2style__bool b2style__less_or_equal ( b2style__ufloat b2style__i , b2style__ufloat b2style__j ) { return b2style__or ( b2style__less_than ( b2style__i , b2style__j ) , b2style__equal ( b2style__i , b2style__j ) ) ;
 }  b2style__void b2style__std_out ( b2style__ufloat b2style__i ) { b2style__std_out ( b2style__ufloat_to_str ( b2style__i ) ) ;
 }            b2style__void b2style__self_add ( b2style__ufloat & b2style__i , b2style__ufloat b2style__j ) { b2style__i = b2style__add ( b2style__i , b2style__j ) ;
 }  b2style__void b2style__self_minus ( b2style__ufloat & b2style__i , b2style__ufloat b2style__j ) { b2style__i = b2style__minus ( b2style__i , b2style__j ) ;
 }         typedef string b2style__ufloat__string ;
  typedef void b2style__ufloat__void ;
  typedef bool b2style__ufloat__bool ;
  typedef biguint b2style__ufloat__biguint ;
  typedef long b2style__ufloat__long ;
  typedef int b2style__ufloat__int ;
  typedef byte b2style__ufloat__byte ;
  typedef ufloat b2style__ufloat__ufloat ;
                         struct B { int x ;
 } ;
  int f ( B & this ) { return this.x ;
 }  void f2 ( B & this ) { b2style__std_out ( "f2" ) ;
 }       struct C { int y ;
 int x ;
 B__struct__type__id__type B__struct__type__id ;
 } ;
  int f ( C & this ) { return b2style__add ( this.x , this.y ) ;
 }      void f2 ( C & this ) { reinterpret_cast ( this , B ) ;
 f2 ( this ) ;
 }  void main ( ) { C c ;
 c.x = 1 ;
 c.y = 2 ;
 b2style__std_out ( f ( c ) ) ;
 f2 ( c ) ;
 reinterpret_cast ( c , B ) ;
 b2style__std_out ( f ( c ) ) ;
 f2 ( c ) ;
 }