
#include <b2style.h>
#include <testing.h>
#include <assert.h>

template <T>
class linked_node {
  T v;
  type_ptr _next;

  void construct() {
    this._next = 0;
  }
};

template <T>
class linked_iterator {
  type_ptr p;

  void construct(type_ptr p) {
    assert(__STATEMENT__ + " @" + __FILE__, p != 0);
	this.p = p;
  }

  void set(T v) {
    type_ptr t = this.p;
	static_cast(t, linked_node<T>);
	t[0] = v;
  }

  T get() {
    type_ptr t = this.p;
	static_cast(t, linked_node<T>);
	return t[0].v;
  }
};

template <T>
class linked_list {
  T v;
  type_ptr _next;

  void construct() {
    this._next = 0;
  }

  void create_next(T v) {
    T n[1];
    n[0].v = v;
    static_cast(n, type_ptr);
    this._next = n;
    undefine(n);
  }

  linked_iterator<T> next() {
    linked_iterator<T> it(this._next);
	return it;
  }
};

void main() {
  linked_node<int> l();
  linked_node<int> c = l;
  for (int i = 0; i < 10; i++) {
  }
}