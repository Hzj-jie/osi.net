
Option Explicit On
Option Infer Off
Option Strict On

'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with default_bytes_convertor_binder_initializer.vbp ----------
'so change default_bytes_convertor_binder_initializer.vbp instead of this file


Imports osi.root.constants
Imports osi.root.delegates
Imports osi.root.connector

<global_init(global_init_level.services)>
Friend Class default_bytes_convertor_binder_initializer
    Shared Sub New()


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with int_bytes_convertor_binder.vbp ----------
'so change int_bytes_convertor_binder.vbp instead of this file



        bytes_convertor_register(Of Boolean).assert_bind(
            Function(i() As Byte, ByRef offset As UInt32, ByRef o As Boolean) As Boolean
                Return bytes_bool(i, o, offset)
            End Function,
            Function(i() As Byte, ii As UInt32, il As UInt32, ByRef o As Boolean) As Boolean
                Return bytes_bool(i, ii, il, o)
            End Function,
            Function(i As Boolean, o() As Byte, ByRef offset As UInt32) As Boolean
                Return bool_bytes(i, o, offset)
            End Function,
            Function(i As Boolean, ByRef o() As Byte) As Boolean
                o = bool_bytes(i)
                Return True
            End Function)
'finish int_bytes_convertor_binder.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with int_bytes_convertor_binder.vbp ----------
'so change int_bytes_convertor_binder.vbp instead of this file



        bytes_convertor_register(Of SByte).assert_bind(
            Function(i() As Byte, ByRef offset As UInt32, ByRef o As SByte) As Boolean
                Return bytes_sbyte(i, o, offset)
            End Function,
            Function(i() As Byte, ii As UInt32, il As UInt32, ByRef o As SByte) As Boolean
                Return bytes_sbyte(i, ii, il, o)
            End Function,
            Function(i As SByte, o() As Byte, ByRef offset As UInt32) As Boolean
                Return sbyte_bytes(i, o, offset)
            End Function,
            Function(i As SByte, ByRef o() As Byte) As Boolean
                o = sbyte_bytes(i)
                Return True
            End Function)
'finish int_bytes_convertor_binder.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with int_bytes_convertor_binder.vbp ----------
'so change int_bytes_convertor_binder.vbp instead of this file



        bytes_convertor_register(Of Byte).assert_bind(
            Function(i() As Byte, ByRef offset As UInt32, ByRef o As Byte) As Boolean
                Return bytes_byte(i, o, offset)
            End Function,
            Function(i() As Byte, ii As UInt32, il As UInt32, ByRef o As Byte) As Boolean
                Return bytes_byte(i, ii, il, o)
            End Function,
            Function(i As Byte, o() As Byte, ByRef offset As UInt32) As Boolean
                Return byte_bytes(i, o, offset)
            End Function,
            Function(i As Byte, ByRef o() As Byte) As Boolean
                o = byte_bytes(i)
                Return True
            End Function)
'finish int_bytes_convertor_binder.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with int_bytes_convertor_binder.vbp ----------
'so change int_bytes_convertor_binder.vbp instead of this file



        bytes_convertor_register(Of Int16).assert_bind(
            Function(i() As Byte, ByRef offset As UInt32, ByRef o As Int16) As Boolean
                Return bytes_int16(i, o, offset)
            End Function,
            Function(i() As Byte, ii As UInt32, il As UInt32, ByRef o As Int16) As Boolean
                Return bytes_int16(i, ii, il, o)
            End Function,
            Function(i As Int16, o() As Byte, ByRef offset As UInt32) As Boolean
                Return int16_bytes(i, o, offset)
            End Function,
            Function(i As Int16, ByRef o() As Byte) As Boolean
                o = int16_bytes(i)
                Return True
            End Function)
'finish int_bytes_convertor_binder.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with int_bytes_convertor_binder.vbp ----------
'so change int_bytes_convertor_binder.vbp instead of this file



        bytes_convertor_register(Of UInt16).assert_bind(
            Function(i() As Byte, ByRef offset As UInt32, ByRef o As UInt16) As Boolean
                Return bytes_uint16(i, o, offset)
            End Function,
            Function(i() As Byte, ii As UInt32, il As UInt32, ByRef o As UInt16) As Boolean
                Return bytes_uint16(i, ii, il, o)
            End Function,
            Function(i As UInt16, o() As Byte, ByRef offset As UInt32) As Boolean
                Return uint16_bytes(i, o, offset)
            End Function,
            Function(i As UInt16, ByRef o() As Byte) As Boolean
                o = uint16_bytes(i)
                Return True
            End Function)
'finish int_bytes_convertor_binder.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with int_bytes_convertor_binder.vbp ----------
'so change int_bytes_convertor_binder.vbp instead of this file



        bytes_convertor_register(Of Int32).assert_bind(
            Function(i() As Byte, ByRef offset As UInt32, ByRef o As Int32) As Boolean
                Return bytes_int32(i, o, offset)
            End Function,
            Function(i() As Byte, ii As UInt32, il As UInt32, ByRef o As Int32) As Boolean
                Return bytes_int32(i, ii, il, o)
            End Function,
            Function(i As Int32, o() As Byte, ByRef offset As UInt32) As Boolean
                Return int32_bytes(i, o, offset)
            End Function,
            Function(i As Int32, ByRef o() As Byte) As Boolean
                o = int32_bytes(i)
                Return True
            End Function)
'finish int_bytes_convertor_binder.vbp --------

        'Conflict Function(ByVal b() As Byte, ByRef offset As UInt32) As Boolean
        '         Function(ByVal b() As Byte, ByRef o As UInt32) As Boolean
        'So use the second one, which is more common.
        binder(Of _do_val_ref(Of Byte(), UInt32, Boolean), bytes_conversion_binder_protector).set_global(Nothing)


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with int_bytes_convertor_binder.vbp ----------
'so change int_bytes_convertor_binder.vbp instead of this file



        bytes_convertor_register(Of UInt32).assert_bind(
            Function(i() As Byte, ByRef offset As UInt32, ByRef o As UInt32) As Boolean
                Return bytes_uint32(i, o, offset)
            End Function,
            Function(i() As Byte, ii As UInt32, il As UInt32, ByRef o As UInt32) As Boolean
                Return bytes_uint32(i, ii, il, o)
            End Function,
            Function(i As UInt32, o() As Byte, ByRef offset As UInt32) As Boolean
                Return uint32_bytes(i, o, offset)
            End Function,
            Function(i As UInt32, ByRef o() As Byte) As Boolean
                o = uint32_bytes(i)
                Return True
            End Function)
'finish int_bytes_convertor_binder.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with int_bytes_convertor_binder.vbp ----------
'so change int_bytes_convertor_binder.vbp instead of this file



        bytes_convertor_register(Of Int64).assert_bind(
            Function(i() As Byte, ByRef offset As UInt32, ByRef o As Int64) As Boolean
                Return bytes_int64(i, o, offset)
            End Function,
            Function(i() As Byte, ii As UInt32, il As UInt32, ByRef o As Int64) As Boolean
                Return bytes_int64(i, ii, il, o)
            End Function,
            Function(i As Int64, o() As Byte, ByRef offset As UInt32) As Boolean
                Return int64_bytes(i, o, offset)
            End Function,
            Function(i As Int64, ByRef o() As Byte) As Boolean
                o = int64_bytes(i)
                Return True
            End Function)
'finish int_bytes_convertor_binder.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with int_bytes_convertor_binder.vbp ----------
'so change int_bytes_convertor_binder.vbp instead of this file



        bytes_convertor_register(Of UInt64).assert_bind(
            Function(i() As Byte, ByRef offset As UInt32, ByRef o As UInt64) As Boolean
                Return bytes_uint64(i, o, offset)
            End Function,
            Function(i() As Byte, ii As UInt32, il As UInt32, ByRef o As UInt64) As Boolean
                Return bytes_uint64(i, ii, il, o)
            End Function,
            Function(i As UInt64, o() As Byte, ByRef offset As UInt32) As Boolean
                Return uint64_bytes(i, o, offset)
            End Function,
            Function(i As UInt64, ByRef o() As Byte) As Boolean
                o = uint64_bytes(i)
                Return True
            End Function)
'finish int_bytes_convertor_binder.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with int_bytes_convertor_binder.vbp ----------
'so change int_bytes_convertor_binder.vbp instead of this file



        bytes_convertor_register(Of Single).assert_bind(
            Function(i() As Byte, ByRef offset As UInt32, ByRef o As Single) As Boolean
                Return bytes_single(i, o, offset)
            End Function,
            Function(i() As Byte, ii As UInt32, il As UInt32, ByRef o As Single) As Boolean
                Return bytes_single(i, ii, il, o)
            End Function,
            Function(i As Single, o() As Byte, ByRef offset As UInt32) As Boolean
                Return single_bytes(i, o, offset)
            End Function,
            Function(i As Single, ByRef o() As Byte) As Boolean
                o = single_bytes(i)
                Return True
            End Function)
'finish int_bytes_convertor_binder.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with int_bytes_convertor_binder.vbp ----------
'so change int_bytes_convertor_binder.vbp instead of this file



        bytes_convertor_register(Of Double).assert_bind(
            Function(i() As Byte, ByRef offset As UInt32, ByRef o As Double) As Boolean
                Return bytes_double(i, o, offset)
            End Function,
            Function(i() As Byte, ii As UInt32, il As UInt32, ByRef o As Double) As Boolean
                Return bytes_double(i, ii, il, o)
            End Function,
            Function(i As Double, o() As Byte, ByRef offset As UInt32) As Boolean
                Return double_bytes(i, o, offset)
            End Function,
            Function(i As Double, ByRef o() As Byte) As Boolean
                o = double_bytes(i)
                Return True
            End Function)
'finish int_bytes_convertor_binder.vbp --------


'the following code is generated by /osi/root/codegen/precompile/precompile.exe
'with int_bytes_convertor_binder.vbp ----------
'so change int_bytes_convertor_binder.vbp instead of this file



        bytes_convertor_register(Of Char).assert_bind(
            Function(i() As Byte, ByRef offset As UInt32, ByRef o As Char) As Boolean
                Return bytes_char(i, o, offset)
            End Function,
            Function(i() As Byte, ii As UInt32, il As UInt32, ByRef o As Char) As Boolean
                Return bytes_char(i, ii, il, o)
            End Function,
            Function(i As Char, o() As Byte, ByRef offset As UInt32) As Boolean
                Return char_bytes(i, o, offset)
            End Function,
            Function(i As Char, ByRef o() As Byte) As Boolean
                o = char_bytes(i)
                Return True
            End Function)
'finish int_bytes_convertor_binder.vbp --------

    End Sub

    Private Shared Sub init()
    End Sub
End Class
'finish default_bytes_convertor_binder_initializer.vbp --------
