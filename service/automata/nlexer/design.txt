
n-lexer: natural lexical analysis

It simulates the process of a human lexical analysis. Basically it's a list of rules when parsing a program language.
Considering the following paragraph:

void function_a(type1 param1, type2 param2) {
  string s = "a bc\"";
  int x = -1.9;
  return param1 + param2 + s;
}

v -> letter -> go ahead
o -> letter -> go ahead
i -> letter -> go ahead
d -> letter -> go ahead
space -> blank -> go ahead | finish last word void
...
" -> quote -> go ahead
a -> letter -> go ahead
space -> blank -> go ahead
b -> letter -> go ahead
c -> letter -> go ahead
\" -> escaped " -> go ahead
" -> quote -> finish last word "abc\""
...
- > negative -> go ahead
1 -> digit -> go ahead
. -> dot -> go ahead
9 -> digit -> go ahead
; -> semi-colon -> finish last word -1.9

How human selects void,
  - The first character is v.
  - The second character is o.
  - The third character is i.
  - The forth character is d.
  - The fifth character is blank - ignore.

How human selects "a bc\""
  - The first character is ".
  - The second character is not ".
  - The third character is not ".
  - The forth character is not ".
  - The fifth character is not ".
  - The sixth and seventh characters are \".
  - The eighth character is ".

How human selects -1.9
  - The first character is -.
  - The second character is 1.
  - The third character is ..
  - The forth character is 9.
  - The fifth character is ; - ignore.

So either rule can be represented as a set of conditions:
  - If it's X, move forward length(X).
  - If it's Y, move forward length(Y) then stop.
  - If it's not X, stop.
Repeating above steps to finish the lexical analysis.

Each rule is {match, unmatch}{match, unmatch}...{match-stop, unmatch-stop}.
Each {match, unmatch} pair is a group, the relationship between match and unmatch is AND.
It can be suffixed by ? - 0 or 1, * - 0 or more, + 1 or more.

Sample rules:
void -> void
"a bc\"" -> "[*,\"|"]*" - * is a macro representing any character.
-1.9 -> [+,-]?[\d]*.[\d]+ - \d is a macro representing all digits.
function_a [\w,_]+ - \w is a macro representing any English character.

Reserved characters [],|?*+\, these characters can be escaped by using c-style.

Processing steps:
1. Preprocess
  1.1 INCLUDE, include files
  1.2 DEFINE, define macros
  1.3 Expand macros
2. Parse
  - A group - starting from [ and ending with ], may contain a | as the separator of match and unmatch rules.
    - Several special match rules:
	  - \d: Digits
	  - \D: Non-digits
	  - \w: English characters
	  - \W: Non-English characters
	  - \b: Spaces
	  - \B: Non-spaces
  - A raw string - a language sugar of [string]
