
' This file is generated by importer_gen and definition.txt.
' Do not edit.

Option Explicit On
Option Infer Off
Option Strict On

Imports osi.root.connector
Imports osi.root.constants
Imports osi.root.formation
Imports osi.service.interpreter.primitive

Namespace logic
    Partial Public NotInheritable Class importer
        Private Function parse_type_0(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "type") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As UInt32 = 0
            If Not UInt32.TryParse(v(p), p2) Then
                Return False
            End If
            p += uint32_1
            o = new_type(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_append_slice_1(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "append_slice") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            o = new_append_slice(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_cut_2(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "cut") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As String = Nothing
            p3 = v(p)
            p += uint32_1
            o = new_cut(
                p1,
                p2,
                p3
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_cut_slice_3(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "cut_slice") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As String = Nothing
            p3 = v(p)
            p += uint32_1
            Dim p4 As String = Nothing
            p4 = v(p)
            p += uint32_1
            o = new_cut_slice(
                p1,
                p2,
                p3,
                p4
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_clear_4(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "clear") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            o = new_clear(
                p1
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_add_5(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "add") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As String = Nothing
            p3 = v(p)
            p += uint32_1
            o = new_add(
                p1,
                p2,
                p3
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_subtract_6(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "subtract") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As String = Nothing
            p3 = v(p)
            p += uint32_1
            o = new_subtract(
                p1,
                p2,
                p3
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_multiply_7(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "multiply") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As String = Nothing
            p3 = v(p)
            p += uint32_1
            o = new_multiply(
                p1,
                p2,
                p3
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_power_8(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "power") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As String = Nothing
            p3 = v(p)
            p += uint32_1
            o = new_power(
                p1,
                p2,
                p3
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_and_9(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "and") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As String = Nothing
            p3 = v(p)
            p += uint32_1
            o = new_and(
                p1,
                p2,
                p3
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_or_10(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "or") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As String = Nothing
            p3 = v(p)
            p += uint32_1
            o = new_or(
                p1,
                p2,
                p3
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_callee_11(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "callee") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As vector(Of pair(Of String, String)) = Nothing
            p2 = New vector(Of pair(Of String, String))()
            If Not parse_typed_parameters(p2, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            Dim p3 As paragraph = Nothing
            If Not parse_paragraph(p3, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            o = new_callee(
                p1,
                p2,
                p3
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_caller_12(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "caller") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As vector(Of String) = Nothing
            p3 = New vector(Of String)()
            If Not parse_parameters(p3, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            o = new_caller(
                p1,
                p2,
                p3
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_caller_13(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "caller") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As vector(Of String) = Nothing
            p2 = New vector(Of String)()
            If Not parse_parameters(p2, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            o = new_caller(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_less_14(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "less") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As String = Nothing
            p3 = v(p)
            p += uint32_1
            o = new_less(
                p1,
                p2,
                p3
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_more_15(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "more") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As String = Nothing
            p3 = v(p)
            p += uint32_1
            o = new_more(
                p1,
                p2,
                p3
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_equal_16(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "equal") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As String = Nothing
            p3 = v(p)
            p += uint32_1
            o = new_equal(
                p1,
                p2,
                p3
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_less_or_equal_17(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "less_or_equal") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As String = Nothing
            p3 = v(p)
            p += uint32_1
            o = new_less_or_equal(
                p1,
                p2,
                p3
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_more_or_equal_18(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "more_or_equal") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As String = Nothing
            p3 = v(p)
            p += uint32_1
            o = new_more_or_equal(
                p1,
                p2,
                p3
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_if_19(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "if") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As paragraph = Nothing
            If Not parse_paragraph(p2, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            Dim p3 As place_holder = Nothing
            If Not strsame(v(p), "else") Then
                Return False
            End If
            p += uint32_1
            Dim p4 As paragraph = Nothing
            If Not parse_paragraph(p4, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            o = new_if(
                p1,
                p2,
                p3,
                p4
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_if_20(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "if") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As paragraph = Nothing
            If Not parse_paragraph(p2, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            o = new_if(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_copy_21(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "copy") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            o = new_copy(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_copy_const_22(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "copy_const") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As data_block = Nothing
            p2 = New data_block()
            Dim new_pos As UInt32 = 0
            new_pos = p
            If Not p2.import(v, new_pos) Then
                Return False
            End If
            assert(new_pos = p + uint32_1)
            p += uint32_1
            o = new_copy_const(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_define_23(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "define") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            o = new_define(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_do_until_24(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "do_until") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As paragraph = Nothing
            If Not parse_paragraph(p2, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            o = new_do_until(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_do_while_25(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "do_while") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As paragraph = Nothing
            If Not parse_paragraph(p2, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            o = new_do_while(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_interrupt_26(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "interrupt") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As String = Nothing
            p3 = v(p)
            p += uint32_1
            o = new_interrupt(
                p1,
                p2,
                p3
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_move_27(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "move") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            o = new_move(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_divide_28(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "divide") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As String = Nothing
            p3 = v(p)
            p += uint32_1
            Dim p4 As String = Nothing
            p4 = v(p)
            p += uint32_1
            o = new_divide(
                p1,
                p2,
                p3,
                p4
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_extract_29(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "extract") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            Dim p3 As String = Nothing
            p3 = v(p)
            p += uint32_1
            Dim p4 As String = Nothing
            p4 = v(p)
            p += uint32_1
            o = new_extract(
                p1,
                p2,
                p3,
                p4
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_return_30(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "return") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As place_holder = Nothing
            If Not strsame(v(p), "*") Then
                Return False
            End If
            p += uint32_1
            o = new_return(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_return_31(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "return") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            o = new_return(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_append_32(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "append") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            o = new_append(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_not_33(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "not") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            o = new_not(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_sizeof_34(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "sizeof") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            o = new_sizeof(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_empty_35(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "empty") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As String = Nothing
            p2 = v(p)
            p += uint32_1
            o = new_empty(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_while_then_36(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "while_then") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            Dim p1 As String = Nothing
            p1 = v(p)
            p += uint32_1
            Dim p2 As paragraph = Nothing
            If Not parse_paragraph(p2, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            o = new_while_then(
                p1,
                p2
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse_stop_37(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not strsame(v(p), "stop") Then
                Return False
            End If
            Dim start As UInt32
            start = p
            p += uint32_1
            o = new_stop(
            )
            If isdebugmode() Then
                o = New exportable_source_wrapper(v, start, p, o)
            End If
            Return True
        End Function

        Private Function parse(ByVal v As vector(Of String),
                               ByRef p As UInt32,
                               ByRef o As exportable) As Boolean
            If v Is Nothing OrElse v.size() <= p Then
                Return False
            End If
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_type_0(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_append_slice_1(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_cut_2(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_cut_slice_3(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_clear_4(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_add_5(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_subtract_6(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_multiply_7(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_power_8(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_and_9(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_or_10(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_callee_11(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_caller_12(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_caller_13(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_less_14(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_more_15(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_equal_16(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_less_or_equal_17(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_more_or_equal_18(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_if_19(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_if_20(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_copy_21(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_copy_const_22(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_define_23(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_do_until_24(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_do_while_25(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_interrupt_26(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_move_27(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_divide_28(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_extract_29(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_return_30(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_return_31(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_append_32(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_not_33(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_sizeof_34(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_empty_35(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_while_then_36(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_stop_37(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            errors.unexpected_token(v(p))
            Return False
        End Function
    End Class
End Namespace
