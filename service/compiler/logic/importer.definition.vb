
' This file is generated by importer_gen and definition.txt.
' Do not edit.

Option Explicit On
Option Infer Off
Option Strict On

Imports osi.root.connector
Imports osi.root.constants
Imports osi.root.formation
Imports osi.service.interpreter.primitive

Namespace logic
    Partial Public NotInheritable Class importer
        Private Function parse_type_0(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("type") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As UInt32 = 0
            If Not UInt32.TryParse(v(p), p2) Then
                Return False
            End If
            p += uint32_1
            o = new_type(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_append_slice_1(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("append_slice") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            o = new_append_slice(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_cut_slice_2(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("cut_slice") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_cut_slice(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_cut_3(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("cut") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_cut(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_cut_from_4(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("cut_from") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p4 As String = v(p)
            p += uint32_1
            o = new_cut_from(
                p1,
                p2,
                p3,
                p4
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_clear_5(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("clear") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            o = new_clear(
                p1
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_add_6(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("add") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_add(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_subtract_7(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("subtract") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_subtract(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_multiply_8(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("multiply") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_multiply(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_divide_9(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("divide") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p4 As String = v(p)
            p += uint32_1
            o = new_divide(
                p1,
                p2,
                p3,
                p4
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_extract_10(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("extract") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p4 As String = v(p)
            p += uint32_1
            o = new_extract(
                p1,
                p2,
                p3,
                p4
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_power_11(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("power") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_power(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_and_12(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("and") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_and(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_or_13(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("or") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_or(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_callee_14(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("callee") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As New vector(Of pair(Of String, String))()
            If Not parse_typed_parameters(p3, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p4 As paragraph = Nothing
            If Not parse_paragraph(p4, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            o = new_callee(
                p1,
                p2,
                p3,
                p4
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_caller_15(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("caller") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As New vector(Of String)()
            If Not parse_parameters(p3, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            o = new_caller(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_caller_16(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("caller") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As New vector(Of String)()
            If Not parse_parameters(p2, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            o = new_caller(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_less_17(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("less") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_less(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_more_18(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("more") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_more(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_equal_19(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("equal") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_equal(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_less_or_equal_20(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("less_or_equal") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_less_or_equal(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_more_or_equal_21(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("more_or_equal") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_more_or_equal(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_if_22(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("if") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As paragraph = Nothing
            If Not parse_paragraph(p2, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As place_holder = Nothing
            If Not v(p).Equals("else") Then
                Return False
            End If
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p4 As paragraph = Nothing
            If Not parse_paragraph(p4, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            o = new_if(
                p1,
                p2,
                p3,
                p4
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_if_23(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("if") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As paragraph = Nothing
            If Not parse_paragraph(p2, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            o = new_if(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_copy_24(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("copy") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            o = new_copy(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_copy_const_25(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("copy_const") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As New data_block()
            Dim new_pos As UInt32 = p
            If Not p2.import(v, new_pos) Then
                Return False
            End If
            assert(new_pos = p + uint32_1)
            p += uint32_1
            o = new_copy_const(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_copy_heap_out_26(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("copy_heap_out") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_copy_heap_out(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_copy_heap_in_27(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("copy_heap_in") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_copy_heap_in(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_define_28(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("define") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            o = new_define(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_define_heap_29(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("define_heap") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_define_heap(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_do_until_30(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("do_until") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As paragraph = Nothing
            If Not parse_paragraph(p2, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            o = new_do_until(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_do_while_31(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("do_while") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As paragraph = Nothing
            If Not parse_paragraph(p2, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            o = new_do_while(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_interrupt_32(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("interrupt") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_interrupt(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_move_33(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("move") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            o = new_move(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_return_34(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("return") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As place_holder = Nothing
            If Not v(p).Equals("*") Then
                Return False
            End If
            p += uint32_1
            o = new_return(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_return_35(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("return") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            o = new_return(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_append_36(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("append") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            o = new_append(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_not_37(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("not") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            o = new_not(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_sizeof_38(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("sizeof") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            o = new_sizeof(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_empty_39(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("empty") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            o = new_empty(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_while_then_40(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("while_then") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As paragraph = Nothing
            If Not parse_paragraph(p2, v, p) Then
                Return False
            End If
            p -= uint32_1
            p += uint32_1
            o = new_while_then(
                p1,
                p2
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_stop_41(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("stop") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            o = new_stop(
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_float_add_42(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("float_add") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_float_add(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_float_subtract_43(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("float_subtract") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_float_subtract(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_float_multiply_44(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("float_multiply") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_float_multiply(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_float_divide_45(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("float_divide") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_float_divide(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_float_extract_46(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("float_extract") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_float_extract(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_float_power_47(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("float_power") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_float_power(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_float_less_48(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("float_less") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_float_less(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_float_more_49(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("float_more") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_float_more(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_float_equal_50(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("float_equal") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_float_equal(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_float_less_or_equal_51(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("float_less_or_equal") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_float_less_or_equal(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_float_more_or_equal_52(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("float_more_or_equal") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_float_more_or_equal(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_left_shift_53(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("left_shift") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_left_shift(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse_right_shift_54(
                ByVal v As vector(Of String),
                ByRef p As UInt32,
                ByRef o As exportable) As Boolean
            assert(Not v Is Nothing)
            assert(v.size() > p)
            If Not v(p).Equals("right_shift") Then
                Return False
            End If
            Dim start As UInt32 = p
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p1 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p2 As String = v(p)
            p += uint32_1
            If Not v.available_index(p) Then
                Return False
            End If
            Dim p3 As String = v(p)
            p += uint32_1
            o = new_right_shift(
                p1,
                p2,
                p3
            )
            o = exportable_source_wrapper.maybe_wrap(v, start, p, o)
            Return True
        End Function

        Private Function parse(ByVal v As vector(Of String),
                               ByRef p As UInt32,
                               ByRef o As exportable) As Boolean
            If v Is Nothing OrElse v.size() <= p Then
                Return False
            End If
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_type_0(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_append_slice_1(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_cut_slice_2(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_cut_3(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_cut_from_4(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_clear_5(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_add_6(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_subtract_7(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_multiply_8(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_divide_9(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_extract_10(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_power_11(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_and_12(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_or_13(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_callee_14(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_caller_15(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_caller_16(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_less_17(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_more_18(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_equal_19(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_less_or_equal_20(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_more_or_equal_21(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_if_22(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_if_23(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_copy_24(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_copy_const_25(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_copy_heap_out_26(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_copy_heap_in_27(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_define_28(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_define_heap_29(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_do_until_30(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_do_while_31(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_interrupt_32(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_move_33(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_return_34(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_return_35(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_append_36(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_not_37(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_sizeof_38(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_empty_39(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_while_then_40(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_stop_41(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_float_add_42(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_float_subtract_43(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_float_multiply_44(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_float_divide_45(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_float_extract_46(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_float_power_47(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_float_less_48(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_float_more_49(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_float_equal_50(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_float_less_or_equal_51(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_float_more_or_equal_52(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_left_shift_53(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            Using code_block
                Dim pos As UInt32 = 0
                pos = p
                If parse_right_shift_54(v, pos, o) Then
                    p = pos
                    Return True
                End If
            End Using
            errors.unexpected_token(v(p))
            Return False
        End Function
    End Class
End Namespace
