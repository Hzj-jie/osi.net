
' This file is generated by builder_gen and definition.txt.
' Do not edit.

Option Explicit On
Option Infer Off
Option Strict On

Imports osi.root.connector
Imports osi.root.constants
Imports osi.root.formation
Imports osi.service.interpreter.primitive

Partial Public NotInheritable Class logic
    Partial Public NotInheritable Class builders

        Public Shared Function of_start_scope(ByVal paragraph_1 As Func(Of logic_writer, Boolean)) As start_scope_builder_1
            Return New start_scope_builder_1(paragraph_1)
        End Function

        Public Structure start_scope_builder_1

            Private ReadOnly paragraph_1 As Func(Of logic_writer, Boolean)

            Public Sub New(ByVal paragraph_1 As Func(Of logic_writer, Boolean))
                assert(Not paragraph_1 Is Nothing)
                Me.paragraph_1 = paragraph_1
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("start_scope") AndAlso
                    o.append("{") AndAlso
                    o.append(paragraph_1) AndAlso
                    o.append("}") AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_type(ByVal string_1 As String, ByVal uint_2 As UInt32) As type_builder_2
            Return New type_builder_2(string_1, uint_2)
        End Function

        Public Structure type_builder_2

            Private ReadOnly string_1 As String
            Private ReadOnly uint_2 As UInt32

            Public Sub New(ByVal string_1 As String, ByVal uint_2 As UInt32)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                Me.uint_2 = uint_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("type") AndAlso
                    o.append(string_1) AndAlso
                    o.append(uint_2) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_append_slice(ByVal string_1 As String, ByVal string_2 As String) As append_slice_builder_3
            Return New append_slice_builder_3(string_1, string_2)
        End Function

        Public Structure append_slice_builder_3

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("append_slice") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_cut_slice(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As cut_slice_builder_4
            Return New cut_slice_builder_4(string_1, string_2, string_3)
        End Function

        Public Structure cut_slice_builder_4

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("cut_slice") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_cut(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As cut_builder_5
            Return New cut_builder_5(string_1, string_2, string_3)
        End Function

        Public Structure cut_builder_5

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("cut") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_cut_len(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String, ByVal string_4 As String) As cut_len_builder_6
            Return New cut_len_builder_6(string_1, string_2, string_3, string_4)
        End Function

        Public Structure cut_len_builder_6

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String
            Private ReadOnly string_4 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String, ByVal string_4 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
                assert(Not string_4.null_or_whitespace())
                Me.string_4 = string_4
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("cut_len") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(string_4) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_clear(ByVal string_1 As String) As clear_builder_7
            Return New clear_builder_7(string_1)
        End Function

        Public Structure clear_builder_7

            Private ReadOnly string_1 As String

            Public Sub New(ByVal string_1 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("clear") AndAlso
                    o.append(string_1) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_add(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As add_builder_8
            Return New add_builder_8(string_1, string_2, string_3)
        End Function

        Public Structure add_builder_8

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("add") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_subtract(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As subtract_builder_9
            Return New subtract_builder_9(string_1, string_2, string_3)
        End Function

        Public Structure subtract_builder_9

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("subtract") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_multiply(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As multiply_builder_10
            Return New multiply_builder_10(string_1, string_2, string_3)
        End Function

        Public Structure multiply_builder_10

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("multiply") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_divide(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String, ByVal string_4 As String) As divide_builder_11
            Return New divide_builder_11(string_1, string_2, string_3, string_4)
        End Function

        Public Structure divide_builder_11

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String
            Private ReadOnly string_4 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String, ByVal string_4 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
                assert(Not string_4.null_or_whitespace())
                Me.string_4 = string_4
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("divide") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(string_4) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_extract(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String, ByVal string_4 As String) As extract_builder_12
            Return New extract_builder_12(string_1, string_2, string_3, string_4)
        End Function

        Public Structure extract_builder_12

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String
            Private ReadOnly string_4 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String, ByVal string_4 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
                assert(Not string_4.null_or_whitespace())
                Me.string_4 = string_4
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("extract") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(string_4) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_power(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As power_builder_13
            Return New power_builder_13(string_1, string_2, string_3)
        End Function

        Public Structure power_builder_13

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("power") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_and(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As and_builder_14
            Return New and_builder_14(string_1, string_2, string_3)
        End Function

        Public Structure and_builder_14

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("and") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_or(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As or_builder_15
            Return New or_builder_15(string_1, string_2, string_3)
        End Function

        Public Structure or_builder_15

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("or") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_callee(ByVal string_1 As String, ByVal string_2 As String, ByVal typed_parameters_3 As vector(Of pair(Of String, String)), ByVal paragraph_4 As Func(Of logic_writer, Boolean)) As callee_builder_16
            Return New callee_builder_16(string_1, string_2, typed_parameters_3, paragraph_4)
        End Function

        Public Structure callee_builder_16

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly typed_parameters_3 As vector(Of pair(Of String, String))
            Private ReadOnly paragraph_4 As Func(Of logic_writer, Boolean)

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal typed_parameters_3 As vector(Of pair(Of String, String)), ByVal paragraph_4 As Func(Of logic_writer, Boolean))
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not typed_parameters_3 Is Nothing)
                Me.typed_parameters_3 = typed_parameters_3
                assert(Not paragraph_4 Is Nothing)
                Me.paragraph_4 = paragraph_4
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("callee") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append("(") AndAlso
                    o.append(typed_parameters_3) AndAlso
                    o.append(")") AndAlso
                    o.append("{") AndAlso
                    o.append(paragraph_4) AndAlso
                    o.append("}") AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_caller(ByVal string_1 As String, ByVal string_2 As String, ByVal parameters_3 As vector(Of String)) As caller_builder_17
            Return New caller_builder_17(string_1, string_2, parameters_3)
        End Function

        Public Structure caller_builder_17

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly parameters_3 As vector(Of String)

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal parameters_3 As vector(Of String))
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not parameters_3 Is Nothing)
                Me.parameters_3 = parameters_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("caller") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append("(") AndAlso
                    o.append(parameters_3) AndAlso
                    o.append(")") AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_caller(ByVal string_1 As String, ByVal parameters_2 As vector(Of String)) As caller_builder_18
            Return New caller_builder_18(string_1, parameters_2)
        End Function

        Public Structure caller_builder_18

            Private ReadOnly string_1 As String
            Private ReadOnly parameters_2 As vector(Of String)

            Public Sub New(ByVal string_1 As String, ByVal parameters_2 As vector(Of String))
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not parameters_2 Is Nothing)
                Me.parameters_2 = parameters_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("caller") AndAlso
                    o.append(string_1) AndAlso
                    o.append("(") AndAlso
                    o.append(parameters_2) AndAlso
                    o.append(")") AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_callee_ref(ByVal string_1 As String, ByVal string_2 As String, ByVal parameters_3 As vector(Of String)) As callee_ref_builder_19
            Return New callee_ref_builder_19(string_1, string_2, parameters_3)
        End Function

        Public Structure callee_ref_builder_19

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly parameters_3 As vector(Of String)

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal parameters_3 As vector(Of String))
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not parameters_3 Is Nothing)
                Me.parameters_3 = parameters_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("callee_ref") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append("(") AndAlso
                    o.append(parameters_3) AndAlso
                    o.append(")") AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_caller_ref(ByVal string_1 As String, ByVal string_2 As String, ByVal parameters_3 As vector(Of String)) As caller_ref_builder_20
            Return New caller_ref_builder_20(string_1, string_2, parameters_3)
        End Function

        Public Structure caller_ref_builder_20

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly parameters_3 As vector(Of String)

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal parameters_3 As vector(Of String))
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not parameters_3 Is Nothing)
                Me.parameters_3 = parameters_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("caller_ref") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append("(") AndAlso
                    o.append(parameters_3) AndAlso
                    o.append(")") AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_caller_ref(ByVal string_1 As String, ByVal parameters_2 As vector(Of String)) As caller_ref_builder_21
            Return New caller_ref_builder_21(string_1, parameters_2)
        End Function

        Public Structure caller_ref_builder_21

            Private ReadOnly string_1 As String
            Private ReadOnly parameters_2 As vector(Of String)

            Public Sub New(ByVal string_1 As String, ByVal parameters_2 As vector(Of String))
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not parameters_2 Is Nothing)
                Me.parameters_2 = parameters_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("caller_ref") AndAlso
                    o.append(string_1) AndAlso
                    o.append("(") AndAlso
                    o.append(parameters_2) AndAlso
                    o.append(")") AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_address_of(ByVal string_1 As String, ByVal string_2 As String) As address_of_builder_22
            Return New address_of_builder_22(string_1, string_2)
        End Function

        Public Structure address_of_builder_22

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("address_of") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_less(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As less_builder_23
            Return New less_builder_23(string_1, string_2, string_3)
        End Function

        Public Structure less_builder_23

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("less") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_more(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As more_builder_24
            Return New more_builder_24(string_1, string_2, string_3)
        End Function

        Public Structure more_builder_24

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("more") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_equal(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As equal_builder_25
            Return New equal_builder_25(string_1, string_2, string_3)
        End Function

        Public Structure equal_builder_25

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("equal") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_less_or_equal(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As less_or_equal_builder_26
            Return New less_or_equal_builder_26(string_1, string_2, string_3)
        End Function

        Public Structure less_or_equal_builder_26

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("less_or_equal") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_more_or_equal(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As more_or_equal_builder_27
            Return New more_or_equal_builder_27(string_1, string_2, string_3)
        End Function

        Public Structure more_or_equal_builder_27

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("more_or_equal") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_if(ByVal string_1 As String, ByVal paragraph_2 As Func(Of logic_writer, Boolean), ByVal paragraph_4 As Func(Of logic_writer, Boolean)) As if_builder_28
            Return New if_builder_28(string_1, paragraph_2, paragraph_4)
        End Function

        Public Structure if_builder_28

            Private ReadOnly string_1 As String
            Private ReadOnly paragraph_2 As Func(Of logic_writer, Boolean)
            Private ReadOnly paragraph_4 As Func(Of logic_writer, Boolean)

            Public Sub New(ByVal string_1 As String, ByVal paragraph_2 As Func(Of logic_writer, Boolean), ByVal paragraph_4 As Func(Of logic_writer, Boolean))
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not paragraph_2 Is Nothing)
                Me.paragraph_2 = paragraph_2
                assert(Not paragraph_4 Is Nothing)
                Me.paragraph_4 = paragraph_4
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("if") AndAlso
                    o.append(string_1) AndAlso
                    o.append("{") AndAlso
                    o.append(paragraph_2) AndAlso
                    o.append("}") AndAlso
                    o.append("else") AndAlso
                    o.append("{") AndAlso
                    o.append(paragraph_4) AndAlso
                    o.append("}") AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_if(ByVal string_1 As String, ByVal paragraph_2 As Func(Of logic_writer, Boolean)) As if_builder_29
            Return New if_builder_29(string_1, paragraph_2)
        End Function

        Public Structure if_builder_29

            Private ReadOnly string_1 As String
            Private ReadOnly paragraph_2 As Func(Of logic_writer, Boolean)

            Public Sub New(ByVal string_1 As String, ByVal paragraph_2 As Func(Of logic_writer, Boolean))
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not paragraph_2 Is Nothing)
                Me.paragraph_2 = paragraph_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("if") AndAlso
                    o.append(string_1) AndAlso
                    o.append("{") AndAlso
                    o.append(paragraph_2) AndAlso
                    o.append("}") AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_copy(ByVal string_1 As String, ByVal string_2 As String) As copy_builder_30
            Return New copy_builder_30(string_1, string_2)
        End Function

        Public Structure copy_builder_30

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("copy") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_copy_const(ByVal string_1 As String, ByVal data_block_2 As data_block) As copy_const_builder_31
            Return New copy_const_builder_31(string_1, data_block_2)
        End Function

        Public Structure copy_const_builder_31

            Private ReadOnly string_1 As String
            Private ReadOnly data_block_2 As data_block

            Public Sub New(ByVal string_1 As String, ByVal data_block_2 As data_block)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not data_block_2 Is Nothing)
                Me.data_block_2 = data_block_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("copy_const") AndAlso
                    o.append(string_1) AndAlso
                    o.append(data_block_2) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_define(ByVal string_1 As String, ByVal string_2 As String) As define_builder_32
            Return New define_builder_32(string_1, string_2)
        End Function

        Public Structure define_builder_32

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("define") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_define_heap(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As define_heap_builder_33
            Return New define_heap_builder_33(string_1, string_2, string_3)
        End Function

        Public Structure define_heap_builder_33

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("define_heap") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_redefine(ByVal string_1 As String, ByVal string_2 As String) As redefine_builder_34
            Return New redefine_builder_34(string_1, string_2)
        End Function

        Public Structure redefine_builder_34

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("redefine") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_undefine(ByVal string_1 As String) As undefine_builder_35
            Return New undefine_builder_35(string_1)
        End Function

        Public Structure undefine_builder_35

            Private ReadOnly string_1 As String

            Public Sub New(ByVal string_1 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("undefine") AndAlso
                    o.append(string_1) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_dealloc_heap(ByVal string_1 As String) As dealloc_heap_builder_36
            Return New dealloc_heap_builder_36(string_1)
        End Function

        Public Structure dealloc_heap_builder_36

            Private ReadOnly string_1 As String

            Public Sub New(ByVal string_1 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("dealloc_heap") AndAlso
                    o.append(string_1) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_do_until(ByVal string_1 As String, ByVal paragraph_2 As Func(Of logic_writer, Boolean)) As do_until_builder_37
            Return New do_until_builder_37(string_1, paragraph_2)
        End Function

        Public Structure do_until_builder_37

            Private ReadOnly string_1 As String
            Private ReadOnly paragraph_2 As Func(Of logic_writer, Boolean)

            Public Sub New(ByVal string_1 As String, ByVal paragraph_2 As Func(Of logic_writer, Boolean))
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not paragraph_2 Is Nothing)
                Me.paragraph_2 = paragraph_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("do_until") AndAlso
                    o.append(string_1) AndAlso
                    o.append("{") AndAlso
                    o.append(paragraph_2) AndAlso
                    o.append("}") AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_do_while(ByVal string_1 As String, ByVal paragraph_2 As Func(Of logic_writer, Boolean)) As do_while_builder_38
            Return New do_while_builder_38(string_1, paragraph_2)
        End Function

        Public Structure do_while_builder_38

            Private ReadOnly string_1 As String
            Private ReadOnly paragraph_2 As Func(Of logic_writer, Boolean)

            Public Sub New(ByVal string_1 As String, ByVal paragraph_2 As Func(Of logic_writer, Boolean))
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not paragraph_2 Is Nothing)
                Me.paragraph_2 = paragraph_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("do_while") AndAlso
                    o.append(string_1) AndAlso
                    o.append("{") AndAlso
                    o.append(paragraph_2) AndAlso
                    o.append("}") AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_interrupt(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As interrupt_builder_39
            Return New interrupt_builder_39(string_1, string_2, string_3)
        End Function

        Public Structure interrupt_builder_39

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("interrupt") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_move(ByVal string_1 As String, ByVal string_2 As String) As move_builder_40
            Return New move_builder_40(string_1, string_2)
        End Function

        Public Structure move_builder_40

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("move") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_return(ByVal string_1 As String) As return_builder_41
            Return New return_builder_41(string_1)
        End Function

        Public Structure return_builder_41

            Private ReadOnly string_1 As String

            Public Sub New(ByVal string_1 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("return") AndAlso
                    o.append(string_1) AndAlso
                    o.append("*") AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_return(ByVal string_1 As String, ByVal string_2 As String) As return_builder_42
            Return New return_builder_42(string_1, string_2)
        End Function

        Public Structure return_builder_42

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("return") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_append(ByVal string_1 As String, ByVal string_2 As String) As append_builder_43
            Return New append_builder_43(string_1, string_2)
        End Function

        Public Structure append_builder_43

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("append") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_not(ByVal string_1 As String, ByVal string_2 As String) As not_builder_44
            Return New not_builder_44(string_1, string_2)
        End Function

        Public Structure not_builder_44

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("not") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_sizeof(ByVal string_1 As String, ByVal string_2 As String) As sizeof_builder_45
            Return New sizeof_builder_45(string_1, string_2)
        End Function

        Public Structure sizeof_builder_45

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("sizeof") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_empty(ByVal string_1 As String, ByVal string_2 As String) As empty_builder_46
            Return New empty_builder_46(string_1, string_2)
        End Function

        Public Structure empty_builder_46

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("empty") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_while_then(ByVal string_1 As String, ByVal paragraph_2 As Func(Of logic_writer, Boolean)) As while_then_builder_47
            Return New while_then_builder_47(string_1, paragraph_2)
        End Function

        Public Structure while_then_builder_47

            Private ReadOnly string_1 As String
            Private ReadOnly paragraph_2 As Func(Of logic_writer, Boolean)

            Public Sub New(ByVal string_1 As String, ByVal paragraph_2 As Func(Of logic_writer, Boolean))
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not paragraph_2 Is Nothing)
                Me.paragraph_2 = paragraph_2
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("while_then") AndAlso
                    o.append(string_1) AndAlso
                    o.append("{") AndAlso
                    o.append(paragraph_2) AndAlso
                    o.append("}") AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_stop() As stop_builder_48
            Return New stop_builder_48()
        End Function

        Public Structure stop_builder_48

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("stop") AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_float_add(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As float_add_builder_49
            Return New float_add_builder_49(string_1, string_2, string_3)
        End Function

        Public Structure float_add_builder_49

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("float_add") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_float_subtract(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As float_subtract_builder_50
            Return New float_subtract_builder_50(string_1, string_2, string_3)
        End Function

        Public Structure float_subtract_builder_50

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("float_subtract") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_float_multiply(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As float_multiply_builder_51
            Return New float_multiply_builder_51(string_1, string_2, string_3)
        End Function

        Public Structure float_multiply_builder_51

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("float_multiply") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_float_divide(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As float_divide_builder_52
            Return New float_divide_builder_52(string_1, string_2, string_3)
        End Function

        Public Structure float_divide_builder_52

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("float_divide") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_float_extract(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As float_extract_builder_53
            Return New float_extract_builder_53(string_1, string_2, string_3)
        End Function

        Public Structure float_extract_builder_53

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("float_extract") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_float_power(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As float_power_builder_54
            Return New float_power_builder_54(string_1, string_2, string_3)
        End Function

        Public Structure float_power_builder_54

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("float_power") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_float_less(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As float_less_builder_55
            Return New float_less_builder_55(string_1, string_2, string_3)
        End Function

        Public Structure float_less_builder_55

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("float_less") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_float_more(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As float_more_builder_56
            Return New float_more_builder_56(string_1, string_2, string_3)
        End Function

        Public Structure float_more_builder_56

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("float_more") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_float_equal(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As float_equal_builder_57
            Return New float_equal_builder_57(string_1, string_2, string_3)
        End Function

        Public Structure float_equal_builder_57

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("float_equal") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_float_less_or_equal(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As float_less_or_equal_builder_58
            Return New float_less_or_equal_builder_58(string_1, string_2, string_3)
        End Function

        Public Structure float_less_or_equal_builder_58

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("float_less_or_equal") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_float_more_or_equal(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As float_more_or_equal_builder_59
            Return New float_more_or_equal_builder_59(string_1, string_2, string_3)
        End Function

        Public Structure float_more_or_equal_builder_59

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("float_more_or_equal") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_left_shift(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As left_shift_builder_60
            Return New left_shift_builder_60(string_1, string_2, string_3)
        End Function

        Public Structure left_shift_builder_60

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("left_shift") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure

        Public Shared Function of_right_shift(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String) As right_shift_builder_61
            Return New right_shift_builder_61(string_1, string_2, string_3)
        End Function

        Public Structure right_shift_builder_61

            Private ReadOnly string_1 As String
            Private ReadOnly string_2 As String
            Private ReadOnly string_3 As String

            Public Sub New(ByVal string_1 As String, ByVal string_2 As String, ByVal string_3 As String)
                assert(Not string_1.null_or_whitespace())
                Me.string_1 = string_1
                assert(Not string_2.null_or_whitespace())
                Me.string_2 = string_2
                assert(Not string_3.null_or_whitespace())
                Me.string_3 = string_3
            End Sub

            Public Function [to](ByVal o As logic_writer) As Boolean
                Return _
                    o.append("right_shift") AndAlso
                    o.append(string_1) AndAlso
                    o.append(string_2) AndAlso
                    o.append(string_3) AndAlso
                    o.append(newline.incode())
            End Function
        End Structure
    End Class
End Class
