
IGNORE_TYPES blank, single-line-comment, multi-line-comment
ROOT_TYPES root-type

function type-name name start-bracket [paramlist]? end-bracket multi-sentence-paragraph
param paramtype name
paramlist [param-with-comma]* param
param-with-comma param comma

paragraph [sentence, multi-sentence-paragraph]
sentence [sentence-with-semi-colon, condition, while, for-loop]

multi-sentence-paragraph start-paragraph [paragraph]* end-paragraph

value-definition type-name name assignment value
value-declaration type-name name
heap-declaration type-name heap-name
value-clause variable-name assignment value

condition kw-if start-bracket value end-bracket paragraph [else-condition]?
else-condition kw-else paragraph

while kw-while start-bracket value end-bracket paragraph

base-for-increase [value-clause, ignore-result-function-call]
for-loop kw-for start-bracket [value-definition, value-declaration]? semi-colon [value]? semi-colon [for-increase]? end-bracket paragraph 

value [value-with-bracket, value-without-bracket]
base-value-without-bracket [function-call, variable-name, integer, biguint, ufloat, bool, string]
value-with-bracket start-bracket value end-bracket

heap-name name start-square-bracket value end-square-bracket

ignore-result-function-call function-call

function-call name start-bracket [value-list]? end-bracket
value-list [value-with-comma]* value
value-with-comma value comma

return-clause kw-return [value]?

# Embed a logic statement directly, like logic "int stdout a_string"
logic kw-logic string

include-with-string kw-include string
include [include-with-string, include-with-file]

ifndef-wrapped kw-ifndef name [root-type]* kw-endif
define kw-define name

# Allow type* to be used as a string.
typedef-type-str string
typedef-type-name type-name
typedef-type [typedef-type-name, typedef-type-str]
typedef kw-typedef typedef-type typedef-type

# TODO: Support value-definition
struct-body [value-declaration]? semi-colon
struct kw-struct type-name start-paragraph [struct-body]* end-paragraph semi-colon

reinterpret-cast kw-reinterpret-cast start-bracket variable-name comma type-name end-bracket

root-type-with-semi-colon [value-definition, heap-declaration, value-declaration, logic, typedef, delegate]? semi-colon
base-root-type [root-type-with-semi-colon, function, include, define, ifndef-wrapped, struct]
base-sentence-with-semi-colon [ignore-result-function-call, value-definition, heap-declaration, value-declaration, value-clause, return-clause, kw-break, logic, typedef, reinterpret-cast, delegate]? semi-colon

delegate kw-delegate type-name name start-bracket [paramtypelist]? end-bracket
paramtype type-name [reference]?
paramtypelist [paramtype-with-comma]* paramtype
paramtype-with-comma paramtype comma
