Option Explicit On
Option Infer Off
Option Strict On
Imports osi.root.connector
Public NotInheritable Class b2style_lib
    Private Sub New()
    End Sub
    Public Shared ReadOnly data() As Byte = 
        Convert.FromBase64String(strcat_hint(CUInt(32870), 
            "CAAAAGFzc2VydC5oOAIAAO+7vwojaWZuZGVmIEIyU1RZTEVfTElCX0FTU0VSVF9ICiNkZWZpbmUgQjJTVFlMRV9MSUJfQVNTRVJUX0gKCiNpbmNsdWRlIDxiMnN0eWxlL3N0ZGlvLmg+CiNpbmNsdWRlIDxiMnN0eWxlL3R5cGVzLmg+CiNpbmNsdWRlIDxic3R5bGUvc3RyLmg+Cgp2b2lkIGFzc2VydChzdHJpbmcgc3RhdGVtZW50LCBib29sIHYsIHN0cmluZyBtc2cpIHsKICBpZiAodikgcmV0dXJuOwogIGlmIChzdHJfZW1wdHkoc3RhdGVtZW50KSkgewogICAgYjJzdHlsZTo6c3RkX291dChtc2cpOwogIH0gZWxzZSB7CiAgICBiMnN0eWxlOjpzdGRfb3V0KHN0YXRlbWVudCArICI6ICIgKyBtc2cpOwogIH0KICBsb2dpYyAic3RvcCI7Cn0KCnZvaWQgYXNzZXJ0KGJvb2wgdiwgc3RyaW5nIG1zZykgewogIGFzc2VydCgiIiwgdiwgbXNnKTsKfQoKdm9pZCBhc3NlcnQoc3RyaW5nIHN0YXRlbWVudCwgYm9vbCB2KSB7CiAgYXNzZXJ0KHN0YXRlbWVudCwgdiwgIkFzc2VydGlvbiBmYWlsdXJlIik7Cn0KCnZvaWQgYXNzZXJ0KGJvb2wgdikgewogIGFzc2VydCgiIiwgdik7Cn0KCiNlbmRpZiAgLy8gQjJTVFlMRV9MSUJfQVNTRVJUX0gJAAAAYjJzdHlsZS5o6wAAAO+7vw0KI2lmbmRlZiBCMlNUWUxFX0xJQl9CMlNUWUxFX0gNCiNkZWZpbmUgQjJTVFlMRV9MSUJfQjJTVFlMRV9IDQoNCiNpbmNsdWRlIDxic3R5bGUuaD4NCg0KI2luY2x1ZGUgPGIyc3R5bGUvb3BlcmF0b3JzLmg+DQoNCi8vIFVuc3VwcG9ydGVkIHlldC4NCiNpZm5kZWYgQjNTVFlMRQ0KI2luY2x1ZGUgPGIyc3R5bGUvdWZsb2F0Lmg+DQojZW5kaWYNCg0KI2VuZGlmICAvLyBCMlNUWUxFX0xJQl9CMlNUWUxFX0gHAAAAcnVuLmNtZGsAAAANCmRlbCAvcyAqLnVufg0KLi5cLi5cLi5ccmVzb3VyY2VcZ2VuXHRhcl9nZW5cb3NpLnJvb3QudXR0IHRhcl9nZW4gLS1vdXRwdXQ9YjJzdHlsZV9saWINCm1vdmUgL1kgKi52YiAuLlwNCgkAAAB0ZXN0aW5nLmiFAQAACiNpZm5kZWYgVEVTVElOR19URVNUSU5HX0gKI2RlZmluZSBURVNUSU5HX1RFU1RJTkdfSAoKI2luY2x1ZGUgPGIyc3R5bGUvc3RkaW8uaD4KI2luY2x1ZGUgPHRlc3RpbmcvdHlwZXMuaD4KI2luY2x1ZGUgPHRlc3RpbmcvYXNzZXJ0Lmg+CgpuYW1lc3BhY2UgYjJzdHlsZSB7Cm5hbWVzcGFjZSB0ZXN0aW5nIHsKCnZvaWQgZmluaXNoZWQoKSB7CiAgOjpiMnN0eWxlOjpzdGRfb3V0KCJUb3RhbCBhc3NlcnRpb25zOiAiKTsKICA6OmIyc3R5bGU6OnN0ZF9vdXQoX2Fzc2VydGlvbl9jb3VudCk7CiAgOjpiMnN0eWxlOjpzdGRfb3V0KCJcbiIpOwp9Cgp9ICAvLyBuYW1lc3BhY2UgdGVzdGluZwp9ICAvLyBuYW1lc3BhY2UgYjJzdHlsZQoKI2VuZGlmICAvLyBURVNUSU5HX1RFU1RJTkdfSAoTAAAAYjJzdHlsZS9kZWxlZ2F0ZXMuaJgHAADvu78KI2lmbmRlZiBCMlNUWUxFX0xJQl9CMlNUWUxFX0RFTEVHQVRFU19ICiNkZWZpbmUgQjJTVFlMRV9MSUJfQjJTVFlMRV9ERUxFR0FURVNfSAoKI2luY2x1ZGUgPGIyc3R5bGUvdHlwZXMuaD4KCm5hbWVzcGFjZSBiMnN0eWxlIHsKCnRlbXBsYXRlIDxSVD4KZGVsZWdhdGUgUlQgZnVuY3Rpb24oKTsKCnRlbXBsYXRlIDxULCBSVD4KZGVsZWdhdGUgUlQgZnVuY3Rpb24oVCk7Cgp0ZW1wbGF0ZSA8VCwgVDIsIFJUPgpkZWxlZ2F0ZSBSVCBmdW5jdGlvbihULCBUMik7Cgp0ZW1wbGF0ZSA8VCwgVDIsIFQzLCBSVD4KZGVsZWdhdGUgUlQgZnVuY3Rpb24oVCwgVDIsIFQzKTsKCnRlbXBsYXRlIDxULCBUMiwgVDMsIFQ0LCBSVD4KZGVsZWdhdGUgUlQgZnVuY3Rpb24oVCwgVDIsIFQzLCBUNCk7Cgp0ZW1wbGF0ZSA8VCwgVDIsIFQzLCBUNCwgVDUsIFJUPgpkZWxlZ2F0ZSBSVCBmdW5jdGlvbihULCBUMiwgVDMsIFQ0LCBUNSk7Cgp0ZW1wbGF0ZSA8VCwgVDIsIFQzLCBUNCwgVDUsIFQ2LCBSVD4KZGVsZWdhdGUgUlQgZnVuY3Rpb24oVCwgVDIsIFQzLCBUNCwgVDUsIFQ2KTsKCnRlbXBsYXRlIDxULCBUMiwgVDMsIFQ0LCBUNSwgVDYsIFQ3LCBSVD4KZGVsZWdhdGUgUlQgZnVuY3Rpb24oVCwgVDIsIFQzLCBUNCwgVDUsIFQ2LCBUNyk7Cgp0ZW1wbGF0ZSA8VCwgVDIsIFQzLCBUNCwgVDUsIFQ2LCBUNywgVDgsIFJUPgpkZWxlZ2F0ZSBSVCBmdW5jdGlvbihULCBUMiwgVDMsIFQ0LCBUNSwgVDYsIFQ3LCBUOCk7Cgp0ZW1wbGF0ZSA8VCwgVDIsIFQzLCBUNCwgVDUsIFQ2LCBUNywgVDgsIFQ5LCBSVD4KZGVsZWdhdGUgUlQgZnVuY3Rpb24oVCwgVDIsIFQzLCBUNCwgVDUsIFQ2LCBUNywgVDgsIFQ5KTsKCnRlbXBsYXRlIDxULCBUMiwgVDMsIFQ0LCBUNSwgVDYsIFQ3LCBUOCwgVDksIFQxMCwgUlQ+CmRlbGVnYXRlIFJUIGZ1bmN0aW9uKFQsIFQyLCBUMywgVDQsIFQ1LCBUNiwgVDcsIFQ4LCBUOSwgVDEwKTsKCnRlbXBsYXRlIDxULCBUMiwgVDMsIFQ0LCBUNSwgVDYsIFQ3LCBUOCwgVDksIFQxMCwgVDExLCBSVD4KZGVsZWdhdGUgUlQgZnVuY3Rpb24oVCwgVDIsIFQzLCBUNCwgVDUsIFQ2LCBUNywgVDgsIFQ5LCBUMTAsIFQxMSk7Cgp0ZW1wbGF0ZSA8VCwgVDIsIFQzLCBUNCwgVDUsIFQ2LCBUNywgVDgsIFQ5LCBUMTAsIFQxMSwgVDEyLCBSVD4KZGVsZWdhdGUgUlQgZnVuY3Rpb24oVCwgVDIsIFQzLCBUNCwgVDUsIFQ2LCBUNywgVDgsIFQ5LCBUMTAsIFQxMSwgVDEyKTsKCnRlbXBsYXRlIDxULCBUMiwgVDMsIFQ0LCBUNSwgVDYsIFQ3LCBUOCwgVDksIFQxMCwgVDExLCBUMTIsIFQxMywgUlQ+CmRlbGVnYXRlIFJUIGZ1bmN0aW9uKFQsIFQyLCBUMywgVDQsIFQ1LCBUNiwgVDcsIFQ4LCBUOSwgVDEwLCBUMTEsIFQxMiwgVDEzKTsKCnRlbXBsYXRlIDxULCBUMiwgVDMsIFQ0LCBUNSwgVDYsIFQ3LCBUOCwgVDksIFQxMCwgVDExLCBUMTIsIFQxMywgVDE0LCBSVD4KZGVsZWdhdGUgUlQgZnVuY3Rpb24oVCwgVDIsIFQzLCBUNCwgVDUsIFQ2LCBUNywgVDgsIFQ5LCBUMTAsIFQxMSwgVDEyLCBUMTMsIFQxNCk7Cgp0ZW1wbGF0ZSA8VCwgVDIsIFQzLCBUNCwgVDUsIFQ2LCBUNywgVDgsIFQ5LCBUMTAsIFQxMSwgVDEyLCBUMTMsIFQxNCwgVDE1LCBSVD4KZGVsZWdhdGUgUlQgZnVuY3Rpb24oVCwgVDIsIFQzLCBUNCwgVDUsIFQ2LCBUNywgVDgsIFQ5LCBUMTAsIFQxMSwgVDEyLCBUMTMsIFQxNCwgVDE1KTsKCnRlbXBsYXRlIDxULCBUMiwgVDMsIFQ0LCBUNSwgVDYsIFQ3LCBUOCwgVDksIFQxMCwgVDExLCBUMTIsIFQxMywgVDE0LCBUMTUsIFQxNiwgUlQ+CmRlbGVnYXRlIFJUIGZ1bmN0aW9uKFQsIFQyLCBUMywgVDQsIFQ1LCBUNiwgVDcsIFQ4LCBUOSwgVDEwLCBUMTEsIFQxMiwgVDEzLCBUMTQsIFQxNSwgVDE2KTsKCn0gIC8vIG5hbWVzcGFjZSBiMnN0eWxlCgojZW5kaWYgIC8vIEIyU1RZTEVfTElCX0IyU1RZTEVfREVMRUdBVEVTX0gSAAAAYjJzdHlsZS9oZWFwX3B0ci5oIgQAAO+7vwojaWZuZGVmIEIyU1RZTEVfTElCX0IyU1RZTEVfSEVBUF9QVFJfSAojZGVmaW5lIEIyU1RZTEVfTElCX0IyU1RZTEVfSEVBUF9QVFJfSAoKI2luY2x1ZGUgPGIyc3R5bGUvdHlwZXMuaD4KI2luY2x1ZGUgPGFzc2VydC5oPgoKbmFtZXNwYWNlIGIyc3R5bGUgewoKLy8gVHlwZSBUIGlzIHJlcXVpcmVkIHRvIHVzZSB0aGUgZGVhbGxvYyBpbnN0cnVjdGlvbi4KdGVtcGxhdGUgPFQ+CmNsYXNzIGhlYXBfcHRyIHsKICBUIF9hOwogIGludCBfczsKCiAgaW50IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5fczsKICB9CgogIGJvb2wgZW1wdHkoKSB7CiAgICByZXR1cm4gdGhpcy5zaXplKCkgPT0gMDsKICB9CgogIHZvaWQgY29uc3RydWN0KCkgewogICAgdGhpcy5fcyA9IDA7CiAgfQoKICB2b2lkIGRlc3RydWN0KCkgewogICAgaWYgKHRoaXMuZW1wdHkoKSkgcmV0dXJuOwogICAgZGVhbGxvYyh0aGlzLl9hKTsKICAgIHRoaXMuY29uc3RydWN0KCk7CiAgfQoKICB2b2lkIGFsbG9jKGludCBzaXplKSB7CiAgICB0aGlzLmRlc3RydWN0KCk7CiAgICA6OmFzc2VydChzaXplID4gMCk7CiAgICBUIHhbc2l6ZV07CiAgICB0aGlzLl9hID0geDsKICAgIHRoaXMuX3MgPSBzaXplOwogICAgdW5kZWZpbmUoeCk7CiAgfQoKICB2b2lkIGNvbnN0cnVjdChpbnQgc2l6ZSkgewogICAgdGhpcy5jb25zdHJ1Y3QoKTsKICAgIHRoaXMuYWxsb2Moc2l6ZSk7CiAgfQoKICBUIGdldChpbnQgaW5kZXgpIHsKICAgIDo6YXNzZXJ0KGluZGV4ID49IDApOwogICAgOjphc3NlcnQoaW5kZXggPCB0aGlzLnNpemUoKSk7CiAgICByZXR1cm4gdGhpcy5fYVtpbmRleF07CiAgfQoKICB2b2lkIHNldChpbnQgaW5kZXgsIFQgdikgewogICAgOjphc3NlcnQoaW5kZXggPj0gMCk7CiAgICA6OmFzc2VydChpbmRleCA8IHRoaXMuc2l6ZSgpKTsKICAgIHRoaXMuX2FbaW5kZXhdID0gdjsKICB9CgogIHZvaWQgcmVsZWFzZSgpIHsKICAgIHRoaXMuY29uc3RydWN0KCk7CiAgfQp9OwoKfSAgLy8gbmFtZXNwYWNlIGIyc3R5bGUKCiNlbmRpZiAgLy8gQjJTVFlMRV9MSUJfQjJTVFlMRV9IRUFQX1BUUl9IFwAAAGIyc3R5bGUvbG9hZGVkX21ldGhvZC5oiQIAAO+7vwojaWZuZGVmIEIyU1RZTEVfTElCX0IyU1RZTEVfTE9BREVEX01FVEhPRF9ICiNkZWZpbmUgQjJTVFlMRV9MSUJfQjJTVFlMRV9MT0FERURfTUVUSE9EX0gKCiNpbmNsdWRlIDxiMnN0eWxlL3R5cGVzLmg+CiNpbmNsdWRlIDxic3R5bGUvbG9hZF9tZXRob2QuaD4KCm5hbWVzcGFjZSBiMnN0eWxlIHsKCnZvaWQgbG9hZF9tZXRob2Qoc3RyaW5nIG0pIHsKICA6OmxvYWRfbWV0aG9kKG0pOwp9CgovLyBVbnN1cHBvcnRlZCB5ZXQuCiNpZm5kZWYgQjNTVFlMRQp0ZW1wbGF0ZSA8VD4KVCBleGVjdXRlX2xvYWRlZF9tZXRob2QoKSB7CiAgVCByZXN1bHQ7CiAgbG9naWMgImludGVycnVwdCBleGVjdXRlX2xvYWRlZF9tZXRob2QgQEBwcmVmaXhlc0B0ZW1wc0BzdHJpbmcgYjJzdHlsZV9fcmVzdWx0IjsKICByZXR1cm4gcmVzdWx0Owp9Cgp0ZW1wbGF0ZSA8VCwgUlQ+ClJUIGV4ZWN1dGVfbG9hZGVkX21ldGhvZChUIHApIHsKICBSVCByZXN1bHQ7CiAgbG9naWMgImludGVycnVwdCBleGVjdXRlX2xvYWRlZF9tZXRob2QgYjJzdHlsZV9fcCBiMnN0eWxlX19yZXN1bHQiOwogIHJldHVybiByZXN1bHQ7Cn0KI2VuZGlmCgkKfSAgLy8gbmFtZXNwYWNlIGIyc3R5bGUKCiNlbmRpZiAgLy8gQjJTVFlMRV9MSUJfQjJTVFlMRV9MT0FERURfTUVUSE9EX0gTAAAAYjJzdHlsZS9vcGVyYXRvcnMuaNU4AADvu78KI2lmbmRlZiBCMlNUWUxFX0xJQl9CMlNUWUxFX09QRVJBVE9SU19ICiNkZWZpbmUgQjJTVFlMRV9MSUJfQjJTVFlMRV9PUEVSQVRPUlNfSAoKI2luY2x1ZGUgPGIyc3R5bGUvdHlwZXMuaD4KI2luY2x1ZGUgPGJzdHlsZS9pbnQuaD4KI2luY2x1ZGUgPGJzdHlsZS9zdHIuaD4KCm5hbWVzcGFjZSBiMnN0eWxlIHsKCmJvb2wgYW5kKGJvb2wgaSwgYm9vbCBqKSB7CiAgaWYgKGkpIHJldHVybiBqOwogIHJldHVybiBmYWxzZTsKfQoKYm9vbCBvcihib29sIGksIGJvb2wgaikgewogIGlmIChpKSByZXR1cm4gdHJ1ZTsKICBpZiAoaikgcmV0dXJuIHRydWU7CiAgcmV0dXJuIGZhbHNlOwp9Cgpib29sIG5vdChib29sIGkpIHsKICBpZiAoaSkgcmV0dXJuIGZhbHNlOwogIHJldHVybiB0cnVlOwp9CgovLyBUT0RPOiBDb25zaWRlciB0byBhdm9pZCBhZGRpbmcgIl9wcmUiIGZvciBvcGVyYXRvciAhLgpib29sIG5vdF9wcmUoYm9vbCBpKSB7CiAgcmV0dXJuIG5vdChpKTsKfQoKYm9vbCBlcXVhbChzdHJpbmcgaSwgc3RyaW5nIGopIHsKICByZXR1cm4gOjpzdHJfZXF1YWwoaSwgaik7Cn0KCmJvb2wgbm90X2VxdWFsKHN0cmluZyBpLCBzdHJpbmcgaikgewogIHJldHVybiBub3QoZXF1YWwoaSwgaikpOwp9Cgpib29sIGVxdWFsKGJpZ3VpbnQgaSwgYmlndWludCBqKSB7CiAgcmV0dXJuIDo6ZXF1YWwoaSwgaik7Cn0KCmJvb2wgbm90X2VxdWFsKGJpZ3VpbnQgaSwgYmlndWludCBqKSB7CiAgcmV0dXJuIG5vdChlcXVhbChpLCBqKSk7Cn0KCmJvb2wgZXF1YWwobG9uZyBpLCBsb25nIGopIHsKICByZXR1cm4gOjplcXVhbChpLCBqKTsKfQoKYm9vbCBub3RfZXF1YWwobG9uZyBpLCBsb25nIGopIHsKICByZXR1cm4gbm90KGVxdWFsKGksIGopKTsKfQoKYm9vbCBlcXVhbChpbnQgaSwgaW50IGopIHsKICByZXR1cm4gOjplcXVhbChpLCBqKTsKfQoKYm9vbCBub3RfZXF1YWwoaW50IGksIGludCBqKSB7CiAgcmV0dXJuIG5vdChlcXVhbChpLCBqKSk7Cn0KCmJvb2wgZXF1YWwoYm9vbCBpLCBib29sIGopIHsKICBpZiAoaSkgcmV0dXJuIGo7CiAgcmV0dXJuIG5vdChqKTsKfQoKYm9vbCBub3RfZXF1YWwoYm9vbCBpLCBib29sIGopIHsKICByZXR1cm4gbm90KGVxdWFsKGksIGopKTsKfQoKI2lmZGVmIEIyU1RZTEUKYm9vbCBncmVhdGVyX3RoYW4oYmlndWludCBpLCBiaWd1aW50IGopIHsKICBib29sIHJlc3VsdDsKICBsb2dpYyAibW9yZSBiMnN0eWxlX19yZXN1bHQgYjJzdHlsZV9faSBiMnN0eWxlX19qIjsKICByZXR1cm4gcmVzdWx0Owp9CiNlbHNlCmJvb2wgZ3JlYXRlcl90aGFuKGJpZ3VpbnQgaSwgYmlndWludCBqKSB7CiAgYm9vbCByZXN1bHQ7CiAgbG9naWMgIm1vcmUgcmVzdWx0IGkgaiI7CiAgcmV0dXJuIHJlc3VsdDsKfQojZW5kaWYKCmJvb2wgZ3JlYXRlcl90aGFuKGxvbmcgaSwgbG9uZyBqKSB7CiAgcmV0dXJuIGdyZWF0ZXJfdGhhbig6OnRvX2JpZ3VpbnQoaSksIDo6dG9fYmlndWludChqKSk7Cn0KCmJvb2wgZ3JlYXRlcl90aGFuKGludCBpLCBpbnQgaikgewogIHJldHVybiBncmVhdGVyX3RoYW4oOjp0b19iaWd1aW50KGkpLCA6OnRvX2JpZ3VpbnQoaikpOwp9CgojaWZkZWYgQjJTVFlMRQpib29sIGxlc3NfdGhhbihiaWd1aW50IGksIGJpZ3VpbnQgaikgewogIGJvb2wgcmVzdWx0OwogIGxvZ2ljICJsZXNzIGIyc3R5bGVfX3Jlc3VsdCBiMnN0eWxlX19pIGIyc3R5bGVfX2oiOwogIHJldHVybiByZXN1bHQ7Cn0KI2Vsc2UKYm9vbCBsZXNzX3RoYW4oYmlndWludCBpLCBiaWd1aW50IGopIHsKICBib29sIHJlc3VsdDsKICBsb2dpYyAibGVzcyByZXN1bHQgaSBqIjsKICByZXR1cm4gcmVzdWx0Owp9CiNlbmRpZgoKYm9vbCBsZXNzX3RoYW4obG9uZyBpLCBsb25nIGopIHsKICByZXR1cm4gbGVzc190aGFuKDo6dG9fYmlndWludChpKSwgOjp0b19iaWd1aW50KGopKTsKfQoKYm9vbCBsZXNzX3RoYW4oaW50IGksIGludCBqKSB7CiAgcmV0dXJuIGxlc3NfdGhhbig6OnRvX2JpZ3VpbnQoaSksIDo6dG9fYmlndWludChqKSk7Cn0KCmJvb2wgbGVzc19vcl9lcXVhbChiaWd1aW50IGksIGJpZ3VpbnQgaikgewogIHJldHVybiBvcihsZXNzX3RoYW4oaSwgaiksIGVxdWFsKGksIGopKTsKfQoKYm9vbCBsZXNzX29yX2VxdWFsKGxvbmcgaSwgbG9uZyBqKSB7CiAgcmV0dXJuIG9yKGxlc3NfdGhhbihpLCBqKSwgZXF1YWwoaSwgaikpOwp9Cgpib29sIGxlc3Nfb3JfZXF1YWwoaW50IGksIGludCBqKSB7CiAgcmV0dXJuIG9yKGxlc3NfdGhhbihpLCBqKSwgZXF1YWwoaSwgaikpOwp9Cgpib29sIGdyZWF0ZXJfb3JfZXF1YWwoYmlndWludCBpLCBiaWd1aW50IGopIHsKICByZXR1cm4gb3IoZ3JlYXRlcl90aGFuKGksIGopLCBlcXVhbChpLCBqKSk7Cn0KCmJvb2wgZ3JlYXRlcl9vcl9lcXVhbChsb25nIGksIGxvbmcgaikgewogIHJldHVybiBvcihncmVhdGVyX3RoYW4oaSwgaiksIGVxdWFsKGksIGopKTsKfQoKYm9vbCBncmVhdGVyX29yX2VxdWFsKGludCBpLCBpbnQgaikgewogIHJldHVybiBvcihncmVhdGVyX3RoYW4oaSwgaiksIGVxdWFsKGksIGopKTsKfQoKI2lmZGVmIEIyU1RZTEUKYmlndWludCBhZGQoYmlndWludCBpLCBiaWd1aW50IGopIHsKICBsb2dpYyAiYWRkIGIyc3R5bGVfX2kgYjJzdHlsZV9faSBiMnN0eWxlX19qIjsKICByZXR1cm4gaTsKfQoKbG9uZyBhZGQobG9uZyBpLCBsb25nIGopIHsKICBsb2dpYyAiYWRkIGIyc3R5bGVfX2kgYjJzdHlsZV9faSBiMnN0eWxlX19qIjsKICByZXR1cm4gOjpmaXRfaW5fbG9uZyhpKTsKfQoKaW50IGFkZChpbnQgaSwgaW50IGopIHsKICBsb2dpYyAiYWRkIGIyc3R5bGVfX2kgYjJzdHlsZV9faSBiMnN0eWxlX19qIjsKICByZXR1cm4gOjpmaXRfaW5faW50KGkpOwp9CgpieXRlIGFkZChieXRlIGksIGJ5dGUgaikgewogIGxvZ2ljICJhZGQgYjJzdHlsZV9faSBiMnN0eWxlX19pIGIyc3R5bGVfX2oiOwogIHJldHVybiA6OmZpdF9pbl9ieXRlKGkpOwp9CiNlbHNlCmJpZ3VpbnQgYWRkKGJpZ3VpbnQgaSwgYmlndWludCBqKSB7CiAgbG9naWMgImFkZCBpIGkgaiI7CiAgcmV0dXJuIGk7Cn0KCmxvbmcgYWRkKGxvbmcgaSwgbG9uZyBqKSB7CiAgbG9naWMgImFkZCBpIGkgaiI7CiAgcmV0dXJuIDo6Zml0X2luX2xvbmcoaSk7Cn0KCmludCBhZGQoaW50IGksIGludCBqKSB7CiAgbG9naWMgImFkZCBpIGkgaiI7CiAgcmV0dXJuIDo6Zml0X2luX2ludChpKTsKfQoKYnl0ZSBhZGQoYnl0ZSBpLCBieXRlIGopIHsKICBsb2dpYyAiYWRkIGkgaSBqIjsKICByZXR1cm4gOjpmaXRfaW5fYnl0ZShpKTsKfQojZW5kaWYKCnN0cmluZyBhZGQoc3RyaW5nIGksIHN0cmluZyBqKSB7CiAgcmV0dXJuIDo6c3RyX2NvbmNhdChpLCBqKTsKfQoKI2lmZGVmIEIyU1RZTEUKYmlndWludCBtaW51cyhiaWd1aW50IGksIGJpZ3VpbnQgaikgewogIGxvZ2ljICJzdWJ0cmFjdCBiMnN0eWxlX19pIGIyc3R5bGVfX2kgYjJzdHlsZV9faiI7CiAgcmV0dXJuIGk7Cn0KCmxvbmcgbWludXMobG9uZyBpLCBsb25nIGopIHsKICBsb2dpYyAic3VidHJhY3QgYjJzdHlsZV9faSBiMnN0eWxlX19pIGIyc3R5bGVfX2oiOwogIHJldHVybiA6OmZpdF9pbl9sb25nKGkpOwp9CgppbnQgbWludXMoaW50IGksIGludCBqKSB7CiAgbG9naWMgInN1YnRyYWN0IGIyc3R5bGVfX2kgYjJzdHlsZV9faSBiMnN0eWxlX19qIjsKICByZXR1cm4gOjpmaXRfaW5faW50KGkpOwp9CgpiaWd1aW50IG11bHRpcGx5KGJpZ3VpbnQgaSwgYmlndWludCBqKSB7CiAgbG9naWMgIm11bHRpcGx5IGIyc3R5bGVfX2kgYjJzdHlsZV9faSBiMnN0eWxlX19qIjsKICByZXR1cm4gaTsKfQoKbG9uZyBtdWx0aXBseShsb25nIGksIGxvbmcgaikgewogIGxvZ2ljICJtdWx0aXBseSBiMnN0eWxlX19pIGIyc3R5bGVfX2kgYjJzdHlsZV9faiI7CiAgcmV0dXJuIDo6Zml0X2luX2xvbmcoaSk7Cn0KCmludCBtdWx0aXBseShpbnQgaSwgaW50IGopIHsKICBsb2dpYyAibXVsdGlwbHkgYjJzdHlsZV9faSBiMnN0eWxlX19pIGIyc3R5bGVfX2oiOwogIHJldHVybiA6OmZpdF9pbl9pbnQoaSk7Cn0KCmJpZ3VpbnQgZGl2aWRlKGJpZ3VpbnQgaSwgYmlndWludCBqKSB7CiAgYmlndWludCByZXN1bHQ7CiAgbG9naWMgImRpdmlkZSBiMnN0eWxlX19yZXN1bHQgQEBwcmVmaXhlc0B0ZW1wc0BzdHJpbmcgYjJzdHlsZV9faSBiMnN0eWxlX19qIjsKICByZXR1cm4gcmVzdWx0Owp9Cgpsb25nIGRpdmlkZShsb25nIGksIGxvbmcgaikgewogIGxvbmcgcmVzdWx0OwogIGxvZ2ljICJkaXZpZGUgYjJzdHlsZV9fcmVzdWx0IEBAcHJlZml4ZXNAdGVtcHNAc3RyaW5nIGIyc3R5bGVfX2kgYjJzdHlsZV9faiI7CiAgcmV0dXJuIDo6Zml0X2luX2xvbmcocmVzdWx0KTsKfQoKaW50IGRpdmlkZShpbnQgaSwgaW50IGopIHsKICBpbnQgcmVzdWx0OwogIGxvZ2ljICJkaXZpZGUgYjJzdHlsZV9fcmVzdWx0IEBAcHJlZml4ZXNAdGVtcHNAc3RyaW5nIGIyc3R5bGVfX2kgYjJzdHlsZV9faiI7CiAgcmV0dXJuIDo6Zml0X2luX2ludChyZXN1bHQpOwp9CgpiaWd1aW50IG1vZChiaWd1aW50IGksIGJpZ3VpbnQgaikgewogIGJpZ3VpbnQgcmVzdWx0OwogIGxvZ2ljICJkaXZpZGUgQEBwcmVmaXhlc0B0ZW1wc0BzdHJpbmcgYjJzdHlsZV9fcmVzdWx0IGIyc3R5bGVfX2kgYjJzdHlsZV9faiI7CiAgcmV0dXJuIHJlc3VsdDsKfQoKbG9uZyBtb2QobG9uZyBpLCBsb25nIGopIHsKICBsb25nIHJlc3VsdDsKICBsb2dpYyAiZGl2aWRlIEBAcHJlZml4ZXNAdGVtcHNAc3RyaW5nIGIyc3R5bGVfX3Jlc3VsdCBiMnN0eWxlX19pIGIyc3R5bGVfX2oiOwogIHJldHVybiA6OmZpdF9pbl9sb25nKHJlc3VsdCk7Cn0KCmludCBtb2QoaW50IGksIGludCBqKSB7CiAgaW50IHJlc3VsdDsKICBsb2dpYyAiZGl2aWRlIEBAcHJlZml4ZXNAdGVtcHNAc3RyaW5nIGIyc3R5bGVfX3Jlc3VsdCBiMnN0eWxlX19pIGIyc3R5bGVfX2oiOwogIHJldHVybiA6OmZpdF9pbl9pbnQocmVzdWx0KTsKfQoKYmlndWludCBwb3dlcihiaWd1aW50IGksIGJpZ3VpbnQgaikgewogIGxvZ2ljICJwb3dlciBiMnN0eWxlX19pIGIyc3R5bGVfX2kgYjJzdHlsZV9faiI7CiAgcmV0dXJuIGk7Cn0KCmxvbmcgcG93ZXIobG9uZyBpLCBsb25nIGopIHsKICBsb2dpYyAicG93ZXIgYjJzdHlsZV9faSBiMnN0eWxlX19pIGIyc3R5bGVfX2oiOwogIHJldHVybiA6OmZpdF9pbl9sb25nKGkpOwp9CgppbnQgcG93ZXIoaW50IGksIGludCBqKSB7CiAgbG9naWMgInBvd2VyIGIyc3R5bGVfX2kgYjJzdHlsZV9faSBiMnN0eWxlX19qIjsKICByZXR1cm4gOjpmaXRfaW5faW50KGkpOwp9CgpiaWd1aW50IGJpdF9hbmQoYmlndWludCBpLCBiaWd1aW50IGopIHsKICBsb2dpYyAiYW5kIGIyc3R5bGVfX2kgYjJzdHlsZV9faSBiMnN0eWxlX19qIjsKICByZXR1cm4gaTsKfQoKbG9uZyBiaXRfYW5kKGxvbmcgaSwgbG9uZyBqKSB7CiAgbG9naWMgImFuZCBiMnN0eWxlX19pIGIyc3R5bGVfX2kgYjJzdHlsZV9faiI7CiAgcmV0dXJuIGk7Cn0KCmludCBiaXRfYW5kKGludCBpLCBpbnQgaikgewogIGxvZ2ljICJhbmQgYjJzdHlsZV9faSBiMnN0eWxlX19pIGIyc3R5bGVfX2oiOwogIHJldHVybiBpOwp9CgpiaWd1aW50IGJpdF9vcihiaWd1aW50IGksIGJpZ3VpbnQgaikgewogIGxvZ2ljICJvciBiMnN0eWxlX19pIGIyc3R5bGVfX2kgYjJzdHlsZV9faiI7CiAgcmV0dXJuIGk7Cn0KCmxvbmcgYml0X29yKGxvbmcgaSwgbG9uZyBqKSB7CiAgbG9naWMgIm9yIGIyc3R5bGVfX2kgYjJzdHlsZV9faSBiMnN0eWxlX19qIjsKICByZXR1cm4gaTsKfQoKaW50IGJpdF9vcihpbnQgaSwgaW50IGopIHsKICBsb2dpYyAib3IgYjJzdHlsZV9faSBiMnN0eWxlX19pIGIyc3R5bGVfX2oiOwogIHJldHVybiBpOwp9CgpiaWd1aW50IHNlbGZfaW5jX3Bvc3QoYmlndWludCYgeCkgewogIGJpZ3VpbnQgciA9IHg7CiAgbG9naWMgImFkZCBiMnN0eWxlX194IGIyc3R5bGVfX3ggQEBwcmVmaXhlc0Bjb25zdGFudHNAaW50XzEiOwogIHJldHVybiByOwp9Cgpsb25nIHNlbGZfaW5jX3Bvc3QobG9uZyYgeCkgewogIGxvbmcgciA9IHg7CiAgbG9naWMgImFkZCBiMnN0eWxlX194IGIyc3R5bGVfX3ggQEBwcmVmaXhlc0Bjb25zdGFudHNAaW50XzEiOwogIHJldHVybiA6OmZpdF9pbl9sb25nKHIpOwp9CgppbnQgc2VsZl9pbmNfcG9zdChpbnQmIHgpIHsKICBpbnQgciA9IHg7CiAgbG9naWMgImFkZCBiMnN0eWxlX194IGIyc3R5bGVfX3ggQEBwcmVmaXhlc0Bjb25zdGFudHNAaW50XzEiOwogIHJldHVybiA6OmZpdF9pbl9pbnQocik7Cn0KCmJpZ3VpbnQgc2VsZl9kZWNfcG9zdChiaWd1aW50JiB4KSB7CiAgYmlndWludCByID0geDsKICBsb2dpYyAic3VidHJhY3QgYjJzdHlsZV9feCBiMnN0eWxlX194IEBAcHJlZml4ZXNAY29uc3RhbnRzQGludF8xIjsKICByZXR1cm4gcjsKfQoKbG9uZyBzZWxmX2RlY19wb3N0KGxvbmcmIHgpIHsKICBsb25nIHIgPSB4OwogIGxvZ2ljICJzdWJ0cmFjdCBiMnN0eWxlX194IGIyc3R5bGVfX3ggQEBwcmVmaXhlc0Bjb25zdGFudHNAaW50XzEiOwogIHJldHVybiA6OmZpdF9pbl9sb25nKHIpOwp9CgppbnQgc2VsZl9kZWNfcG9zdChpbnQmIHgpIHsKICBpbnQgciA9IHg7CiAgbG9naWMgInN1YnRyYWN0IGIyc3R5bGVfX3ggYjJzdHlsZV9feCBAQHByZWZpeGVzQGNvbnN0YW50c0BpbnRfMSI7CiAgcmV0dXJuIDo6Zml0X2luX2ludChyKTsKfQoKYmlndWludCBzZWxmX2luY19wcmUoYmlndWludCYgeCkgewogIGxvZ2ljICJhZGQgYjJzdHlsZV9feCBiMnN0eWxlX194IEBAcHJlZml4ZXNAY29uc3RhbnRzQGludF8xIjsKICByZXR1cm4geDsKfQoKbG9uZyBzZWxmX2luY19wcmUobG9uZyYgeCkgewogIGxvZ2ljICJhZGQgYjJzdHlsZV9feCBiMnN0eWxlX194IEBAcHJlZml4ZXNAY29uc3RhbnRzQGludF8xIjsKICByZXR1cm4gOjpmaXRfaW5fbG9uZyh4KTsKfQoKaW50IHNlbGZfaW5jX3ByZShpbnQmIHgpIHsKICBsb2dpYyAiYWRkIGIyc3R5bGVfX3ggYjJzdHlsZV9feCBAQHByZWZpeGVzQGNvbnN0YW50c0BpbnRfMSI7CiAgcmV0dXJuIDo6Zml0X2luX2ludCh4KTsKfQoKYmlndWludCBzZWxmX2RlY19wcmUoYmlndWludCYgeCkgewogIGxvZ2ljICJzdWJ0cmFjdCBiMnN0eWxlX194IGIyc3R5bGVfX3ggQEBwcmVmaXhlc0Bjb25zdGFudHNAaW50XzEiOwogIHJldHVybiB4Owp9Cgpsb25nIHNlbGZfZGVjX3ByZShsb25nJiB4KSB7CiAgbG9naWMgInN1YnRyYWN0IGIyc3R5bGVfX3ggYjJzdHlsZV9feCBAQHByZWZpeGVzQGNvbnN0YW50c0BpbnRfMSI7CiAgcmV0dXJuIDo6Zml0X2luX2xvbmcoeCk7Cn0KCmludCBzZWxmX2RlY19wcmUoaW50JiB4KSB7CiAgbG9naWMgInN1YnRyYWN0IGIyc3R5bGVfX3ggYjJzdHlsZV9feCBAQHByZWZpeGVzQGNvbnN0YW50c0BpbnRfMSI7CiAgcmV0dXJuIDo6Zml0X2luX2ludCh4KTsKfQoKYmlndWludCBleHRyYWN0KGJpZ3VpbnQgaSwgYmlndWludCBqKSB7CiAgYmlndWludCByOwogIGxvZ2ljICJleHRyYWN0IGIyc3R5bGVfX3IgQEBwcmVmaXhlc0B0ZW1wc0BiaWd1aW50IGIyc3R5bGVfX2kgYjJzdHlsZV9faiI7CiAgcmV0dXJuIHI7Cn0KCmJpZ3VpbnQgZXh0cmFjdF9yZW1haW5kZXIoYmlndWludCBpLCBiaWd1aW50IGopIHsKICBiaWd1aW50IHI7CiAgbG9naWMgImV4dHJhY3QgQEBwcmVmaXhlc0B0ZW1wc0BiaWd1aW50IGIyc3R5bGVfX3IgYjJzdHlsZV9faSBiMnN0eWxlX19qIjsKICByZXR1cm4gcjsKfQoKYmlndWludCBsZWZ0X3NoaWZ0KGJpZ3VpbnQgaSwgYmlndWludCBqKSB7CiAgYmlndWludCByOwogIGxvZ2ljICJsZWZ0X3NoaWZ0IGIyc3R5bGVfX3IgYjJzdHlsZV9faSBiMnN0eWxlX19qIjsKICByZXR1cm4gcjsKfQoKYmlndWludCByaWdodF9zaGlmdChiaWd1aW50IGksIGJpZ3VpbnQgaikgewogIGJpZ3VpbnQgcjsKICBsb2dpYyAicmlnaHRfc2hpZnQgYjJzdHlsZV9fciBiMnN0eWxlX19pIGIyc3R5bGVfX2oiOwogIHJldHVybiByOwp9CiNlbHNlCmJpZ3VpbnQgbWludXMoYmlndWludCBpLCBiaWd1aW50IGopIHsKICBsb2dpYyAic3VidHJhY3QgaSBpIGoiOwogIHJldHVybiBpOwp9Cgpsb25nIG1pbnVzKGxvbmcgaSwgbG9uZyBqKSB7CiAgbG9naWMgInN1YnRyYWN0IGkgaSBqIjsKICByZXR1cm4gOjpmaXRfaW5fbG9uZyhpKTsKfQoKaW50IG1pbnVzKGludCBpLCBpbnQgaikgewogIGxvZ2ljICJzdWJ0cmFjdCBpIGkgaiI7CiAgcmV0dXJuIDo6Zml0X2luX2ludChpKTsKfQoKYmlndWludCBtdWx0aXBseShiaWd1aW50IGksIGJpZ3VpbnQgaikgewogIGxvZ2ljICJtdWx0aXBseSBpIGkgaiI7CiAgcmV0dXJuIGk7Cn0KCmxvbmcgbXVsdGlwbHkobG9uZyBpLCBsb25nIGopIHsKICBsb2dpYyAibXVsdGlwbHkgaSBpIGoiOwogIHJldHVybiA6OmZpdF9pbl9sb25nKGkpOwp9CgppbnQgbXVsdGlwbHkoaW50IGksIGludCBqKSB7CiAgbG9naWMgIm11bHRpcGx5IGkgaSBqIjsKICByZXR1cm4gOjpmaXRfaW5faW50KGkpOwp9CgpiaWd1aW50IGRpdmlkZShiaWd1aW50IGksIGJpZ3VpbnQgaikgewogIGJpZ3VpbnQgcmVzdWx0OwogIGxvZ2ljICJkaXZpZGUgcmVzdWx0IEBAcHJlZml4ZXNAdGVtcHNAc3RyaW5nIGkgaiI7CiAgcmV0dXJuIHJlc3VsdDsKfQoKbG9uZyBkaXZpZGUobG9uZyBpLCBsb25nIGopIHsKICBsb25nIHJlc3VsdDsKICBsb2dpYyAiZGl2aWRlIHJlc3VsdCBAQHByZWZpeGVzQHRlbXBzQHN0cmluZyBpIGoiOwogIHJldHVybiA6OmZpdF9pbl9sb25nKHJlc3VsdCk7Cn0KCmludCBkaXZpZGUoaW50IGksIGludCBqKSB7CiAgaW50IHJlc3VsdDsKICBsb2dpYyAiZGl2aWRlIHJlc3VsdCBAQHByZWZpeGVzQHRlbXBzQHN0cmluZyBpIGoiOwogIHJldHVybiA6OmZpdF9pbl9pbnQocmVzdWx0KTsKfQoKYmlndWludCBtb2QoYmlndWludCBpLCBiaWd1aW50IGopIHsKICBiaWd1aW50IHJlc3VsdDsKICBsb2dpYyAiZGl2aWRlIEBAcHJlZml4ZXNAdGVtcHNAc3RyaW5nIHJlc3VsdCBpIGoiOwogIHJldHVybiByZXN1bHQ7Cn0KCmxvbmcgbW9kKGxvbmcgaSwgbG9uZyBqKSB7CiAgbG9uZyByZXN1bHQ7CiAgbG9naWMgImRpdmlkZSBAQHByZWZpeGVzQHRlbXBzQHN0cmluZyByZXN1bHQgaSBqIjsKICByZXR1cm4gOjpmaXRfaW5fbG9uZyhyZXN1bHQpOwp9CgppbnQgbW9kKGludCBpLCBpbnQgaikgewogIGludCByZXN1bHQ7CiAgbG9naWMgImRpdmlkZSBAQHByZWZpeGVzQHRlbXBzQHN0cmluZyByZXN1bHQgaSBqIjsKICByZXR1cm4gOjpmaXRfaW5faW50KHJlc3VsdCk7Cn0KCmJpZ3VpbnQgcG93ZXIoYmlndWludCBpLCBiaWd1aW50IGopIHsKICBsb2dpYyAicG93ZXIgaSBpIGoiOwogIHJldHVybiBpOwp9Cgpsb25nIHBvd2VyKGxvbmcgaSwgbG9uZyBqKSB7CiAgbG9naWMgInBvd2VyIGkgaSBqIjsKICByZXR1cm4gOjpmaXRfaW5fbG9uZyhpKTsKfQoKaW50IHBvd2VyKGludCBpLCBpbnQgaikgewogIGxvZ2ljICJwb3dlciBpIGkgaiI7CiAgcmV0dXJuIDo6Zml0X2luX2ludChpKTsKfQoKYmlndWludCBiaXRfYW5kKGJpZ3VpbnQgaSwgYmlndWludCBqKSB7CiAgbG9naWMgImFuZCBpIGkgaiI7CiAgcmV0dXJuIGk7Cn0KCmxvbmcgYml0X2FuZChsb25nIGksIGxvbmcgaikgewogIGxvZ2ljICJhbmQgaSBpIGoiOwogIHJldHVybiBpOwp9CgppbnQgYml0X2FuZChpbnQgaSwgaW50IGopIHsKICBsb2dpYyAiYW5kIGkgaSBqIjsKICByZXR1cm4gaTsKfQoKYmlndWludCBiaXRfb3IoYmlndWludCBpLCBiaWd1aW50IGopIHsKICBsb2dpYyAib3IgaSBpIGoiOwogIHJldHVybiBpOwp9Cgpsb25nIGJpdF9vcihsb25nIGksIGxvbmcgaikgewogIGxvZ2ljICJvciBpIGkgaiI7CiAgcmV0dXJuIGk7Cn0KCmludCBiaXRfb3IoaW50IGksIGludCBqKSB7CiAgbG9naWMgIm9yIGkgaSBqIjsKICByZXR1cm4gaTsKfQoKYmlndWludCBzZWxmX2luY19wb3N0KGJpZ3VpbnQmIHgpIHsKICBiaWd1aW50IHIgPSB4OwogIGxvZ2ljICJhZGQgeCB4IEBAcHJlZml4ZXNAY29uc3RhbnRzQGludF8xIjsKICByZXR1cm4gcjsKfQoKbG9uZyBzZWxmX2luY19wb3N0KGxvbmcmIHgpIHsKICBsb25nIHIgPSB4OwogIGxvZ2ljICJhZGQgeCB4IEBAcHJlZml4ZXNAY29uc3RhbnRzQGludF8xIjsKICByZXR1cm4gOjpmaXRfaW5fbG9uZyhyKTsKfQoKaW50IHNlbGZfaW5jX3Bvc3QoaW50JiB4KSB7CiAgaW50IHIgPSB4OwogIGxvZ2ljICJhZGQgeCB4IEBAcHJlZml4ZXNAY29uc3RhbnRzQGludF8xIjsKICByZXR1cm4gOjpmaXRfaW5faW50KHIpOwp9CgpiaWd1aW50IHNlbGZfZGVjX3Bvc3QoYmlndWludCYgeCkgewogIGJpZ3VpbnQgciA9IHg7CiAgbG9naWMgInN1YnRyYWN0IHggeCBAQHByZWZpeGVzQGNvbnN0YW50c0BpbnRfMSI7CiAgcmV0dXJuIHI7Cn0KCmxvbmcgc2VsZl9kZWNfcG9zdChsb25nJiB4KSB7CiAgbG9uZyByID0geDsKICBsb2dpYyAic3VidHJhY3QgeCB4IEBAcHJlZml4ZXNAY29uc3RhbnRzQGludF8xIjsKICByZXR1cm4gOjpmaXRfaW5fbG9uZyhyKTsKfQoKaW50IHNlbGZfZGVjX3Bvc3QoaW50JiB4KSB7CiAgaW50IHIgPSB4OwogIGxvZ2ljICJzdWJ0cmFjdCB4IHggQEBwcmVmaXhlc0Bjb25zdGFudHNAaW50XzEiOwogIHJldHVybiA6OmZpdF9pbl9pbnQocik7Cn0KCmJpZ3VpbnQgc2VsZl9pbmNfcHJlKGJpZ3VpbnQmIHgpIHsKICBsb2dpYyAiYWRkIHggeCBAQHByZWZpeGVzQGNvbnN0YW50c0BpbnRfMSI7CiAgcmV0dXJuIHg7Cn0KCmxvbmcgc2VsZl9pbmNfcHJlKGxvbmcmIHgpIHsKICBsb2dpYyAiYWRkIHggeCBAQHByZWZpeGVzQGNvbnN0YW50c0BpbnRfMSI7CiAgcmV0dXJuIDo6Zml0X2luX2xvbmcoeCk7Cn0KCmludCBzZWxmX2luY19wcmUoaW50JiB4KSB7CiAgbG9naWMgImFkZCB4IHggQEBwcmVmaXhlc0Bjb25zdGFudHNAaW50XzEiOwogIHJldHVybiA6OmZpdF9pbl9pbnQoeCk7Cn0KCmJpZ3VpbnQgc2VsZl9kZWNfcHJlKGJpZ3VpbnQmIHgpIHsKICBsb2dpYyAic3VidHJhY3QgeCB4IEBAcHJlZml4ZXNAY29uc3RhbnRzQGludF8xIjsKICByZXR1cm4geDsKfQoKbG9uZyBzZWxmX2RlY19wcmUobG9uZyYgeCkgewogIGxvZ2ljICJzdWJ0cmFjdCB4IHggQEBwcmVmaXhlc0Bjb25zdGFudHNAaW50XzEiOwogIHJldHVybiA6OmZpdF9pbl9sb25nKHgpOwp9CgppbnQgc2VsZl9kZWNfcHJlKGludCYgeCkgewogIGxvZ2ljICJzdWJ0cmFjdCB4IHggQEBwcmVmaXhlc0Bjb25zdGFudHNAaW50XzEiOwogIHJldHVybiA6OmZpdF9pbl9pbnQoeCk7Cn0KCmJpZ3VpbnQgZXh0cmFjdChiaWd1aW50IGksIGJpZ3VpbnQgaikgewogIGJpZ3VpbnQgcjsKICBsb2dpYyAiZXh0cmFjdCByIEBAcHJlZml4ZXNAdGVtcHNAYmlndWludCBpIGoiOwogIHJldHVybiByOwp9CgpiaWd1aW50IGV4dHJhY3RfcmVtYWluZGVyKGJpZ3VpbnQgaSwgYmlndWludCBqKSB7CiAgYmlndWludCByOwogIGxvZ2ljICJleHRyYWN0IEBAcHJlZml4ZXNAdGVtcHNAYmlndWludCByIGkgaiI7CiAgcmV0dXJuIHI7Cn0KCmJpZ3VpbnQgbGVmdF9zaGlmdChiaWd1aW50IGksIGJpZ3VpbnQgaikgewogIGJpZ3VpbnQgcjsKICBsb2dpYyAibGVmdF9zaGlmdCByIGkgaiI7CiAgcmV0dXJuIHI7Cn0KCmJpZ3VpbnQgcmlnaHRfc2hpZnQoYmlndWludCBpLCBiaWd1aW50IGopIHsKICBiaWd1aW50IHI7CiAgbG9naWMgInJpZ2h0X3NoaWZ0IHIgaSBqIjsKICByZXR1cm4gcjsKfQojZW5kaWYKCmJpZ3VpbnQgbGVmdF9zaGlmdChiaWd1aW50IGksIGludCBqKSB7CiAgcmV0dXJuIGxlZnRfc2hpZnQoaSwgOjp0b19iaWd1aW50KGopKTsKfQoKYmlndWludCByaWdodF9zaGlmdChiaWd1aW50IGksIGludCBqKSB7CiAgcmV0dXJuIHJpZ2h0X3NoaWZ0KGksIDo6dG9fYmlndWludChqKSk7Cn0KCmJpZ3VpbnQgbGVmdF9zaGlmdChiaWd1aW50IGksIGxvbmcgaikgewogIHJldHVybiBsZWZ0X3NoaWZ0KGksIDo6dG9fYmlndWludChqKSk7Cn0KCmJpZ3VpbnQgcmlnaHRfc2hpZnQoYmlndWludCBpLCBsb25nIGopIHsKICByZXR1cm4gcmlnaHRfc2hpZnQoaSwgOjp0b19iaWd1aW50KGopKTsKfQoKaW50IGxlZnRfc2hpZnQoaW50IGksIGludCBqKSB7CiAgcmV0dXJuIDo6dG9faW50KAogICAgbGVmdF9zaGlmdCg6OnRvX2JpZ3VpbnQoaSksCiAgICAgICAgICAgICAgIDo6dG9fYmlndWludChqKSkKICApOwp9CgppbnQgcmlnaHRfc2hpZnQoaW50IGksIGludCBqKSB7CiAgcmV0dXJuIDo6dG9faW50KAogICAgcmlnaHRfc2hpZnQoOjp0b19iaWd1aW50KGkpLAogICAgICAgICAgICAgICAgOjp0b19iaWd1aW50KGopKQogICk7Cn0KCmxvbmcgbGVmdF9zaGlmdChsb25nIGksIGxvbmcgaikgewogIHJldHVybiA6OnRvX2xvbmcoCiAgICBsZWZ0X3NoaWZ0KDo6dG9fYmlndWludChpKSwKICAgICAgICAgICAgICAgOjp0b19iaWd1aW50KGopKQogICk7Cn0KCmxvbmcgcmlnaHRfc2hpZnQobG9uZyBpLCBsb25nIGopIHsKICByZXR1cm4gOjp0b19sb25nKAogICAgcmlnaHRfc2hpZnQoOjp0b19iaWd1aW50KGkpLAogICAgICAgICAgICAgICAgOjp0b19iaWd1aW50KGopKQogICk7Cn0KCnZvaWQgc2VsZl9hbmQoYm9vbCYgaSwgYm9vbCBqKSB7CiAgaSA9IGFuZChpLCBqKTsKfQoKdm9pZCBzZWxmX29yKGJvb2wmIGksIGJvb2wgaikgewogIGkgPSBvcihpLCBqKTsKfQoKdm9pZCBzZWxmX2FkZChiaWd1aW50JiBpLCBiaWd1aW50IGopIHsKICBpID0gYWRkKGksIGopOwp9Cgp2b2lkIHNlbGZfYWRkKGxvbmcmIGksIGxvbmcgaikgewogIGkgPSBhZGQoaSwgaik7Cn0KCnZvaWQgc2VsZl9hZGQoaW50JiBpLCBpbnQgaikgewogIGkgPSBhZGQoaSwgaik7Cn0KCnZvaWQgc2VsZl9hZGQoYnl0ZSYgaSwgYnl0ZSBqKSB7CiAgaSA9IGFkZChpLCBqKTsKfQoKdm9pZCBzZWxmX21pbnVzKGJpZ3VpbnQmIGksIGJpZ3VpbnQgaikgewogIGkgPSBtaW51cyhpLCBqKTsKfQoKdm9pZCBzZWxmX21pbnVzKGxvbmcmIGksIGxvbmcgaikgewogIGkgPSBtaW51cyhpLCBqKTsKfQoKdm9pZCBzZWxmX21pbnVzKGludCYgaSwgaW50IGopIHsKICBpID0gbWludXMoaSwgaik7Cn0KCnZvaWQgc2VsZl9tdWx0aXBseShiaWd1aW50JiBpLCBiaWd1aW50IGopIHsKICBpID0gbXVsdGlwbHkoaSwgaik7Cn0KCnZvaWQgc2VsZl9tdWx0aXBseShsb25nJiBpLCBsb25nIGopIHsKICBpID0gbXVsdGlwbHkoaSwgaik7Cn0KCnZvaWQgc2VsZl9tdWx0aXBseShpbnQmIGksIGludCBqKSB7CiAgaSA9IG11bHRpcGx5KGksIGopOwp9Cgp2b2lkIHNlbGZfZGl2aWRlKGJpZ3VpbnQmIGksIGJpZ3VpbnQgaikgewogIGkgPSBkaXZpZGUoaSwgaik7Cn0KCnZvaWQgc2VsZl9kaXZpZGUobG9uZyYgaSwgbG9uZyBqKSB7CiAgaSA9IGRpdmlkZShpLCBqKTsKfQoKdm9pZCBzZWxmX2RpdmlkZShpbnQmIGksIGludCBqKSB7CiAgaSA9IGRpdmlkZShpLCBqKTsKfQoKdm9pZCBzZWxmX21vZChiaWd1aW50JiBpLCBiaWd1aW50IGopIHsKICBpID0gbW9kKGksIGopOwp9Cgp2b2lkIHNlbGZfbW9kKGxvbmcmIGksIGxvbmcgaikgewogIGkgPSBtb2QoaSwgaik7Cn0KCnZvaWQgc2VsZl9tb2QoaW50JiBpLCBpbnQgaikgewogIGkgPSBtb2QoaSwgaik7Cn0KCnZvaWQgc2VsZl9wb3dlcihiaWd1aW50JiBpLCBiaWd1aW50IGopIHsKICBpID0gcG93ZXIoaSwgaik7Cn0KCnZvaWQgc2VsZl9wb3dlcihsb25nJiBpLCBsb25nIGopIHsKICBpID0gcG93ZXIoaSwgaik7Cn0KCnZvaWQgc2VsZl9wb3dlcihpbnQmIGksIGludCBqKSB7CiAgaSA9IHBvd2VyKGksIGopOwp9Cgp2b2lkIHNlbGZfYml0X2FuZChiaWd1aW50JiBpLCBiaWd1aW50IGopIHsKICBpID0gYml0X2FuZChpLCBqKTsKfQoKdm9pZCBzZWxmX2JpdF9hbmQobG9uZyYgaSwgbG9uZyBqKSB7CiAgaSA9IGJpdF9hbmQoaSwgaik7Cn0KCnZvaWQgc2VsZl9iaXRfYW5kKGludCYgaSwgaW50IGopIHsKICBpID0gYml0X2FuZChpLCBqKTsKfQoKdm9pZCBzZWxmX2JpdF9vcihiaWd1aW50JiBpLCBiaWd1aW50IGopIHsKICBpID0gYml0X29yKGksIGopOwp9Cgp2b2lkIHNlbGZfYml0X29yKGxvbmcmIGksIGxvbmcgaikgewogIGkgPSBiaXRfb3IoaSwgaik7Cn0KCnZvaWQgc2VsZl9iaXRfb3IoaW50JiBpLCBpbnQgaikgewogIGkgPSBiaXRfb3IoaSwgaik7Cn0KCnZvaWQgc2VsZl9sZWZ0X3NoaWZ0KGJpZ3VpbnQmIGksIGJpZ3VpbnQgaikgewogIGkgPSBsZWZ0X3NoaWZ0KGksIGopOwp9Cgp2b2lkIHNlbGZfcmlnaHRfc2hpZnQoYmlndWludCYgaSwgYmlndWludCBqKSB7CiAgaSA9IHJpZ2h0X3NoaWZ0KGksIGopOwp9Cgp2b2lkIHNlbGZfbGVmdF9zaGlmdChsb25nJiBpLCBsb25nIGopIHsKICBpID0gbGVmdF9zaGlmdChpLCBqKTsKfQoKdm9pZCBzZWxmX3JpZ2h0X3NoaWZ0KGxvbmcmIGksIGxvbmcgaikgewogIGkgPSByaWdodF9zaGlmdChpLCBqKTsKfQoKdm9pZCBzZWxmX2xlZnRfc2hpZnQoaW50JiBpLCBpbnQgaikgewogIGkgPSBsZWZ0X3NoaWZ0KGksIGopOwp9Cgp2b2lkIHNlbGZfcmlnaHRfc2hpZnQoaW50JiBpLCBpbnQgaikgewogIGkgPSByaWdodF9zaGlmdChpLCBqKTsKfQoKfSAgLy8gbmFtZXNwYWNlIGIyc3R5bGUKCiNlbmRpZiAgLy8gQjJTVFlMRV9MSUJfQjJTVFlMRV9PUEVSQVRPUlNfSBYAAABiMnN0eWxlL3Jhd19oZWFwX3B0ci5oZQMAAO+7vw0KLyogVE9ETzogSW1wbGVtZW50YXRpb24NCiNpZm5kZWYgQjJTVFlMRV9MSUJfQjJTVFlMRV9SQVdfSEVBUF9QVFINCiNkZWZpbmUgQjJTVFlMRV9MSUJfQjJTVFlMRV9SQVdfSEVBUF9QVFINCg0KI2luY2x1ZGUgPGIyc3R5bGUuaD4NCiNpbmNsdWRlIDxhc3NlcnQuaD4NCg0KbmFtZXNwYWNlIGIyc3R5bGUgew0KDQpjbGFzcyByYXdfaGVhcF9wdHIgew0KICB0eXBlX3B0ciBwOw0KDQogIGJvb2wgaXNfbnVsbCgpIHsNCiAgICBib29sIHI7DQogICAgbG9naWMgImVtcHR5IGIyc3R5bGVfX3IgdGhpcy5wIjsNCiAgICByZXR1cm4gcjsNCiAgfQ0KDQogIHRlbXBsYXRlIDxUPg0KICBUIGdldCgpIHsNCiAgICB0eXBlX3B0ciB2ID0gdGhpcy5wOw0KICAgIHN0YXRpY19jYXN0KHYsIFQpOw0KICAgIHJldHVybiB2Ow0KICB9DQoNCiAgdm9pZCBzZXRfbnVsbCgpIHsNCiAgICB0eXBlX3B0ciB4Ow0KICAgIHRoaXMucCA9IHg7DQogIH0NCg0KICAvLyBUT0RPOiBGaW5kIGEgZ29vZCB3YXkgdG8gYXV0b21hdGljYWxseSBkZWFsbG9jIGhlYXAgcmVzb3VyY2VzLg0KICB0ZW1wbGF0ZSA8VD4NCiAgdm9pZCBkZXN0cnVjdCgpIHsNCiAgICA6OmFzc2VydCghdGhpcy5pc19udWxsKCkpOw0KICAgIFQgeCA9IHRoaXMuZ2V0PFQ+KCk7DQogICAgZGVhbGxvYyh4KTsNCiAgICB0eXBlX3B0ciB4Ow0KICAgIHRoaXMucCA9IHg7DQogIH0NCg0KICB0ZW1wbGF0ZSA8VD4NCiAgdm9pZCBzZXQoVCB0KSB7DQogICAgc3RhdGljX2Nhc3QodCwgdHlwZV9wdHIpOw0KICAgIHRoaXMucCA9IHQ7DQogIH0NCn07DQoNCn0gIC8vIG5hbWVzcGFjZSBiMnN0eWxlDQoNCiNlbmRpZiAgLy8gQjJTVFlMRV9MSUJfQjJTVFlMRV9SQVdfSEVBUF9QVFINCiovDQAAAGIyc3R5bGUvcmVmLmg3AwAA77u/CiNpZm5kZWYgQjJTVFlMRV9MSUJfQjJTVFlMRV9SRUZfSAojZGVmaW5lIEIyU1RZTEVfTElCX0IyU1RZTEVfUkVGX0gKCiNpbmNsdWRlIDxiMnN0eWxlLmg+CiNpbmNsdWRlIDxiMnN0eWxlL2hlYXBfcHRyLmg+CiNpbmNsdWRlIDxhc3NlcnQuaD4KCm5hbWVzcGFjZSBiMnN0eWxlIHsKCnRlbXBsYXRlIDxUPgpjbGFzcyByZWYgewogIGhlYXBfcHRyPFQ+IF9hOwoKICB2b2lkIGRlc3RydWN0KCkgewogICAgdGhpcy5fYS5kZXN0cnVjdCgpOwogIH0KCiAgYm9vbCBlbXB0eSgpIHsKICAgIHJldHVybiB0aGlzLl9hLmVtcHR5KCk7CiAgfQoKICB2b2lkIHNldChUIHYpIHsKICAgIGlmICh0aGlzLmVtcHR5KCkpIHRoaXMuX2EuYWxsb2MoMSk7CiAgICB0aGlzLl9hLnNldCgwLCB2KTsKICB9CgogIHZvaWQgYWxsb2MoKSB7CiAgICBUIHY7CiAgICB0aGlzLnNldCh2KTsKICB9CgogIFQgZ2V0KCkgewogICAgOjphc3NlcnQoIXRoaXMuZW1wdHkoKSk7CiAgICByZXR1cm4gdGhpcy5fYS5nZXQoMCk7CiAgfQoKICBUIHJlbGVhc2UoKSB7CiAgICBUIHIgPSB0aGlzLmdldCgpOwoJdGhpcy5kZXN0cnVjdCgpOwogICAgcmV0dXJuIHI7CiAgfQoKICB2b2lkIGNvbnN0cnVjdCgpIHt9CgogIHZvaWQgY29uc3RydWN0KFQgdikgewogICAgdGhpcy5jb25zdHJ1Y3QoKTsKICAgIHRoaXMuc2V0KHYpOwogIH0KCiAgdm9pZCBjb25zdHJ1Y3QocmVmPFQ+JiBvdGhlcikgewogICAgdGhpcy5jb25zdHJ1Y3Qob3RoZXIucmVsZWFzZSgpKTsKICB9Cn07Cgp9ICAvLyBuYW1lc3BhY2UgYjJzdHlsZQoKI2VuZGlmICAvLyBCMlNUWUxFX0xJQl9CMlNUWUxFX1JFRl9ICg8AAABiMnN0eWxlL3N0ZGlvLmhQBAAA77u/CiNpZm5kZWYgQjJTVFlMRV9MSUJfQjJTVFlMRV9TVERJT19ICiNkZWZpbmUgQjJTVFlMRV9MSUJfQjJTVFlMRV9TVERJT19ICgojaW5jbHVkZSA8YjJzdHlsZS90b19zdHIuaD4KI2luY2x1ZGUgPGIyc3R5bGUvdHlwZXMuaD4KI2luY2x1ZGUgPHN0ZGlvLmg+CgpuYW1lc3BhY2UgYjJzdHlsZSB7Cgp2b2lkIHN0ZF9vdXQoc3RyaW5nIGkpIHsKICA6OnN0ZF9vdXQoaSk7Cn0KCnZvaWQgc3RkX2VycihzdHJpbmcgaSkgewogIDo6c3RkX2VycihpKTsKfQoKLy8gVW5zdXBwb3J0ZWQgeWV0LgojaWZuZGVmIEIzU1RZTEUKdGVtcGxhdGUgPFQ+CnZvaWQgc3RkX291dChUIGkpIHsKICBzdGRfb3V0KHRvX3N0cihpKSk7Cn0KCnRlbXBsYXRlIDxUPgp2b2lkIHN0ZF9lcnIoVCBpKSB7CiAgc3RkX2Vycih0b19zdHIoaSkpOwp9CgovLyBUT0RPOiBJbXBsZW1lbnQgdGVtcGxhdGUgaW5mZXJlbmNlLgp2b2lkIHN0ZF9vdXQoYm9vbCBpKSB7CiAgc3RkX291dDxib29sPihpKTsKfQoKdm9pZCBzdGRfZXJyKGJvb2wgaSkgewogIHN0ZF9lcnI8Ym9vbD4oaSk7Cn0KCnZvaWQgc3RkX291dChpbnQgaSkgewogIHN0ZF9vdXQ8aW50PihpKTsKfQoKdm9pZCBzdGRfZXJyKGludCBpKSB7CiAgc3RkX2VycjxpbnQ+KGkpOwp9Cgp2b2lkIHN0ZF9vdXQoYmlndWludCBpKSB7CiAgc3RkX291dDxiaWd1aW50PihpKTsKfQoKdm9pZCBzdGRfZXJyKGJpZ3VpbnQgaSkgewogIHN0ZF9lcnI8YmlndWludD4oaSk7Cn0KI2Vsc2UKdm9pZCBzdGRfb3V0KGJvb2wgaSkgewogIHN0ZF9vdXQodG9fc3RyKGkpKTsKfQoKdm9pZCBzdGRfZXJyKGJvb2wgaSkgewogIHN0ZF9lcnIodG9fc3RyKGkpKTsKfQoKdm9pZCBzdGRfb3V0KGludCBpKSB7CiAgc3RkX291dCh0b19zdHIoaSkpOwp9Cgp2b2lkIHN0ZF9lcnIoaW50IGkpIHsKICBzdGRfZXJyKHRvX3N0cihpKSk7Cn0KCnZvaWQgc3RkX291dChiaWd1aW50IGkpIHsKICBzdGRfb3V0KHRvX3N0cihpKSk7Cn0KCnZvaWQgc3RkX2VycihiaWd1aW50IGkpIHsKICBzdGRfZXJyKHRvX3N0cihpKSk7Cn0KI2VuZGlmCgp9ICAvLyBuYW1lc3BhY2UgYjJzdHlsZQoKI2VuZGlmICAvLyBCMlNUWUxFX0xJQl9CMlNUWUxFX1NURElPX0gKDQAAAGIyc3R5bGUvc3RyLmilAgAA77u/CiNpZm5kZWYgQjJTVFlMRV9MSUJfQjJTVFlMRV9TVFJfSAojZGVmaW5lIEIyU1RZTEVfTElCX0IyU1RZTEVfU1RSX0gKCiNpbmNsdWRlIDxiMnN0eWxlL3R5cGVzLmg+CiNpbmNsdWRlIDxic3R5bGUvc3RyLmg+CiNpbmNsdWRlIDxhc3NlcnQuaD4KCm5hbWVzcGFjZSBiMnN0eWxlIHsKCnN0cmluZyBzdHJfbWlkKHN0cmluZyBzLCBpbnQgaSwgaW50IGwpIHsKICA6OmFzc2VydChfX1NUQVRFTUVOVF9fICsgIkAiICsgX19GSUxFX18sIChpID49IDApICYmIChsID49IDApKTsKICBzdHJpbmcgcjsKICBsb2dpYyAiY3V0X2xlbiBiMnN0eWxlX19yIGIyc3R5bGVfX3MgYjJzdHlsZV9faSBiMnN0eWxlX19sIjsKICByZXR1cm4gcjsKfQoKYm9vbCBzdHJfZW5kc193aXRoKHN0cmluZyBpLCBzdHJpbmcgaikgewogIGludCBpbCA9IDo6c3RyX2xlbihpKTsKICBpbnQgamwgPSA6OnN0cl9sZW4oaik7CiAgaWYgKGlsIDwgamwpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgaWYgKGlsID09IGpsKSB7CiAgICByZXR1cm4gOjpzdHJfZXF1YWwoaSwgaik7CiAgfQogIHN0cmluZyBzaSA9IHN0cl9taWQoaSwgaWwgLSBqbCwgamwpOwogIHJldHVybiA6OnN0cl9lcXVhbChzaSwgaik7Cn0KCn0gIC8vIG5hbWVzcGFjZSBiMnN0eWxlCgojZW5kaWYgIC8vIEIyU1RZTEVfTElCX0IyU1RZTEVfU1RSX0gQAAAAYjJzdHlsZS90b19zdHIuaOgIAADvu78NCiNpZm5kZWYgQjJTVFlMRV9MSUJfQjJTVFlMRV9UT19TVFJfSA0KI2RlZmluZSBCMlNUWUxFX0xJQl9CMlNUWUxFX1RPX1NUUl9IDQoNCiNpbmNsdWRlIDxiMnN0eWxlL2xvYWRlZF9tZXRob2QuaD4NCiNpbmNsdWRlIDxiMnN0eWxlL29wZXJhdG9ycy5oPg0KI2luY2x1ZGUgPGxpbWl0cy5oPg0KDQpuYW1lc3BhY2UgYjJzdHlsZSB7DQoNCnN0cmluZyB0b19zdHIoc3RyaW5nIGkpIHsNCiAgcmV0dXJuIGk7DQp9DQoNCnN0cmluZyB0b19zdHIoYnl0ZSBpKSB7DQogIHJldHVybiA6OnRvX3N0cihpKTsNCn0NCg0Kc3RyaW5nIHRvX3N0cihib29sIGkpIHsNCiAgaWYgKGkpIHJldHVybiAiVHJ1ZSI7DQogIHJldHVybiAiRmFsc2UiOw0KfQ0KDQpzdHJpbmcgbGVnYWN5X2JpZ3VpbnRfdG9fc3RyKGJpZ3VpbnQgaSkgew0KICBpZiAoaSA9PSAwTCkgew0KICAgIHJldHVybiAiMCI7DQogIH0NCiAgc3RyaW5nIHM7DQogIHdoaWxlIChpID4gMEwpIHsNCiAgICBpbnQgYiA9IDo6dG9faW50KG1vZChpLCAxMEwpKTsNCiAgICBpIC89IDEwTDsNCiAgICBiICs9IDQ4Ow0KICAgIHMgPSA6OnN0cl9jb25jYXQoOjp0b19zdHIoOjp0b19ieXRlKGIpKSwgcyk7DQogIH0NCiAgcmV0dXJuIHM7DQp9DQoNCi8vIFVuc3VwcG9ydGVkIHlldC4NCiNpZm5kZWYgQjNTVFlMRQ0Kc3RyaW5nIGJpZ3VpbnRfdG9fc3RyKGJpZ3VpbnQgaSkgew0KICBsb2FkX21ldGhvZCgiYmlnX3VpbnRfdG9fc3RyIik7DQogIHJldHVybiBleGVjdXRlX2xvYWRlZF9tZXRob2Q8YmlndWludCwgc3RyaW5nPihpKTsNCn0NCiNlbHNlDQpzdHJpbmcgYmlndWludF90b19zdHIoYmlndWludCBpKSB7DQogIHJldHVybiBsZWdhY3lfYmlndWludF90b19zdHIoaSk7DQp9DQojZW5kaWYNCg0Kc3RyaW5nIHRvX3N0cihiaWd1aW50IGkpIHsNCiAgcmV0dXJuIGJpZ3VpbnRfdG9fc3RyKGkpOw0KfQ0KDQojaWZuZGVmIEIzU1RZTEUNCnRlbXBsYXRlIDxUPg0Kc3RyaW5nIGJpZ3VpbnRfdG9fc3RyX2ZvcndhcmQoVCBpLCBUIE1BWCkgew0KICBpZiAoaSA8PSBNQVgpIHsNCiAgICByZXR1cm4gYmlndWludF90b19zdHIoOjp0b19iaWd1aW50KGkpKTsNCiAgfQ0KICBpIC09IE1BWDsNCiAgaSA9IE1BWCAtIGk7DQogIFQgXzIgPSAyOw0KICBpICs9IF8yOw0KICByZXR1cm4gOjpzdHJfY29uY2F0KCItIiwgYmlndWludF90b19zdHIoOjp0b19iaWd1aW50KGkpKSk7DQp9DQoNCnN0cmluZyBpbnRfdG9fc3RyKGludCBpKSB7DQogIHJldHVybiBiaWd1aW50X3RvX3N0cl9mb3J3YXJkPGludD4oaSwgOjpJTlRfTUFYKTsNCn0NCg0Kc3RyaW5nIHVmbG9hdF90b19zdHIodWZsb2F0IGkpIHsNCiAgbG9hZF9tZXRob2QoImJpZ191ZGVjX3RvX3N0ciIpOw0KICByZXR1cm4gZXhlY3V0ZV9sb2FkZWRfbWV0aG9kPHVmbG9hdCwgc3RyaW5nPihpKTsNCn0NCg0Kc3RyaW5nIGxvbmdfdG9fc3RyKGxvbmcgaSkgew0KICByZXR1cm4gYmlndWludF90b19zdHJfZm9yd2FyZDxsb25nPihpLCA6OkxPTkdfTUFYKTsNCn0NCiNlbHNlDQpzdHJpbmcgYmlndWludF90b19zdHJfZm9yd2FyZChiaWd1aW50IGksIGJpZ3VpbnQgbWF4KSB7DQogIGlmIChpIDw9IG1heCkgew0KICAgIHJldHVybiBiaWd1aW50X3RvX3N0cihpKTsNCiAgfQ0KICBpIC09IG1heDsNCiAgaSA9IG1heCAtIGk7DQogIGJpZ3VpbnQgXzIgPSAyOw0KICBpICs9IF8yOw0KICByZXR1cm4gOjpzdHJfY29uY2F0KCItIiwgYmlndWludF90b19zdHIoaSkpOw0KfQ0KDQpzdHJpbmcgaW50X3RvX3N0cihpbnQgaSkgew0KICByZXR1cm4gYmlndWludF90b19zdHJfZm9yd2FyZCg6OnRvX2JpZ3VpbnQoaSksIDo6dG9fYmlndWludCg6OklOVF9NQVgpKTsNCn0NCg0Kc3RyaW5nIGxvbmdfdG9fc3RyKGxvbmcgaSkgew0KICByZXR1cm4gYmlndWludF90b19zdHJfZm9yd2FyZCg6OnRvX2JpZ3VpbnQoaSksIDo6dG9fYmlndWludCg6OkxPTkdfTUFYKSk7DQp9DQoNCnN0cmluZyB1ZmxvYXRfdG9fc3RyKHVmbG9hdCBpKSB7DQogIHJldHVybiAidWZsb2F0ICh1bnN1cHBvcnRlZCkiOw0KfQ0KI2VuZGlmDQoNCnN0cmluZyB0b19zdHIoaW50IGkpIHsNCiAgcmV0dXJuIGludF90b19zdHIoaSk7DQp9DQoNCnN0cmluZyB0b19zdHIodWZsb2F0IGkpIHsNCiAgcmV0dXJuIHVmbG9hdF90b19zdHIoaSk7DQp9DQoNCnN0cmluZyB0b19zdHIobG9uZyBpKSB7DQogIHJldHVybiBsb25nX3RvX3N0cihpKTsNCn0NCg0KfSAgLy8gbmFtZXNwYWNlIGIyc3R5bGUNCg0KI2VuZGlmICAvLyBCMlNUWUxFX0xJQl9CMlNUWUxFX1RPX1NUUl9IDQoPAAAAYjJzdHlsZS90eXBlcy5omgEAAO+7vwojaWZuZGVmIEIyU1RZTEVfTElCX0IyU1RZTEVfVFlQRVNfSAojZGVmaW5lIEIyU1RZTEVfTElCX0IyU1RZTEVfVFlQRVNfSAoKI2luY2x1ZGUgPGJzdHlsZS90eXBlcy5oPgoKLy8gVE9ETzogU2VhcmNoIHR5cGVzIGluIHBhcmVudCBzY29wZXMuCm5hbWVzcGFjZSBiMnN0eWxlIHsKCnR5cGVkZWYgOjpzdHJpbmcgc3RyaW5nOwp0eXBlZGVmIDo6dm9pZCB2b2lkOwp0eXBlZGVmIDo6Ym9vbCBib29sOwp0eXBlZGVmIDo6YmlndWludCBiaWd1aW50Owp0eXBlZGVmIDo6bG9uZyBsb25nOwp0eXBlZGVmIDo6aW50IGludDsKdHlwZWRlZiA6OmJ5dGUgYnl0ZTsKdHlwZWRlZiA6OnVmbG9hdCB1ZmxvYXQ7Cgp9ICAvLyBuYW1lc3BhY2UgYjJzdHlsZQoKI2VuZGlmICAvLyBCMlNUWUxFX0xJQl9CMlNUWUxFX1RZUEVTX0gKEAAAAGIyc3R5bGUvdWZsb2F0Lmg6DQAA77u/CiNpZm5kZWYgQjJTVFlMRV9MSUJfQjJTVFlMRV9VRkxPQVRfSAojZGVmaW5lIEIyU1RZTEVfTElCX0IyU1RZTEVfVUZMT0FUX0gKCiNpbmNsdWRlIDxiMnN0eWxlL2xvYWRlZF9tZXRob2QuaD4KI2luY2x1ZGUgPGIyc3R5bGUvc3RkaW8uaD4KI2luY2x1ZGUgPGIyc3R5bGUvc3RyLmg+CiNpbmNsdWRlIDxiMnN0eWxlL3R5cGVzLmg+CgpuYW1lc3BhY2UgYjJzdHlsZSB7Cgpib29sIGVxdWFsKHVmbG9hdCBpLCB1ZmxvYXQgaikgewogIGJvb2wgcmVzdWx0OwogIGxvZ2ljICJmbG9hdF9lcXVhbCBiMnN0eWxlX19yZXN1bHQgYjJzdHlsZV9faSBiMnN0eWxlX19qIjsKICByZXR1cm4gcmVzdWx0Owp9Cgpib29sIG5vdF9lcXVhbCh1ZmxvYXQgaSwgdWZsb2F0IGopIHsKICBib29sIHJlc3VsdDsKICBsb2dpYyAiZmxvYXRfZXF1YWwgYjJzdHlsZV9fcmVzdWx0IGIyc3R5bGVfX2kgYjJzdHlsZV9faiI7CiAgcmV0dXJuIG5vdChyZXN1bHQpOwp9Cgpib29sIGdyZWF0ZXJfdGhhbih1ZmxvYXQgaSwgdWZsb2F0IGopIHsKICBib29sIHJlc3VsdDsKICBsb2dpYyAiZmxvYXRfbW9yZSBiMnN0eWxlX19yZXN1bHQgYjJzdHlsZV9faSBiMnN0eWxlX19qIjsKICByZXR1cm4gcmVzdWx0Owp9Cgpib29sIGdyZWF0ZXJfb3JfZXF1YWwodWZsb2F0IGksIHVmbG9hdCBqKSB7CiAgcmV0dXJuIG9yKGdyZWF0ZXJfdGhhbihpLCBqKSwgZXF1YWwoaSwgaikpOwp9Cgpib29sIGxlc3NfdGhhbih1ZmxvYXQgaSwgdWZsb2F0IGopIHsKICBib29sIHJlc3VsdDsKICBsb2dpYyAiZmxvYXRfbGVzcyBiMnN0eWxlX19yZXN1bHQgYjJzdHlsZV9faSBiMnN0eWxlX19qIjsKICByZXR1cm4gcmVzdWx0Owp9Cgpib29sIGxlc3Nfb3JfZXF1YWwodWZsb2F0IGksIHVmbG9hdCBqKSB7CiAgcmV0dXJuIG9yKGxlc3NfdGhhbihpLCBqKSwgZXF1YWwoaSwgaikpOwp9Cgp1ZmxvYXQgYWRkKHVmbG9hdCBpLCB1ZmxvYXQgaikgewogIGxvZ2ljICJmbG9hdF9hZGQgYjJzdHlsZV9faSBiMnN0eWxlX19pIGIyc3R5bGVfX2oiOwogIHJldHVybiBpOwp9Cgp1ZmxvYXQgbWludXModWZsb2F0IGksIHVmbG9hdCBqKSB7CiAgbG9naWMgImZsb2F0X3N1YnRyYWN0IGIyc3R5bGVfX2kgYjJzdHlsZV9faSBiMnN0eWxlX19qIjsKICByZXR1cm4gaTsKfQoKdWZsb2F0IG11bHRpcGx5KHVmbG9hdCBpLCB1ZmxvYXQgaikgewogIGxvZ2ljICJmbG9hdF9tdWx0aXBseSBiMnN0eWxlX19pIGIyc3R5bGVfX2kgYjJzdHlsZV9faiI7CiAgcmV0dXJuIGk7Cn0KCnVmbG9hdCBkaXZpZGUodWZsb2F0IGksIHVmbG9hdCBqKSB7CiAgdWZsb2F0IHJlc3VsdDsKICBsb2dpYyAiZmxvYXRfZGl2aWRlIGIyc3R5bGVfX3Jlc3VsdCBiMnN0eWxlX19pIGIyc3R5bGVfX2oiOwogIHJldHVybiByZXN1bHQ7Cn0KCnVmbG9hdCBwb3dlcih1ZmxvYXQgaSwgdWZsb2F0IGopIHsKICBsb2dpYyAiZmxvYXRfcG93ZXIgYjJzdHlsZV9faSBiMnN0eWxlX19pIGIyc3R5bGVfX2oiOwogIHJldHVybiBpOwp9Cgp2b2lkIHN0ZF9vdXQodWZsb2F0IGkpIHsKICBzdGRfb3V0KHVmbG9hdF90b19zdHIoaSkpOwp9Cgp2b2lkIHN0ZF9lcnIodWZsb2F0IGkpIHsKICBzdGRfZXJyKHVmbG9hdF90b19zdHIoaSkpOwp9Cgp1ZmxvYXQgc2VsZl9pbmNfcG9zdCh1ZmxvYXQmIHgpIHsKICB1ZmxvYXQgciA9IHg7Cgl4ID0gYWRkKHgsIDEuMCk7CiAgcmV0dXJuIHI7Cn0KCnVmbG9hdCBzZWxmX2RlY19wb3N0KHVmbG9hdCYgeCkgewogIHVmbG9hdCByID0geDsKCXggPSBtaW51cyh4LCAxLjApOwogIHJldHVybiByOwp9Cgp1ZmxvYXQgc2VsZl9pbmNfcHJlKHVmbG9hdCYgeCkgewoJeCA9IGFkZCh4LCAxLjApOwogIHJldHVybiB4Owp9Cgp1ZmxvYXQgc2VsZl9kZWNfcHJlKHVmbG9hdCYgeCkgewoJeCA9IG1pbnVzKHgsIDEuMCk7CiAgcmV0dXJuIHg7Cn0KCnZvaWQgc2VsZl9hZGQodWZsb2F0JiBpLCB1ZmxvYXQgaikgewogIGkgPSBhZGQoaSwgaik7Cn0KCnZvaWQgc2VsZl9taW51cyh1ZmxvYXQmIGksIHVmbG9hdCBqKSB7CiAgaSA9IG1pbnVzKGksIGopOwp9Cgp2b2lkIHNlbGZfbXVsdGlwbHkodWZsb2F0JiBpLCB1ZmxvYXQgaikgewogIGkgPSBtdWx0aXBseShpLCBqKTsKfQoKdm9pZCBzZWxmX2RpdmlkZSh1ZmxvYXQmIGksIHVmbG9hdCBqKSB7CiAgaSA9IGRpdmlkZShpLCBqKTsKfQoKdm9pZCBzZWxmX3Bvd2VyKHVmbG9hdCYgaSwgdWZsb2F0IGopIHsKICBpID0gcG93ZXIoaSwgaik7Cn0KCm5hbWVzcGFjZSB1ZmxvYXQgewoKdHlwZWRlZiA6OnN0cmluZyBzdHJpbmc7CnR5cGVkZWYgOjp2b2lkIHZvaWQ7CnR5cGVkZWYgOjpib29sIGJvb2w7CnR5cGVkZWYgOjpiaWd1aW50IGJpZ3VpbnQ7CnR5cGVkZWYgOjpsb25nIGxvbmc7CnR5cGVkZWYgOjppbnQgaW50Owp0eXBlZGVmIDo6Ynl0ZSBieXRlOwp0eXBlZGVmIDo6dWZsb2F0IHVmbG9hdDsKCnVmbG9hdCBmcm9tKGJpZ3VpbnQgaSkgewogIDo6YjJzdHlsZTo6bG9hZF9tZXRob2QoImJpZ191aW50X3RvX2JpZ191ZGVjIik7CiAgcmV0dXJuIDo6YjJzdHlsZTo6ZXhlY3V0ZV9sb2FkZWRfbWV0aG9kPGJpZ3VpbnQsIHVmbG9hdD4oaSk7Cn0KCnVmbG9hdCBmcm9tKGludCBpKSB7CiAgcmV0dXJuIGZyb20oOjp0b19iaWd1aW50KGkpKTsKfQoKdWZsb2F0IGZyb20obG9uZyBpKSB7CiAgcmV0dXJuIGZyb20oOjp0b19iaWd1aW50KGkpKTsKfQoKdWZsb2F0IGZyYWN0aW9uKGJpZ3VpbnQgbiwgYmlndWludCBkKSB7CiAgdWZsb2F0IHJlc3VsdCA9IGZyb20obik7CiAgdWZsb2F0IHVkID0gZnJvbShkKTsKICByZXR1cm4gOjpiMnN0eWxlOjpkaXZpZGUocmVzdWx0LCB1ZCk7Cn0KCnVmbG9hdCBmcmFjdGlvbihiaWd1aW50IG4sIGludCBkKSB7CiAgcmV0dXJuIGZyYWN0aW9uKG4sIDo6dG9fYmlndWludChkKSk7Cn0KCnVmbG9hdCBmcmFjdGlvbihiaWd1aW50IG4sIGxvbmcgZCkgewogIHJldHVybiBmcmFjdGlvbihuLCA6OnRvX2JpZ3VpbnQoZCkpOwp9Cgp1ZmxvYXQgZnJhY3Rpb24oaW50IG4sIGJpZ3VpbnQgZCkgewogIHJldHVybiBmcmFjdGlvbig6OnRvX2JpZ3VpbnQobiksIGQpOwp9Cgp1ZmxvYXQgZnJhY3Rpb24obG9uZyBuLCBiaWd1aW50IGQpIHsKICByZXR1cm4gZnJhY3Rpb24oOjp0b19iaWd1aW50KG4pLCBkKTsKfQoKdWZsb2F0IGZyYWN0aW9uKGludCBuLCBpbnQgZCkgewogIHJldHVybiBmcmFjdGlvbig6OnRvX2JpZ3VpbnQobiksIDo6dG9fYmlndWludChkKSk7Cn0KCnVmbG9hdCBmcmFjdGlvbihsb25nIG4sIGxvbmcgZCkgewogIHJldHVybiBmcmFjdGlvbig6OnRvX2JpZ3VpbnQobiksIDo6dG9fYmlndWludChkKSk7Cn0KCn0gIC8vIG5hbWVzcGFjZSB1ZmxvYXQKCn0gIC8vIG5hbWVzcGFjZSBiMnN0eWxlCiNlbmRpZiAgLy8gQjJTVFlMRV9MSUJfQjJTVFlMRV9VRkxPQVRfSAoLAAAAc3RkL3R5cGVzLmhdAQAA77u/CiNpZm5kZWYgQjJTVFlMRV9MSUJfU1REX1RZUEVTX0gKI2RlZmluZSBCMlNUWUxFX0xJQl9TVERfVFlQRVNfSAoKI2luY2x1ZGUgPGJzdHlsZS90eXBlcy5oPgoKbmFtZXNwYWNlIHN0ZCB7Cgp0eXBlZGVmIDo6c3RyaW5nIHN0cmluZzsKdHlwZWRlZiA6OnZvaWQgdm9pZDsKdHlwZWRlZiA6OmJvb2wgYm9vbDsKdHlwZWRlZiA6OmJpZ3VpbnQgYmlndWludDsKdHlwZWRlZiA6OmxvbmcgbG9uZzsKdHlwZWRlZiA6OmludCBpbnQ7CnR5cGVkZWYgOjpieXRlIGJ5dGU7CnR5cGVkZWYgOjp1ZmxvYXQgdWZsb2F0OwoKfSAgLy8gbmFtZXNwYWNlIHN0ZAoKI2VuZGlmICAvLyBCMlNUWUxFX0xJQl9TVERfVFlQRVNfSAoAAABzdGQvdmVjdG9yGQUAAO+7vwojaWZuZGVmIEIyU1RZTEVfTElCX1NURF9WRUNUT1IKI2RlZmluZSBCMlNUWUxFX0xJQl9TVERfVkVDVE9SCgojaW5jbHVkZSA8YjJzdHlsZS5oPgojaW5jbHVkZSA8YXNzZXJ0Lmg+CiNpbmNsdWRlIDxiMnN0eWxlL2hlYXBfcHRyLmg+CiNpbmNsdWRlIDxzdGQvdHlwZXMuaD4KCm5hbWVzcGFjZSBzdGQgewoKdGVtcGxhdGUgPFQ+CmNsYXNzIHZlY3RvciB7CiAgOjpiMnN0eWxlOjpoZWFwX3B0cjxUPiBfYTsKICBpbnQgX3M7CgogIGludCBzaXplKCkgewogICAgcmV0dXJuIHRoaXMuX3M7CiAgfQoKICBpbnQgY2FwYWNpdHkoKSB7CiAgICByZXR1cm4gdGhpcy5fYS5zaXplKCk7CiAgfQoKICBUIGdldChpbnQgaW5kZXgpIHsKICAgIDo6YXNzZXJ0KGluZGV4ID49IDAsICJnZXQiKTsKICAgIDo6YXNzZXJ0KGluZGV4IDwgdGhpcy5zaXplKCksICJnZXQiKTsKICAgIHJldHVybiB0aGlzLl9hLmdldChpbmRleCk7CiAgfQoKICB2b2lkIHNldChpbnQgaW5kZXgsIFQgdikgewogICAgOjphc3NlcnQoaW5kZXggPj0gMCwgInNldCIpOwogICAgOjphc3NlcnQoaW5kZXggPCB0aGlzLnNpemUoKSwgInNldCIpOwogICAgdGhpcy5fYS5zZXQoaW5kZXgsIHYpOwogIH0KCiAgdm9pZCBkZXN0cnVjdCgpIHsKICAgIHRoaXMuX2EuZGVzdHJ1Y3QoKTsKICB9CgogIHZvaWQgcmVzZXJ2ZShpbnQgc2l6ZSkgewogICAgOjpiMnN0eWxlOjpoZWFwX3B0cjxUPiB4KHNpemUpOwogICAgZm9yIChpbnQgaSA9IDA7IGkgPCB0aGlzLnNpemUoKTsgaSsrKSB7CiAgICAgIHguc2V0KGksIHRoaXMuZ2V0KGkpKTsKICAgIH0KCXRoaXMuZGVzdHJ1Y3QoKTsKICAgIHRoaXMuX2EgPSB4OwoJeC5yZWxlYXNlKCk7CiAgfQoKICB2b2lkIGNvbnN0cnVjdChpbnQgc2l6ZSkgewogICAgdGhpcy5yZXNlcnZlKHNpemUpOwogIH0KCiAgdm9pZCBjb25zdHJ1Y3QoKSB7CiAgICB0aGlzLmNvbnN0cnVjdCg0KTsKICB9CgogIHZvaWQgcHVzaF9iYWNrKFQgdikgewogICAgaWYgKHRoaXMuc2l6ZSgpID09IHRoaXMuY2FwYWNpdHkoKSkgewogICAgICB0aGlzLnJlc2VydmUodGhpcy5jYXBhY2l0eSgpIDw8IDEpOwogICAgfQogICAgdGhpcy5fcysrOwogICAgdGhpcy5zZXQodGhpcy5zaXplKCkgLSAxLCB2KTsKICB9CgogIHZvaWQgcG9wX2JhY2soKSB7CiAgICA6OmFzc2VydCh0aGlzLnNpemUoKSA+IDAsICJwb3BfYmFjayIpOwogICAgdGhpcy5fcy0tOwogIH0KCiAgdm9pZCBjbGVhcigpIHsKICAgIHRoaXMuX3MgPSAwOwogIH0KfTsKCn0gIC8vIG5hbWVzcGFjZSBzdGQKCiNlbmRpZiAgLy8gQjJTVFlMRV9MSUJfU1REX1ZFQ1RPUhAAAAB0ZXN0aW5nL2Fzc2VydC5oIAUAAO+7vwojaWZuZGVmIEIyU1RZTEVfTElCX1RFU1RJTkdfQVNTRVJUX0gKI2RlZmluZSBCMlNUWUxFX0xJQl9URVNUSU5HX0FTU0VSVF9ICgojaW5jbHVkZSA8YjJzdHlsZS9zdGRpby5oPgojaW5jbHVkZSA8YjJzdHlsZS90b19zdHIuaD4KI2luY2x1ZGUgPGJzdHlsZS5oPgojaW5jbHVkZSA8YnN0eWxlL3N0ci5oPgojaW5jbHVkZSA8dGVzdGluZy90eXBlcy5oPgoKbmFtZXNwYWNlIGIyc3R5bGUgewpuYW1lc3BhY2UgdGVzdGluZyB7CgppbnQgX2Fzc2VydGlvbl9jb3VudCA9IDA7CgovLyBUT0RPOiBGaW5kIGEgYmV0dGVyIHdheSB0byB0ZXN0IHRoZSBfX0ZJTEVfXyBpbiBpbmNsdWRlZCBmaWxlcy4Kc3RyaW5nIGFzc2VydF9fRklMRV9fKCkgewogIHJldHVybiBfX0ZJTEVfXzsKfQoKdm9pZCBhc3NlcnRfdHJ1ZShib29sIHYsIHN0cmluZyBtc2cpIHsKICBfYXNzZXJ0aW9uX2NvdW50Kys7CiAgc3RyaW5nIHByZWZpeDsKICBpZiAodikgewogICAgcHJlZml4ID0gIlN1Y2Nlc3M6ICI7CiAgfSBlbHNlIHsKICAgIHByZWZpeCA9ICJGYWlsdXJlOiAiOwogIH0KICA6OmIyc3R5bGU6OnN0ZF9vdXQocHJlZml4KTsKICA6OmIyc3R5bGU6OnN0ZF9vdXQobXNnKTsKICA6OmIyc3R5bGU6OnN0ZF9vdXQoIlxuIik7Cn0KCnZvaWQgYXNzZXJ0X3RydWUoYm9vbCB2KSB7CiAgYXNzZXJ0X3RydWUodiwgIm5vIGV4dHJhIGluZm9ybWF0aW9uLiIpOwp9Cgp2b2lkIGFzc2VydF9mYWxzZShib29sIHYsIHN0cmluZyBtc2cpIHsKICBhc3NlcnRfdHJ1ZSghdiwgbXNnKTsKfQoKdm9pZCBhc3NlcnRfZmFsc2UoYm9vbCB2KSB7CiAgYXNzZXJ0X3RydWUoIXYpOwp9CgovKgpUT0RPOiBNYWtlIHRoaXMgd29yay4gQ3VycmVudGx5IGFzc2VydF9lcXVhbF9fMiBjb25mbGljdHMgd2l0aCB0aGUgZm9sbG93aW5nIG9uZS4KdGVtcGxhdGUgPFQsIFQyPgp2b2lkIGFzc2VydF9lcXVhbChUIHQsIFQyIHQyLCBzdHJpbmcgbXNnKSB7CiAgYXNzZXJ0X3RydWUodCA9PSB0MiwgbXNnKTsKfQoqLwoKdGVtcGxhdGUgPFQsIFQyPgp2b2lkIGFzc2VydF9lcXVhbChUIHQsIFQyIHQyKSB7CiAgYXNzZXJ0X3RydWUodCA9PSB0MiwgOjpzdHJfY29uY2F0KDo6YjJzdHlsZTo6dG9fc3RyKHQpLCAiICE9ICIsIDo6YjJzdHlsZTo6dG9fc3RyKHQyKSkpOwp9Cgp0ZW1wbGF0ZSA8VD4Kdm9pZCBhc3NlcnRfZXF1YWwoVCB0LCBUIHQyKSB7CiAgYXNzZXJ0X2VxdWFsPFQsIFQ+KHQsIHQyKTsKfQoKfSAgLy8gbmFtZXNwYWNlIHRlc3RpbmcKfSAgLy8gbmFtZXNwYWNlIGIyc3R5bGUKCiNlbmRpZiAgLy8gQjJTVFlMRV9MSUJfVEVTVElOR19BU1NFUlRfSAoPAAAAdGVzdGluZy90eXBlcy5orgEAAAojaWZuZGVmIEIyU1RZTEVfTElCX1RFU1RJTkdfVFlQRVNfSAojZGVmaW5lIEIyU1RZTEVfTElCX1RFU1RJTkdfVFlQRVNfSAoKI2luY2x1ZGUgPGJzdHlsZS90eXBlcy5oPgoKbmFtZXNwYWNlIGIyc3R5bGUgewpuYW1lc3BhY2UgdGVzdGluZyB7Cgp0eXBlZGVmIDo6c3RyaW5nIHN0cmluZzsKdHlwZWRlZiA6OnZvaWQgdm9pZDsKdHlwZWRlZiA6OmJvb2wgYm9vbDsKdHlwZWRlZiA6OmludCBpbnQ7CgovLyBUT0RPOiBGaW5kIGEgYmV0dGVyIHdheSB0byB0ZXN0IHRoZSBfX0ZJTEVfXyBpbiBpbmNsdWRlZCBmaWxlcy4Kc3RyaW5nIHR5cGVzX19GSUxFX18oKSB7CiAgcmV0dXJuIF9fRklMRV9fOwp9Cgp9ICAvLyBuYW1lc3BhY2UgdGVzdGluZwp9ICAvLyBuYWVtc3BhY2UgYjJzdHlsZQoKI2VuZGlmICAvLyBCMlNUWUxFX0xJQl9URVNUSU5HX1RZUEVTX0g="
        ))
End Class
