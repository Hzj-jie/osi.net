
IGNORE_TYPES blank, single-line-comment, multi-line-comment
ROOT_TYPES root-type

root-type [function, value-definition-with-semi-colon, value-declaration-with-semi-colon, namespace-, include, define, ifndef-wrapped, logic-with-semi-colon, typedef-with-semi-colon, struct, heap-declaration-with-semi-colon]

function name name start-bracket [paramlist]? end-bracket multi-sentence-paragraph
paramlist [param-with-comma]* param
param-with-comma param comma
param name name

namespace- kw-namespace name start-paragraph [root-type]* end-paragraph

paragraph [sentence, multi-sentence-paragraph]
sentence [sentence-with-semi-colon, sentence-without-semi-colon]
sentence-with-semi-colon [value-definition, value-declaration, value-clause, return-clause, ignore-result-function-call, kw-break, logic, self-value-clause, typedef, heap-declaration, heap-clause]? semi-colon
sentence-without-semi-colon [condition, while, for-loop]

multi-sentence-paragraph start-paragraph [sentence]* end-paragraph

value-declaration name name
value-definition name name assignment value
heap-declaration name heap-name
value-clause name assignment value
heap-clause heap-name assignment value
self-operator [self-add, self-minus, self-multiply, self-divide, self-mod, self-power, self-bit-and, self-bit-or, self-and, self-or, self-left-shift, self-right-shift]
self-value-clause name self-operator value
self-value-clause2 heap-name self-operator value

value-definition-with-semi-colon value-definition semi-colon
value-declaration-with-semi-colon value-declaration semi-colon
heap-declaration-with-semi-colon heap-declaration semi-colon

condition kw-if start-bracket value end-bracket paragraph [else-condition]?
else-condition kw-else paragraph

while kw-while start-bracket value end-bracket paragraph

for-loop kw-for start-bracket [value-declaration, value-definition]? semi-colon [value]? semi-colon [value-clause, self-value-clause]? end-bracket paragraph

value [value-with-bracket, value-without-bracket]
value-with-bracket start-bracket value end-bracket
raw-value [function-call, variable-name, heap-name, integer, biguint, ufloat, bool, string]
value-without-bracket [raw-value, value-with-operation]
value-with-operation [unary-operation-value, binary-operation-value]
unary-operation-value [pre-operation-value, post-operation-value]
pre-operation-value [not, self-inc, self-dec] value
# Should support post-operation-value value [self-inc, self-dec]
post-operation-value raw-value [self-inc, self-dec]
# Should support binary-operation-value value [add, minus, multiply, divide, mod, power, bit-and, bit-or, and, or, less-than, greater-than, less-or-equal, greater-or-equal, equal, not-equal] value
binary-operation-value raw-value [add, minus, multiply, divide, mod, power, bit-and, bit-or, and, or, left-shift, right-shift, less-than, greater-than, less-or-equal, greater-or-equal, equal, not-equal] value

variable-name name
heap-name name start-square-bracket value end-square-bracket

ignore-result-function-call function-call

function-call name start-bracket [value-list]? end-bracket
value-list [value-with-comma]* value
value-with-comma value comma

return-clause kw-return [value]?

# Embed a logic statement directly, like logic "int stdout a_string"
logic kw-logic string
logic-with-semi-colon logic semi-colon

include-with-string kw-include string
include [include-with-string, include-with-file]

ifndef-wrapped kw-ifndef name [root-type]* kw-endif
define kw-define name

# Allow type* to be used as a string.
typedef-type [name, string]
typedef kw-typedef typedef-type typedef-type
typedef-with-semi-colon typedef semi-colon

# TODO: Support value-definition
struct kw-struct name start-paragraph [value-declaration-with-semi-colon]* end-paragraph semi-colon
