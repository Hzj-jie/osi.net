
string b2style__true_str = "True";
string b2style__false_str = "False";

void b2style__std_out(string i) {
  logic "interrupt stdout i @@prefixes@temps@string";
}

void b2style__std_err(string i) {
  logic "interrupt stderr i @@prefixes@temps@string";
}

void b2style__bool_std_out(bool i) {
  if (i) {
    b2style__std_out(b2style__true_str);
  } else {
    b2style__std_out(b2style__false_str);
  }
}

void b2style__bool_std_err(bool i) {
  if (i) {
    b2style__std_err(b2style__true_str);
  } else {
    b2style__std_err(b2style__false_str);
  }
}

void b2style__std_out(bool i) {
  b2style__bool_std_out(i);
}

void b2style__std_err(bool i) {
  b2style__bool_std_err(i);
}

int b2style__current_ms() {
  int result;
  logic "interrupt current_ms @@prefixes@temps@string result";
  return result;
}

string b2style__str_concat(string i, string j) {
  logic "append i j";
  return i;
}

string b2style__str_concat(string i, byte j) {
  logic "append i j";
  return i;
}

string b2style__to_str(byte i) {
  string s;
  return b2style__str_concat(s, i);
}

bool b2style__and(bool i, bool j) {
  if (i) return j;
  return false;
}

bool b2style__or(bool i, bool j) {
  if (i) return true;
  if (j) return true;
  return false;
}

bool b2style__not(bool i) {
  if (i) return false;
  return true;
}

bigint b2style__to_bigint(int i) {
  return i;
}

bigint b2style__to_bigint(long i) {
  return i;
}

long b2style__to_long(int i) {
  return i;
}

bool b2style__equal(bigint i, bigint j) {
  bool result;
  logic "equal result i j";
  return result;
}

bool b2style__equal(long i, long j) {
  return b2style__equal(b2style__to_bigint(i), b2style__to_bigint(j));
}

bool b2style__equal(int i, int j) {
  return b2style__equal(b2style__to_bigint(i), b2style__to_bigint(j));
}

bool b2style__greater_than(bigint i, bigint j) {
  bool result;
  logic "more result i j";
  return result;
}

bool b2style__greater_than(long i, long j) {
  return b2style__greater_than(b2style__to_bigint(i), b2style__to_bigint(j));
}

bool b2style__greater_than(int i, int j) {
  return b2style__greater_than(b2style__to_bigint(i), b2style__to_bigint(j));
}

bool b2style__less_than(bigint i, bigint j) {
  bool result;
  logic "less result i j";
  return result;
}

bool b2style__less_than(long i, long j) {
  return b2style__less_than(b2style__to_bigint(i), b2style__to_bigint(j));
}

bool b2style__less_than(int i, int j) {
  return b2style__less_than(b2style__to_bigint(i), b2style__to_bigint(j));
}

bool b2style__less_or_equal(bigint i, bigint j) {
  return b2style__or(b2style__less_than(i, j), b2style__equal(i, j));
}

bool b2style__less_or_equal(long i, long j) {
  return b2style__or(b2style__less_than(i, j), b2style__equal(i, j));
}

bool b2style__less_or_equal(int i, int j) {
  return b2style__or(b2style__less_than(i, j), b2style__equal(i, j));
}

bool b2style__greater_or_equal(bigint i, bigint j) {
  return b2style__or(b2style__greater_than(i, j), b2style__equal(i, j));
}

bool b2style__greater_or_equal(long i, long j) {
  return b2style__or(b2style__greater_than(i, j), b2style__equal(i, j));
}

bool b2style__greater_or_equal(int i, int j) {
  return b2style__or(b2style__greater_than(i, j), b2style__equal(i, j));
}

long b2style__old_fit_in_long(long x) {
  int len;
  logic "sizeof len x";
  if (b2style__greater_than(len, 8)) {
    logic "subtract len len @@prefixes@constants@size_of_long";
    logic "cut_slice x x @@prefixes@constants@int_0 len";
  }
  return x;
}

long b2style__fit_in_long(long x) {
  logic "cut_slice x x @@prefixes@constants@int_0 @@prefixes@constants@size_of_long";
  return x;
}

int b2style__old_fit_in_int(int x) {
  int len;
  logic "sizeof len x";
  if (b2style__greater_than(len, 4)) {
    logic "subtract len len @@prefixes@constants@size_of_int";
    logic "cut_slice x x @@prefixes@constants@int_0 len";
  }
  return x;
}

int b2style__fit_in_int(int x) {
  logic "cut_slice x x @@prefixes@constants@int_0 @@prefixes@constants@size_of_int";
  return x;
}

byte b2style__old_fit_in_byte(byte x) {
  int len;
  logic "sizeof len x";
  if (b2style__greater_than(len, 1)) {
    logic "subtract len len @@prefixes@constants@size_of_byte";
    logic "cut_slice x x @@prefixes@constants@int_0 len";
  }
  return x;
}

byte b2style__fit_in_byte(byte x) {
  logic "cut_slice x x @@prefixes@constants@int_0 @@prefixes@constants@size_of_byte";
  return x;
}

byte b2style__old_to_byte(int x) {
  byte y;
  int len;
  logic "sizeof len x";
  if (b2style__greater_than(len, 1)) {
    logic "subtract len len @@prefixes@constants@size_of_byte";
    logic "cut_slice y x @@prefixes@constants@int_0 len";
  } else {
    logic "cut_slice y x @@prefixes@constants@int_0 @@prefixes@constants@int_1";
  }
  return y;
}

byte b2style__to_byte(int x) {
  byte y;
  logic "cut_slice y x @@prefixes@constants@int_0 @@prefixes@constants@size_of_byte";
  return y;
}

bigint b2style__add(bigint i, bigint j) {
  logic "add i i j";
  return i;
}

long b2style__add(long i, long j) {
  logic "add i i j";
  return b2style__fit_in_long(i);
}

int b2style__add(int i, int j) {
  logic "add i i j";
  return b2style__fit_in_int(i);
}

byte b2style__add(byte i, byte j) {
  logic "add i i j";
  return b2style__fit_in_byte(i);
}

bigint b2style__minus(bigint i, bigint j) {
  logic "subtract i i j";
  return i;
}

long b2style__minus(long i, long j) {
  logic "subtract i i j";
  return b2style__fit_in_long(i);
}

int b2style__minus(int i, int j) {
  logic "subtract i i j";
  return b2style__fit_in_int(i);
}

bigint b2style__multiply(bigint i, bigint j) {
  logic "multiply i i j";
  return i;
}

long b2style__multiply(long i, long j) {
  logic "multiply i i j";
  return b2style__fit_in_long(i);
}

int b2style__multiply(int i, int j) {
  logic "multiply i i j";
  return b2style__fit_in_int(i);
}

bigint b2style__divide(bigint i, bigint j) {
  bigint result;
  logic "divide result @@prefixes@temps@string i j";
  return result;
}

long b2style__divide(long i, long j) {
  long result;
  logic "divide result @@prefixes@temps@string i j";
  return b2style__fit_in_long(result);
}

int b2style__divide(int i, int j) {
  int result;
  logic "divide result @@prefixes@temps@string i j";
  return b2style__fit_in_int(result);
}

bigint b2style__mod(bigint i, bigint j) {
  bigint result;
  logic "divide @@prefixes@temps@string result i j";
  return result;
}

long b2style__mod(long i, long j) {
  long result;
  logic "divide @@prefixes@temps@string result i j";
  return b2style__fit_in_long(result);
}

int b2style__mod(int i, int j) {
  int result;
  logic "divide @@prefixes@temps@string result i j";
  return b2style__fit_in_int(result);
}

bigint b2style__power(bigint i, bigint j) {
  logic "power i i j";
  return i;
}

long b2style__power(long i, long j) {
  logic "power i i j";
  return b2style__fit_in_long(i);
}

int b2style__power(int i, int j) {
  logic "power i i j";
  return b2style__fit_in_int(i);
}

bigint b2style__bit_and(bigint i, bigint j) {
  logic "and i i j";
  return i;
}

long b2style__bit_and(long i, long j) {
  logic "and i i j";
  return i;
}

int b2style__bit_and(int i, int j) {
  logic "and i i j";
  return i;
}

bigint b2style__bit_or(bigint i, bigint j) {
  logic "or i i j";
  return i;
}

long b2style__bit_or(long i, long j) {
  logic "or i i j";
  return i;
}

int b2style__bit_or(int i, int j) {
  logic "or i i j";
  return i;
}

bigint b2style__self_inc(bigint x) {
  logic "add x x @@prefixes@constants@int_1";
  return x;
}

long b2style__self_inc(long x) {
  logic "add x x @@prefixes@constants@int_1";
  return b2style__fit_in_long(x);
}

int b2style__self_inc(int x) {
  logic "add x x @@prefixes@constants@int_1";
  return b2style__fit_in_int(x);
}

bigint b2style__self_dec(bigint x) {
  logic "subtract x x @@prefixes@constants@int_1";
  return x;
}

long b2style__self_dec(long x) {
  logic "subtract x x @@prefixes@constants@int_1";
  return b2style__fit_in_long(x);
}

int b2style__self_dec(int x) {
  logic "subtract x x @@prefixes@constants@int_1";
  return b2style__fit_in_int(x);
}

string b2style__int_to_str(int i) {
  string s;
  while (b2style__greater_than(i, 0)) {
    int b = b2style__mod(i, 10);
	i = b2style__divide(i, 10);
	b = b2style__add(b, 48);
	s = b2style__str_concat(b2style__to_str(b2style__to_byte(b)), s);
  }
  return s;
}

void b2style__int_std_out(int i) {
  b2style__std_out(b2style__int_to_str(i));
}

void b2style__int_std_err(int i) {
  b2style__std_err(b2style__int_to_str(i));
}

void b2style__std_out(int i) {
  b2style__int_std_out(i);
}

void b2style__std_err(int i) {
  b2style__int_std_err(i);
}
