
bool b2style__equal(ufloat i, ufloat j) {
  bool result;
  logic "float_equal result i j";
  return result;
}

bool b2style__not_equal(ufloat i, ufloat j) {
  bool result;
  logic "float_equal result i j";
  return b2style__not(result);
}

bool b2style__greater_than(ufloat i, ufloat j) {
  bool result;
  logic "float_more result i j";
  return result;
}

bool b2style__greater_or_equal(ufloat i, ufloat j) {
  return b2style__or(b2style__greater_than(i, j), b2style__equal(i, j));
}

bool b2style__less_than(ufloat i, ufloat j) {
  bool result;
  logic "float_less result i j";
  return result;
}

bool b2style__less_or_equal(ufloat i, ufloat j) {
  return b2style__or(b2style__less_than(i, j), b2style__equal(i, j));
}

ufloat b2style__add(ufloat i, ufloat j) {
  logic "float_add i i j";
  return i;
}

ufloat b2style__minus(ufloat i, ufloat j) {
  logic "float_subtract i i j";
  return i;
}

ufloat b2style__multiply(ufloat i, ufloat j) {
  logic "float_multiply i i j";
  return i;
}

ufloat b2style__divide(ufloat i, ufloat j) {
  ufloat result;
  logic "float_divide result i j";
  return result;
}

ufloat b2style__power(ufloat i, ufloat j) {
  logic "float_power i i j";
  return i;
}

string b2style__ufloat_to_str(ufloat i) {
  string method_name = b2style__loaded_methods("big_udec_to_str");
  logic "interrupt load_method method_name @@prefixes@temps@string";
  string result;
  logic "interrupt execute_loaded_method i result";
  return result;
}

void b2style__std_out(ufloat i) {
  b2style__std_out(b2style__ufloat_to_str(i));
}

ufloat b2style__ufloat__from(biguint i) {
  string method_name = b2style__loaded_methods("big_uint_to_big_udec");
  logic "interrupt load_method method_name @@prefixes@temps@string";
  ufloat result;
  logic "interrupt execute_loaded_method i result";
  return result;
}

ufloat b2style__ufloat__from(int i) {
  return b2style__ufloat__from(b2style__to_biguint(i));
}

ufloat b2style__ufloat__from(long i) {
  return b2style__ufloat__from(b2style__to_biguint(i));
}

ufloat b2style__ufloat__fraction(biguint n, biguint d) {
  ufloat result = b2style__ufloat__from(n);
  ufloat ud = b2style__ufloat__from(d);
  return b2style__divide(result, ud);
}

ufloat b2style__ufloat__fraction(int n, int d) {
  return b2style__ufloat__fraction(b2style__to_biguint(n), b2style__to_biguint(d));
}

ufloat b2style__ufloat__fraction(long n, long d) {
  return b2style__ufloat__fraction(b2style__to_biguint(n), b2style__to_biguint(d));
}
