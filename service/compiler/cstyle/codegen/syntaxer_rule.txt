
IGNORE_TYPES blank
ROOT_TYPES function

# No struct support.

function name name start-bracket [paramlist]? end-bracket multi-sentence-paragraph
paramlist [param-with-comma]* param
param-with-comma param comma
param name name

paragraph [sentence, multi-sentence-paragraph]
sentence [sentence-with-semi-colon, sentence-without-semi-colon, semi-colon]
sentence-with-semi-colon [value-definition, value-declaration, value-clause, return-clause, function-call, kw-break] semi-colon
sentence-without-semi-colon [condition, while, for-loop]

multi-sentence-paragraph start-paragraph [sentence]* end-paragraph

value-declaration name name
value-definition name name assignment value
# Note, function-call = value is just a syntax sugar of return-instance-of-function-call.operator=(value), so do not
# treat it specifically in the c-style level. As c-style does not allow instance at all.
value-clause name assignment value

condition kw-if start-bracket value end-bracket paragraph [else-condition]?
else-condition kw-else paragraph

while kw-while start-bracket value end-bracket paragraph

for-loop kw-for start-bracket [value-declaration]? semi-colon [value]? semi-colon [value-clause]? end-bracket paragraph

value [value-with-bracket, value-without-bracket]
value-with-bracket start-bracket value end-bracket
value-without-bracket [name, function-call, value-with-operation, integer, float, bool, string]
value-with-operation [unary-operation-value, binary-operation-value]
unary-operation-value [pre-operation-value, post-operation-value]
pre-operation-value [not, self-inc, self-dec] value
post-operation-value value [self-inc, self-dec]
binary-operation-value value [add, minus, multiply, divide, mod, power, bit-and, bit-or, and, or, less-than, greater-than, less-or-equal, greater-or-equal, equal] value

function-call name start-bracket [value-list]? end-bracket
value-list [value-with-comma]* value
value-with-comma value comma

return-clause kw-return [value]?

# Embed a logic statement directly, like logic "int stdout a_string"
logic kw-logic string
