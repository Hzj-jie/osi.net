
IGNORE_TYPES blank
ROOT_TYPES function

function name name start-bracket [paramlist]? end-bracket multi-sentence-paragraph
paramlist [param-with-comma]* param
param-with-comma param comma
param name name

paragraph [sentence, multi-sentence-paragraph]
sentence [sentence-with-semi-colon, sentence-without-semi-colon, semi-colon]
sentence-with-semi-colon [value-definition, value-declaration, value-clause, return-clause, function-call, kw-break] semi-colon
sentence-without-semi-colon [condition, while, for-loop]

multi-sentence-paragraph start-paragraph [sentence]* end-paragraph

value-declaration name name
value-definition name name assignment value
value-clause left-value assignment value

condition kw-if start-bracket value end-bracket paragraph [else-condition]?
else-condition kw-else paragraph

while kw-while start-bracket value end-bracket paragraph

for-loop kw-for start-bracket [value-declaration]? semi-colon [value]? semi-colon [value-clause]? end-bracket paragraph

value [value-with-bracket, value-without-bracket]
value-with-bracket start-bracket value end-bracket
value-without-bracket [left-value, right-value]
left-value [function-call, name]
right-value [left-value, comparasion, value-with-operation, integer, float, bool, string]
value-with-operation [single-operation-value, binary-operation-value]
single-operation-value [pre-operation-value, post-operation-value]
pre-operation-value [not, self-add, self-minus] value
post-operation-value value [self-add, self-minus]
binary-operation-value value [add, minus, multiply, divide, mod, power, bit-and, bit-or, and, or] value
comparasion value [less-than, great-than, less-or-equal, great-or-equal, equal] value

function-call name start-bracket [value-list]? end-bracket
value-list [value-with-comma]* value
value-with-comma value comma

return-clause kw-return [value]?
