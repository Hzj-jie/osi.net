
##DEFINE CLASS_NAME big_int
##DEFINE IMPL_CLASS big_uint
##DEFINE REPLACE_BY_ARRAY_RETURNS_BOOLEAN False
##INCLUDE big_unsigned_to_signed.vbp
##INCLUDE big_shift.vbp

Partial Public NotInheritable Class ##CLASS_NAME##
    Public Sub replace_by(ByVal i As Boolean)
        d.replace_by(i)
        set_signal(Not i)
    End Sub

    Public Shared Widening Operator CType(ByVal this As Boolean) As ##CLASS_NAME##
        Dim r As ##CLASS_NAME## = Nothing
        r = New ##CLASS_NAME##()
        r.replace_by(this)
        Return r
    End Operator

    Public Function power_of_2() As Boolean
        Return positive() AndAlso d.power_of_2()
    End Function

    Public Function as_uint64(ByRef overflow As Boolean) As UInt64
        If negative() Then
            overflow = True
            Return 0
        End If
        Return d.as_uint64(overflow)
    End Function

    Public Function as_int32(ByRef overflow As Boolean) As Int32
        Dim v As Int32 = 0
        v = d.as_int32(overflow)
        Return If(negative(), -v, v)
    End Function

    Private Sub divide(ByVal that As ##CLASS_NAME##, ByRef remainder As ##CLASS_NAME##, ByRef divide_by_zero As Boolean)
        If that Is Nothing OrElse that.is_zero() Then
            divide_by_zero = True
            Return
        End If
        Dim n As Boolean = False
        n = negative()
        Dim r As ##IMPL_CLASS## = Nothing
        d.divide(that.d, divide_by_zero, r)
        remainder = share(r)
        confirm_signal()
        If n Then
            remainder.set_negative()
        End If
        If n = that.negative() Then
            set_positive()
        Else
            set_negative()
        End If
    End Sub

    Private Sub extract(ByVal that As ##CLASS_NAME##,
                        ByRef remainder As ##CLASS_NAME##,
                        ByRef divide_by_zero As Boolean,
                        ByRef imaginary_number As Boolean)
        divide_by_zero = False
        imaginary_number = False
        If that Is Nothing OrElse that.is_zero() Then
            If is_one() Then
                divide_by_zero = False
                remainder = zero()
            Else
                divide_by_zero = True
            End If
            Return
        End If
        imaginary_number = (negative() AndAlso that.even())
        If imaginary_number Then
            Return
        End If
        remainder = New ##CLASS_NAME##()
        If is_zero_or_one_or_negative_one() Then
            Return
        End If
        If that.negative() Then
            remainder.replace_by(Me)
            set_zero()
        Else
            Dim r As ##IMPL_CLASS## = Nothing
            d.extract(that.d, divide_by_zero, r)
            remainder.replace_by(r)
            remainder.set_signal(signal())
        End If
        confirm_signal()
    End Sub

    Public Function divide(ByVal that As ##IMPL_CLASS##,
                           ByRef divide_by_zero As Boolean,
                           Optional ByRef remainder As ##CLASS_NAME## = Nothing) As ##CLASS_NAME##
        Return divide(share(that), divide_by_zero, remainder)
    End Function

    Public Function divide(ByVal that As ##CLASS_NAME##,
                           ByRef divide_by_zero As Boolean,
                           Optional ByRef remainder As ##CLASS_NAME## = Nothing) As ##CLASS_NAME##
        divide(that, remainder, divide_by_zero)
        Return Me
    End Function

    Public Function divide(ByVal that As ##IMPL_CLASS##,
                           Optional ByRef remainder As ##CLASS_NAME## = Nothing) As ##CLASS_NAME##
        Return divide(share(that), remainder)
    End Function

    Public Function divide(ByVal that As ##CLASS_NAME##,
                           Optional ByRef remainder As ##CLASS_NAME## = Nothing) As ##CLASS_NAME##
        Dim r As Boolean = False
        divide(that, remainder, r)
        If r Then
            Throw divide_by_zero()
        End If
        Return Me
    End Function

    Public Function assert_divide(ByVal that As ##IMPL_CLASS##,
                                  Optional ByRef remainder As ##CLASS_NAME## = Nothing) As ##CLASS_NAME##
        Return assert_divide(share(that), remainder)
    End Function

    Public Function assert_divide(ByVal that As ##CLASS_NAME##,
                                  Optional ByRef remainder As ##CLASS_NAME## = Nothing) As ##CLASS_NAME##
        Dim r As Boolean = False
        divide(that, remainder, r)
        assert(Not r)
        Return Me
    End Function

    Public Function modulus(ByVal that As ##IMPL_CLASS##,
                            ByRef divide_by_zero As Boolean) As ##CLASS_NAME##
        Return modulus(share(that), divide_by_zero)
    End Function

    ' TODO: A better modulus implementation without divide.
    Public Function modulus(ByVal that As ##CLASS_NAME##,
                            ByRef divide_by_zero As Boolean) As ##CLASS_NAME##
        Dim remainder As ##CLASS_NAME## = Nothing
        divide(that, remainder, divide_by_zero)
        assert(replace_by(remainder))
        Return Me
    End Function

    Public Function modulus(ByVal that As ##IMPL_CLASS##) As ##CLASS_NAME##
        Return modulus(share(that))
    End Function

    Public Function modulus(ByVal that As ##CLASS_NAME##) As ##CLASS_NAME##
        Dim r As Boolean = False
        modulus(that, r)
        If r Then
            Throw divide_by_zero()
        End If
        Return Me
    End Function

    Public Function assert_modulus(ByVal that As ##IMPL_CLASS##) As ##CLASS_NAME##
        Return assert_modulus(share(that))
    End Function

    Public Function assert_modulus(ByVal that As ##CLASS_NAME##) As ##CLASS_NAME##
        Dim r As Boolean = False
        modulus(that, r)
        assert(Not r)
        Return Me
    End Function

    Public Function extract(ByVal that As ##IMPL_CLASS##,
                            ByRef divide_by_zero As Boolean,
                            ByRef imaginary_number As Boolean,
                            Optional ByRef remainder As ##CLASS_NAME## = Nothing) As ##CLASS_NAME##
        Return extract(share(that), divide_by_zero, imaginary_number, remainder)
    End Function

    Public Function extract(ByVal that As ##CLASS_NAME##,
                            ByRef divide_by_zero As Boolean,
                            ByRef imaginary_number As Boolean,
                            Optional ByRef remainder As ##CLASS_NAME## = Nothing) As ##CLASS_NAME##
        extract(that, remainder, divide_by_zero, imaginary_number)
        Return Me
    End Function

    Public Function extract(ByVal that As ##IMPL_CLASS##,
                            Optional ByRef remainder As ##CLASS_NAME## = Nothing) As ##CLASS_NAME##
        Return extract(share(that), remainder)
    End Function

    Public Function extract(ByVal that As ##CLASS_NAME##,
                            Optional ByRef remainder As ##CLASS_NAME## = Nothing) As ##CLASS_NAME##
        Dim d As Boolean = False
        Dim i As Boolean = False
        extract(that, remainder, d, i)
        If d Then
            Throw divide_by_zero()
        End If
        If i Then
            Throw imaginary_number()
        End If
        Return Me
    End Function

    Public Function assert_extract(ByVal that As ##IMPL_CLASS##,
                                   Optional ByRef remainder As ##CLASS_NAME## = Nothing) As ##CLASS_NAME##
        Return assert_extract(share(that), remainder)
    End Function

    Public Function assert_extract(ByVal that As ##CLASS_NAME##,
                                   Optional ByRef remainder As ##CLASS_NAME## = Nothing) As ##CLASS_NAME##
        Dim d As Boolean = False
        Dim i As Boolean = False
        extract(that, remainder, d, i)
        assert(Not d)
        assert(Not i)
        Return Me
    End Function

    Public Shared Operator /(ByVal this As ##CLASS_NAME##, ByVal that As ##CLASS_NAME##) As pair(Of ##CLASS_NAME##, ##CLASS_NAME##)
        Dim q As ##CLASS_NAME## = Nothing
        Dim r As ##CLASS_NAME## = Nothing
        q = New ##CLASS_NAME##(this)
        q.divide(that, r)
        Return pair.emplace_of(q, r)
    End Operator

    Public Shared Operator Mod(ByVal this As ##CLASS_NAME##, ByVal that As ##CLASS_NAME##) As ##CLASS_NAME##
        Dim q As ##CLASS_NAME## = Nothing
        Dim r As ##CLASS_NAME## = Nothing
        q = New ##CLASS_NAME##(this)
        q.divide(that, r)
        Return r
    End Operator
End Class
