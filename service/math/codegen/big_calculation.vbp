
Partial Public NotInheritable Class ##CLASS_NAME##
    Public Function add(ByVal that As ##IMPL_CLASS##) As ##CLASS_NAME##
        Return add(share(that))
    End Function

    Public Function add(ByVal that As ##CLASS_NAME##) As ##CLASS_NAME##
        If Not that Is Nothing AndAlso Not that.is_zero() Then
            If is_zero() Then
                replace_by(that)
            ElseIf positive() = that.positive() Then
                d.add(that.d)
            Else
                If d.less(that.d) Then
                    Dim t As ##IMPL_CLASS## = Nothing
                    t = New ##IMPL_CLASS##(that.d)
                    t.assert_sub(d)
                    assert(##IMPL_CLASS##.swap(d, t))
                    set_signal(that.signal())
                Else
                    d.assert_sub(that.d)
                    confirm_signal()
                End If
            End If
        End If
        Return Me
    End Function

    Public Function [sub](ByVal that As ##IMPL_CLASS##) As ##CLASS_NAME##
        Return [sub](share(that))
    End Function

    Public Function [sub](ByVal that As ##CLASS_NAME##) As ##CLASS_NAME##
        Dim t As ##CLASS_NAME## = Nothing
        t = share(that)
        If t Is Nothing Then
            Return Me
        Else
            t.reverse_signal()
            Return add(t)
        End If
    End Function

    Public Function multiply(ByVal that As ##IMPL_CLASS##) As ##CLASS_NAME##
        Return multiply(share(that))
    End Function

    Public Function multiply(ByVal that As ##CLASS_NAME##) As ##CLASS_NAME##
        If Not that Is Nothing Then
            d.multiply(that.d)
            set_signal(positive() = that.positive())
        End If
        Return Me
    End Function

    Public Function power_2() As ##CLASS_NAME##
        d.power_2()
        set_positive()
        Return Me
    End Function

    Public Function power(ByVal that As ##IMPL_CLASS##) As ##CLASS_NAME##
        Return power(share(that))
    End Function

    Public Function power(ByVal that As ##CLASS_NAME##) As ##CLASS_NAME##
        If that Is Nothing OrElse that.is_one() Then
            set_positive()
            set_one()
            Return Me
        End If
        If is_zero() OrElse is_one() Then
            Return Me
        End If
        If that.not_negative() Then
            d.power(that.d)
        ElseIf Not is_one_or_negative_one() Then
            set_zero()
        End If
        If that.d.even() Then
            set_positive()
        End If
        Return Me
    End Function
End Class

